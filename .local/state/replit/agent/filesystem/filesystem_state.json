{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Crypto Marketplace\n\n## Overview\n\nThis is a multi-vendor cryptocurrency marketplace for trading digital accounts. The application features a dark, minimal design aesthetic with a focus on privacy, security, and anonymity. It supports BTC/XMR payments, optional escrow protection, and provides both marketplace and admin interfaces. The system is built as a full-stack web application with static UI components and placeholder data for demonstration purposes.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React with TypeScript using Vite as the build tool\n- **Routing**: Wouter for client-side routing\n- **State Management**: TanStack React Query for server state management\n- **UI Framework**: Radix UI components with shadcn/ui design system\n- **Styling**: Tailwind CSS with custom dark theme color tokens\n- **Typography**: Inter for UI text, JetBrains Mono for code/data display\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript with ES modules\n- **Database ORM**: Drizzle ORM with PostgreSQL dialect\n- **Session Storage**: Connect-pg-simple for PostgreSQL session storage\n- **Development**: Server-side rendering with Vite integration for development\n\n### Design System\n- **Theme**: Dark mode with custom crypto marketplace color palette\n- **Colors**: Deep blues and grays (#0B0F14 background, #22D3EE accent)\n- **Components**: Comprehensive UI component library including cards, forms, navigation, tables, and status badges\n- **Layout**: 12-column grid system with 1440px max container width\n- **Accessibility**: WCAG AA compliant with focus states and keyboard navigation\n\n### Data Storage\n- **Primary Database**: PostgreSQL with connection pooling\n- **ORM**: Drizzle with schema-first approach\n- **Migrations**: Drizzle Kit for database schema management\n- **Development Storage**: In-memory storage interface for development/testing\n\n### Application Structure\n- **Client Directory**: React frontend application with components, pages, and utilities\n- **Server Directory**: Express backend with routes, storage abstraction, and Vite integration\n- **Shared Directory**: Common schemas and types shared between client and server\n- **Component Organization**: Modular structure with admin and marketplace feature separation\n\n### Authentication & Security\n- **User Schema**: Basic username/password authentication setup\n- **Privacy Focus**: Minimal data collection approach designed for anonymous usage\n- **Session Management**: PostgreSQL-backed session storage for scalability\n\n### Key Features\n- **Marketplace Interface**: Product browsing, search, and vendor management\n- **Admin Dashboard**: User management, vendor oversight, order tracking, and system analytics\n- **Multi-Currency Support**: Designed for BTC/XMR payment integration\n- **Escrow System**: Framework for secure transaction handling\n- **Responsive Design**: Mobile-first approach with adaptive layouts\n\n## External Dependencies\n\n### Core Framework Dependencies\n- **React Ecosystem**: React 18 with TypeScript, React Query for data fetching\n- **Routing**: Wouter for lightweight client-side routing\n- **Build Tools**: Vite for fast development and building, esbuild for server bundling\n\n### UI and Styling\n- **Component Library**: Radix UI primitives for accessible components\n- **Styling**: Tailwind CSS with PostCSS processing\n- **Icons**: Lucide React for consistent iconography\n- **Form Handling**: React Hook Form with Zod resolvers for validation\n\n### Backend Infrastructure\n- **Web Framework**: Express.js for HTTP server and API routes\n- **Database**: Neon serverless PostgreSQL for cloud database hosting\n- **ORM**: Drizzle ORM with Drizzle Kit for migrations and schema management\n- **Session Storage**: connect-pg-simple for PostgreSQL session persistence\n\n### Development Tools\n- **TypeScript**: Full TypeScript support across client and server\n- **Replit Integration**: Vite plugins for Replit development environment\n- **Hot Reload**: Vite HMR for fast development iteration\n- **Error Handling**: Runtime error overlay for development debugging\n\n### Utility Libraries\n- **Date Handling**: date-fns for date manipulation and formatting\n- **Class Management**: clsx and class-variance-authority for conditional styling\n- **Carousel**: Embla Carousel for image and content carousels\n- **Command Interface**: cmdk for search and command palette functionality","size_bytes":4495},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      colors: {\n        /* Crypto Marketplace Colors */\n        bg: \"hsl(210, 47%, 4%)\",\n        surface: \"hsl(210, 44%, 8%)\",\n        \"surface-2\": \"hsl(210, 41%, 11%)\",\n        text: \"hsl(215, 20%, 91%)\",\n        muted: \"hsl(215, 14%, 63%)\",\n        border: \"hsl(210, 29%, 15%)\",\n        accent: {\n          DEFAULT: \"hsl(186, 84%, 55%)\",\n          foreground: \"hsl(210, 47%, 4%)\",\n        },\n        \"accent-2\": \"hsl(190, 75%, 73%)\",\n        success: \"hsl(142, 76%, 46%)\",\n        warning: \"hsl(38, 92%, 50%)\",\n        danger: \"hsl(0, 85%, 60%)\",\n        \n        /* Shadcn Colors */\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n      },\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2545},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // put application routes here\n  // prefix all routes with /api\n\n  // use storage to perform CRUD operations on the storage interface\n  // e.g. storage.insertUser(user) or storage.getUserByUsername(username)\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n","size_bytes":473},"server/storage.ts":{"content":"import { type User, type InsertUser } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\n// modify the interface with any CRUD methods\n// you might need\n\nexport interface IStorage {\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n\n  constructor() {\n    this.users = new Map();\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":993},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n","size_bytes":584},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport NotFound from \"@/pages/not-found\";\nimport AdminDashboard from \"@/pages/admin/admin-dashboard\";\nimport BuyerDashboard from \"@/pages/buyer/buyer-dashboard\";\nimport MarketplaceHome from \"@/pages/marketplace/home\";\n\n// Vendor Pages\nimport VendorApply from \"@/pages/vendor/apply\";\nimport VendorApplySuccess from \"@/pages/vendor/apply-success\";\nimport VendorDashboard from \"@/pages/vendor/dashboard\";\nimport VendorListings from \"@/pages/vendor/listings\";\nimport VendorOrders from \"@/pages/vendor/orders\";\nimport VendorMessages from \"@/pages/vendor/messages\";\nimport VendorAnalytics from \"@/pages/vendor/analytics\";\nimport VendorReviews from \"@/pages/vendor/reviews\";\nimport VendorAds from \"@/pages/vendor/ads\";\nimport VendorDisputes from \"@/pages/vendor/disputes\";\nimport VendorPayouts from \"@/pages/vendor/payouts\";\nimport VendorSettings from \"@/pages/vendor/settings\";\nimport VendorSupport from \"@/pages/vendor/support\";\n\nfunction Router() {\n  return (\n    <div className=\"h-full bg-bg text-text\">\n      <Switch>\n        <Route path=\"/\" component={MarketplaceHome} />\n        <Route path=\"/buyer\" component={BuyerDashboard} />\n        <Route path=\"/buyer/:section*\" component={BuyerDashboard} />\n        <Route path=\"/admin\" component={AdminDashboard} />\n        <Route path=\"/admin/:section*\" component={AdminDashboard} />\n        \n        {/* Vendor Routes */}\n        <Route path=\"/vendor/apply\" component={VendorApply} />\n        <Route path=\"/vendor/apply/success\" component={VendorApplySuccess} />\n        <Route path=\"/vendor/dashboard\" component={VendorDashboard} />\n        <Route path=\"/vendor/listings\" component={VendorListings} />\n        <Route path=\"/vendor/orders\" component={VendorOrders} />\n        <Route path=\"/vendor/messages\" component={VendorMessages} />\n        <Route path=\"/vendor/analytics\" component={VendorAnalytics} />\n        <Route path=\"/vendor/reviews\" component={VendorReviews} />\n        <Route path=\"/vendor/ads\" component={VendorAds} />\n        <Route path=\"/vendor/disputes\" component={VendorDisputes} />\n        <Route path=\"/vendor/payouts\" component={VendorPayouts} />\n        <Route path=\"/vendor/settings\" component={VendorSettings} />\n        <Route path=\"/vendor/support\" component={VendorSupport} />\n        \n        <Route component={NotFound} />\n      </Switch>\n    </div>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2811},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&family=JetBrains+Mono:wght@300;400;500;600&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  /* Crypto Marketplace Color Tokens - Moderately Lighter */\n  --bg: 210 47% 6%;\n  --surface: 210 44% 10%;\n  --surface-2: 210 41% 14%;\n  --text: 215 20% 92%;\n  --muted: 215 14% 65%;\n  --border: 210 29% 18%;\n  --accent: 186 84% 55%;\n  --accent-2: 190 75% 73%;\n  --success: 142 76% 46%;\n  --warning: 38 92% 50%;\n  --danger: 0 85% 60%;\n  \n  /* Override shadcn variables for dark theme - Moderately Lighter */\n  --background: hsl(210, 47%, 6%);\n  --foreground: hsl(215, 20%, 92%);\n  --card: hsl(210, 44%, 10%);\n  --card-foreground: hsl(215, 20%, 92%);\n  --popover: hsl(210, 44%, 10%);\n  --popover-foreground: hsl(215, 20%, 92%);\n  --primary: hsl(186, 84%, 55%);\n  --primary-foreground: hsl(210, 47%, 6%);\n  --secondary: hsl(210, 41%, 14%);\n  --secondary-foreground: hsl(215, 20%, 92%);\n  --muted: hsl(210, 29%, 18%);\n  --muted-foreground: hsl(215, 14%, 65%);\n  --accent: hsl(186, 84%, 55%);\n  --accent-foreground: hsl(210, 47%, 6%);\n  --destructive: hsl(0, 85%, 60%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(210, 29%, 18%);\n  --input: hsl(210, 41%, 14%);\n  --ring: hsl(186, 84%, 55%);\n  \n  /* Fonts */\n  --font-sans: 'Inter', system-ui, -apple-system, sans-serif;\n  --font-mono: 'JetBrains Mono', 'SF Mono', 'Monaco', 'Inconsolata', monospace;\n  \n  /* Radius */\n  --radius: 0.75rem;\n}\n\n.dark {\n  --background: hsl(210, 47%, 4%);\n  --foreground: hsl(215, 20%, 91%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply bg-background text-foreground font-sans antialiased;\n    font-feature-settings: \"cv11\", \"ss01\";\n    font-variation-settings: \"opsz\" 32;\n  }\n  \n  /* Custom scrollbar */\n  ::-webkit-scrollbar {\n    width: 6px;\n    height: 6px;\n  }\n  \n  ::-webkit-scrollbar-track {\n    background: hsl(var(--surface));\n  }\n  \n  ::-webkit-scrollbar-thumb {\n    background: hsl(var(--border));\n    border-radius: 3px;\n  }\n  \n  ::-webkit-scrollbar-thumb:hover {\n    background: hsl(var(--muted-foreground));\n  }\n}\n\n@layer components {\n  .crypto-card {\n    @apply bg-card border border-border rounded-2xl p-6 transition-all duration-200;\n  }\n  \n  .crypto-card:hover {\n    border-color: hsl(186 84% 55% / 0.3);\n  }\n  \n  .nav-item {\n    @apply flex items-center px-3 py-2 text-sm font-medium rounded-lg transition-colors;\n  }\n  \n  .nav-item-active {\n    @apply bg-secondary text-accent;\n  }\n  \n  .nav-item-inactive {\n    @apply text-muted-foreground hover:text-foreground;\n  }\n  \n  .nav-item-inactive:hover {\n    background-color: hsl(var(--secondary) / 0.5);\n  }\n}\n","size_bytes":2709},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/constants.tsx":{"content":"import { \n  BarChart3, \n  Users, \n  Store, \n  List, \n  ShoppingCart, \n  Gavel,\n  MessageSquare,\n  Ticket,\n  Bitcoin,\n  Wallet,\n  Percent,\n  Megaphone,\n  Tags,\n  Gift,\n  Bell,\n  Shield,\n  Lock,\n  Palette,\n  ChevronDown,\n  ChevronRight\n} from \"lucide-react\";\n\nexport const ADMIN_NAV_ITEMS = [\n  {\n    title: \"Overview\",\n    icon: BarChart3,\n    href: \"/admin\",\n    badge: null\n  },\n  {\n    title: \"Users\",\n    icon: Users,\n    href: \"/admin/users\",\n    badge: { text: \"2,847\", type: \"accent\" }\n  },\n  {\n    title: \"Vendors\",\n    icon: Store,\n    href: \"/admin/vendors\",\n    badge: { text: \"7\", type: \"warning\" }\n  },\n  {\n    title: \"Listings\",\n    icon: List,\n    href: \"/admin/listings\",\n    badge: { text: \"1,432\", type: \"success\" }\n  },\n  {\n    title: \"Orders\",\n    icon: ShoppingCart,\n    href: \"/admin/orders\",\n    badge: { text: \"89\", type: \"accent\" }\n  },\n  {\n    title: \"Disputes\",\n    icon: Gavel,\n    href: \"/admin/disputes\",\n    badge: { text: \"3\", type: \"danger\" }\n  },\n  {\n    title: \"Messages\",\n    icon: MessageSquare,\n    href: \"/admin/messages\",\n    badge: { text: \"24\", type: \"accent\" }\n  },\n  {\n    title: \"Tickets\",\n    icon: Ticket,\n    href: \"/admin/tickets\",\n    badge: { text: \"12\", type: \"warning\" }\n  },\n  {\n    title: \"Crypto\",\n    icon: Bitcoin,\n    href: \"/admin/crypto\",\n    badge: null\n  },\n  {\n    title: \"Payouts & Refunds\",\n    icon: Wallet,\n    href: \"/admin/payouts\",\n    badge: { text: \"23\", type: \"warning\" }\n  },\n  {\n    title: \"Commissions\",\n    icon: Percent,\n    href: \"/admin/commissions\",\n    badge: null\n  },\n  {\n    title: \"Ads\",\n    icon: Megaphone,\n    href: \"/admin/ads\",\n    badge: { text: \"8\", type: \"success\" }\n  },\n  {\n    title: \"Categories\",\n    icon: Tags,\n    href: \"/admin/categories\",\n    badge: null\n  },\n  {\n    title: \"Gift Cards\",\n    icon: Gift,\n    href: \"/admin/gift-cards\",\n    badge: { text: \"45\", type: \"accent\" }\n  },\n  {\n    title: \"Alerts\",\n    icon: Bell,\n    href: \"/admin/alerts\",\n    badge: { text: \"5\", type: \"danger\" }\n  },\n  {\n    title: \"Roles & Permissions\",\n    icon: Shield,\n    href: \"/admin/roles\",\n    badge: null\n  },\n  {\n    title: \"Security\",\n    icon: Lock,\n    href: \"/admin/security\",\n    badge: null\n  },\n  {\n    title: \"Branding\",\n    icon: Palette,\n    href: \"/admin/branding\",\n    badge: null\n  }\n];\n\nexport const ADMIN_GROUPED_NAV = [\n  {\n    category: \"Core Management\",\n    icon: BarChart3,\n    items: [\n      {\n        title: \"Overview\",\n        icon: BarChart3,\n        href: \"/admin\",\n        badge: null\n      },\n      {\n        title: \"Users\",\n        icon: Users,\n        href: \"/admin/users\",\n        badge: { text: \"2,847\", type: \"accent\" }\n      },\n      {\n        title: \"Vendors\",\n        icon: Store,\n        href: \"/admin/vendors\",\n        badge: { text: \"7\", type: \"warning\" }\n      }\n    ]\n  },\n  {\n    category: \"Commerce\",\n    icon: ShoppingCart,\n    items: [\n      {\n        title: \"Listings\",\n        icon: List,\n        href: \"/admin/listings\",\n        badge: { text: \"1,432\", type: \"success\" }\n      },\n      {\n        title: \"Orders\",\n        icon: ShoppingCart,\n        href: \"/admin/orders\",\n        badge: { text: \"89\", type: \"accent\" }\n      },\n      {\n        title: \"Disputes\",\n        icon: Gavel,\n        href: \"/admin/disputes\",\n        badge: { text: \"3\", type: \"danger\" }\n      }\n    ]\n  },\n  {\n    category: \"Communications\",\n    icon: MessageSquare,\n    items: [\n      {\n        title: \"Messages\",\n        icon: MessageSquare,\n        href: \"/admin/messages\",\n        badge: { text: \"24\", type: \"accent\" }\n      },\n      {\n        title: \"Tickets\",\n        icon: Ticket,\n        href: \"/admin/tickets\",\n        badge: { text: \"12\", type: \"warning\" }\n      }\n    ]\n  },\n  {\n    category: \"Financial\",\n    icon: Bitcoin,\n    items: [\n      {\n        title: \"Crypto\",\n        icon: Bitcoin,\n        href: \"/admin/crypto\",\n        badge: null\n      },\n      {\n        title: \"Payouts & Refunds\",\n        icon: Wallet,\n        href: \"/admin/payouts\",\n        badge: { text: \"23\", type: \"warning\" }\n      },\n      {\n        title: \"Commissions\",\n        icon: Percent,\n        href: \"/admin/commissions\",\n        badge: null\n      }\n    ]\n  },\n  {\n    category: \"Content & Marketing\",\n    icon: Megaphone,\n    items: [\n      {\n        title: \"Ads\",\n        icon: Megaphone,\n        href: \"/admin/ads\",\n        badge: { text: \"8\", type: \"success\" }\n      },\n      {\n        title: \"Categories\",\n        icon: Tags,\n        href: \"/admin/categories\",\n        badge: null\n      },\n      {\n        title: \"Gift Cards\",\n        icon: Gift,\n        href: \"/admin/gift-cards\",\n        badge: { text: \"45\", type: \"accent\" }\n      }\n    ]\n  },\n  {\n    category: \"System & Security\",\n    icon: Shield,\n    items: [\n      {\n        title: \"Alerts\",\n        icon: Bell,\n        href: \"/admin/alerts\",\n        badge: { text: \"5\", type: \"danger\" }\n      },\n      {\n        title: \"Roles & Permissions\",\n        icon: Shield,\n        href: \"/admin/roles\",\n        badge: null\n      },\n      {\n        title: \"Security\",\n        icon: Lock,\n        href: \"/admin/security\",\n        badge: null\n      },\n      {\n        title: \"Branding\",\n        icon: Palette,\n        href: \"/admin/branding\",\n        badge: null\n      }\n    ]\n  }\n];\n\nexport const SAMPLE_ORDERS = [\n  {\n    id: \"ORD-2847\",\n    buyer: \"user_7824\",\n    vendor: \"CryptoAccountsPlus\",\n    listing: \"Netflix Premium Account (1 Year)\",\n    amount: \"0.0012 BTC\",\n    status: \"Delivered\",\n    statusType: \"success\" as const,\n    created: \"2 hours ago\"\n  },\n  {\n    id: \"ORD-2846\", \n    buyer: \"anon_user_423\",\n    vendor: \"DigitalVault\",\n    listing: \"Spotify Premium (6 Months)\",\n    amount: \"0.0008 BTC\",\n    status: \"In Escrow\",\n    statusType: \"warning\" as const,\n    created: \"4 hours ago\"\n  },\n  {\n    id: \"ORD-2845\",\n    buyer: \"crypto_buyer_89\", \n    vendor: \"SecureAccounts\",\n    listing: \"YouTube Premium (3 Months)\",\n    amount: \"1.24 XMR\",\n    status: \"Confirming\",\n    statusType: \"accent\" as const,\n    created: \"6 hours ago\"\n  },\n  {\n    id: \"ORD-2844\",\n    buyer: \"privacy_first\",\n    vendor: \"PremiumDigital\", \n    listing: \"Disney+ (1 Year Subscription)\",\n    amount: \"0.0015 BTC\",\n    status: \"Disputed\",\n    statusType: \"danger\" as const,\n    created: \"8 hours ago\"\n  }\n];\n\nexport const SAMPLE_ACTIVITY = [\n  {\n    id: 1,\n    type: \"success\",\n    title: \"New vendor approved\",\n    description: \"CryptoAccountsPlus • 5 min ago\"\n  },\n  {\n    id: 2,\n    type: \"warning\", \n    title: \"Dispute opened\",\n    description: \"Order #ORD-2847 • 12 min ago\"\n  },\n  {\n    id: 3,\n    type: \"accent\",\n    title: \"Large order completed\",\n    description: \"2.4 BTC • 18 min ago\" \n  },\n  {\n    id: 4,\n    type: \"success\",\n    title: \"Escrow released\", \n    description: \"Order #ORD-2845 • 22 min ago\"\n  },\n  {\n    id: 5,\n    type: \"muted\",\n    title: \"System maintenance\",\n    description: \"XMR node sync • 1 hr ago\"\n  }\n];\n\nexport const SAMPLE_CATEGORIES = [\n  {\n    id: 1,\n    title: \"Streaming Services\",\n    description: \"Netflix, Spotify, Disney+, Hulu and more\",\n    listings: 247,\n    image: \"https://images.unsplash.com/photo-1522869635100-9f4c5e86aa37?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=200\"\n  },\n  {\n    id: 2,\n    title: \"Gaming Accounts\",\n    description: \"Steam, Epic Games, Xbox, PlayStation\", \n    listings: 189,\n    image: \"https://images.unsplash.com/photo-1542751371-adc38448a05e?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=200\"\n  },\n  {\n    id: 3,\n    title: \"Software & Tools\",\n    description: \"Adobe, Microsoft, Figma, Notion\",\n    listings: 156,\n    image: \"https://images.unsplash.com/photo-1551650975-87deedd944c3?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=200\"\n  },\n  {\n    id: 4, \n    title: \"VPN & Security\",\n    description: \"NordVPN, ExpressVPN, Antivirus\",\n    listings: 98,\n    image: \"https://images.unsplash.com/photo-1563986768609-322da13575f3?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=200\"\n  }\n];\n\nexport const SAMPLE_LISTINGS = [\n  {\n    id: 1,\n    title: \"Netflix Premium Account (1 Year)\",\n    description: \"Full access to Netflix Premium with 4K streaming, 4 screens, and download capability. Warranty included.\",\n    vendor: \"CryptoAccountsPlus\",\n    rating: 4.9,\n    reviews: 234,\n    btcPrice: \"0.0012\",\n    xmrPrice: \"0.84\",\n    delivery: \"Instant Delivery\",\n    deliveryType: \"success\" as const\n  },\n  {\n    id: 2,\n    title: \"Spotify Premium (6 Months)\",\n    description: \"Individual Spotify Premium account with offline downloads, no ads, and unlimited skips.\",\n    vendor: \"DigitalVault\",\n    rating: 4.7,\n    reviews: 89,\n    btcPrice: \"0.0008\", \n    xmrPrice: \"0.56\",\n    delivery: \"Escrow Only\",\n    deliveryType: \"warning\" as const\n  },\n  {\n    id: 3,\n    title: \"Adobe Creative Cloud (1 Year)\", \n    description: \"Full access to all Adobe apps including Photoshop, Illustrator, After Effects, and more.\",\n    vendor: \"PremiumSoft\",\n    rating: 4.8,\n    reviews: 156,\n    btcPrice: \"0.0034\",\n    xmrPrice: \"2.47\", \n    delivery: \"Manual Delivery\",\n    deliveryType: \"accent\" as const\n  }\n];\n\nexport const SAMPLE_USERS = [\n  {\n    id: 1,\n    username: \"crypto_buyer_89\",\n    email: \"•••@••••.com\",\n    role: \"Customer\",\n    status: \"Active\",\n    statusType: \"success\" as const,\n    joinDate: \"2024-01-15\",\n    lastLogin: \"2 hours ago\",\n    orders: 24,\n    totalSpent: \"2.4 BTC\"\n  },\n  {\n    id: 2,\n    username: \"anon_user_423\", \n    email: \"•••@••••.com\",\n    role: \"Vendor\",\n    status: \"Active\",\n    statusType: \"success\" as const,\n    joinDate: \"2023-11-08\",\n    lastLogin: \"1 day ago\",\n    orders: 156,\n    totalSpent: \"0.8 BTC\"\n  },\n  {\n    id: 3,\n    username: \"privacy_first\",\n    email: \"•••@••••.com\", \n    role: \"Customer\",\n    status: \"Banned\",\n    statusType: \"danger\" as const,\n    joinDate: \"2024-02-20\",\n    lastLogin: \"1 week ago\",\n    orders: 3,\n    totalSpent: \"0.2 BTC\"\n  },\n  {\n    id: 4,\n    username: \"user_7824\",\n    email: \"•••@••••.com\",\n    role: \"Customer\", \n    status: \"Active\",\n    statusType: \"success\" as const,\n    joinDate: \"2024-03-10\",\n    lastLogin: \"30 min ago\",\n    orders: 8,\n    totalSpent: \"1.1 BTC\"\n  }\n];\n\nexport const SAMPLE_VENDORS = [\n  {\n    id: 1,\n    shopName: \"CryptoAccountsPlus\",\n    owner: \"vendor_alpha\",\n    status: \"Approved\",\n    statusType: \"success\" as const,\n    category: \"Streaming Services\",\n    joinDate: \"2023-08-15\",\n    listings: 47,\n    totalSales: \"12.8 BTC\",\n    rating: 4.9,\n    reviews: 234,\n    commission: \"5%\",\n    lastActivity: \"2 hours ago\"\n  },\n  {\n    id: 2,\n    shopName: \"DigitalVault\",\n    owner: \"secure_vendor\",\n    status: \"Pending\",\n    statusType: \"warning\" as const,\n    category: \"Software & Tools\",\n    joinDate: \"2024-03-22\",\n    listings: 0,\n    totalSales: \"0 BTC\",\n    rating: 0,\n    reviews: 0,\n    commission: \"5%\",\n    lastActivity: \"1 day ago\"\n  },\n  {\n    id: 3,\n    shopName: \"PremiumSoft\",\n    owner: \"software_expert\",\n    status: \"Approved\",\n    statusType: \"success\" as const,\n    category: \"Software & Tools\", \n    joinDate: \"2023-12-03\",\n    listings: 23,\n    totalSales: \"8.4 BTC\",\n    rating: 4.8,\n    reviews: 156,\n    commission: \"4%\",\n    lastActivity: \"6 hours ago\"\n  }\n];\n\nexport const SAMPLE_DISPUTES = [\n  {\n    id: 1,\n    orderId: \"ORD-2844\",\n    buyer: \"privacy_first\",\n    vendor: \"PremiumDigital\",\n    reason: \"Account credentials not working\",\n    status: \"Open\",\n    statusType: \"danger\" as const,\n    created: \"2 hours ago\",\n    amount: \"0.0015 BTC\",\n    priority: \"High\"\n  },\n  {\n    id: 2,\n    orderId: \"ORD-2831\",\n    buyer: \"crypto_buyer_89\", \n    vendor: \"StreamAccounts\",\n    reason: \"Wrong account type delivered\",\n    status: \"In Review\",\n    statusType: \"warning\" as const,\n    created: \"1 day ago\",\n    amount: \"0.0008 BTC\",\n    priority: \"Medium\"\n  },\n  {\n    id: 3,\n    orderId: \"ORD-2823\",\n    buyer: \"anon_user_423\",\n    vendor: \"DigitalServices\",\n    reason: \"Account suspended by provider\",\n    status: \"Resolved\",\n    statusType: \"success\" as const,\n    created: \"3 days ago\",\n    amount: \"0.0012 BTC\",\n    priority: \"Low\"\n  }\n];\n\nexport const SAMPLE_TICKETS = [\n  {\n    id: 1,\n    ticketId: \"TK-2024-001\",\n    user: \"crypto_buyer_89\",\n    subject: \"Unable to access purchased Netflix account\",\n    status: \"Open\",\n    statusType: \"danger\" as const,\n    priority: \"High\",\n    created: \"1 hour ago\",\n    lastReply: \"1 hour ago\",\n    assignedTo: \"support_agent_1\"\n  },\n  {\n    id: 2,\n    ticketId: \"TK-2024-002\",\n    user: \"vendor_alpha\",\n    subject: \"Commission rate change request\",\n    status: \"In Progress\", \n    statusType: \"warning\" as const,\n    priority: \"Medium\",\n    created: \"6 hours ago\",\n    lastReply: \"2 hours ago\",\n    assignedTo: \"support_agent_2\"\n  },\n  {\n    id: 3,\n    ticketId: \"TK-2024-003\",\n    user: \"privacy_first\",\n    subject: \"Account recovery assistance needed\",\n    status: \"Closed\",\n    statusType: \"muted\" as const,\n    priority: \"Low\",\n    created: \"2 days ago\",\n    lastReply: \"1 day ago\",\n    assignedTo: \"support_agent_1\"\n  }\n];\n","size_bytes":13006},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/admin/AdminLayout.tsx":{"content":"import { Sidebar } from \"./Sidebar\";\nimport { Header } from \"./Header\";\n\ninterface AdminLayoutProps {\n  children: React.ReactNode;\n  breadcrumbs: { label: string; href?: string }[];\n}\n\nexport function AdminLayout({ children, breadcrumbs }: AdminLayoutProps) {\n  return (\n    <div className=\"flex h-screen overflow-hidden dark\">\n      <Sidebar />\n      <div className=\"flex flex-col flex-1 overflow-hidden\">\n        <Header breadcrumbs={breadcrumbs} />\n        {children}\n      </div>\n    </div>\n  );\n}\n","size_bytes":502},"client/src/components/admin/Header.tsx":{"content":"import { Menu, ExternalLink, Bell, Settings } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface HeaderProps {\n  breadcrumbs: { label: string; href?: string }[];\n}\n\nexport function Header({ breadcrumbs }: HeaderProps) {\n  return (\n    <header className=\"bg-surface border-b border-border px-4 py-3\">\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-4\">\n          {/* Mobile menu button */}\n          <Button \n            variant=\"ghost\" \n            size=\"sm\" \n            className=\"md:hidden text-muted hover:text-text\"\n            data-testid=\"mobile-menu-button\"\n          >\n            <Menu className=\"w-4 h-4\" />\n          </Button>\n          \n          {/* Breadcrumbs */}\n          <nav className=\"flex\" data-testid=\"breadcrumbs\">\n            <ol className=\"flex items-center space-x-2 text-sm\">\n              {breadcrumbs.map((crumb, index) => (\n                <li key={index} className=\"flex items-center\">\n                  {index > 0 && <span className=\"text-muted mx-2\">/</span>}\n                  {crumb.href ? (\n                    <Link href={crumb.href}>\n                      <span className=\"text-muted hover:text-text cursor-pointer\">{crumb.label}</span>\n                    </Link>\n                  ) : (\n                    <span className=\"text-accent font-medium\">{crumb.label}</span>\n                  )}\n                </li>\n              ))}\n            </ol>\n          </nav>\n        </div>\n        \n        <div className=\"flex items-center space-x-4\">\n          {/* View Marketplace Button */}\n          <Link href=\"/\">\n            <span className=\"inline-flex items-center px-3 py-1.5 border border-border text-sm font-medium rounded-md text-muted hover:text-text hover:bg-surface-2 cursor-pointer\">\n              <ExternalLink className=\"w-4 h-4 mr-2\" />\n              View Marketplace\n            </span>\n          </Link>\n          \n          {/* Notifications */}\n          <Button \n            variant=\"ghost\" \n            size=\"sm\" \n            className=\"relative text-muted hover:text-text\"\n            data-testid=\"notifications-button\"\n          >\n            <Bell className=\"w-5 h-5\" />\n            <span className=\"absolute -top-1 -right-1 w-3 h-3 bg-danger rounded-full\"></span>\n          </Button>\n          \n          {/* Settings */}\n          <Button \n            variant=\"ghost\" \n            size=\"sm\" \n            className=\"text-muted hover:text-text\"\n            data-testid=\"settings-button\"\n          >\n            <Settings className=\"w-5 h-5\" />\n          </Button>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":2696},"client/src/components/admin/Overview.tsx":{"content":"import { TrendingUp, TrendingDown, Bitcoin, Wallet } from \"lucide-react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { StatusBadge } from \"@/components/ui/status-badge\";\nimport { ADMIN_NAV_ITEMS, SAMPLE_ORDERS, SAMPLE_ACTIVITY } from \"@/lib/constants\";\n\nexport function Overview() {\n  return (\n    <main className=\"flex-1 overflow-y-auto bg-bg p-6\">\n      {/* Alert Banner */}\n      <div className=\"mb-6 bg-warning/10 border border-warning/20 rounded-lg p-4\">\n        <div className=\"flex\">\n          <div className=\"flex-shrink-0\">\n            <svg className=\"w-5 h-5 text-warning\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n              <path fillRule=\"evenodd\" d=\"M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z\" clipRule=\"evenodd\" />\n            </svg>\n          </div>\n          <div className=\"ml-3\">\n            <h3 className=\"text-sm font-medium text-warning\">Action Required</h3>\n            <div className=\"mt-2 text-sm text-warning/80\">\n              <p>7 vendor applications pending review • 3 disputes awaiting resolution • BTC node requires update</p>\n            </div>\n          </div>\n        </div>\n      </div>\n      \n      {/* KPI Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n        <Card className=\"crypto-card\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center\">\n              <div className=\"flex-shrink-0\">\n                <div className=\"w-8 h-8 bg-accent/20 rounded-lg flex items-center justify-center\">\n                  {(() => {\n                    const item = ADMIN_NAV_ITEMS.find(item => item.title === \"Users\");\n                    if (item?.icon) {\n                      const Icon = item.icon;\n                      return <Icon className=\"text-accent w-4 h-4\" />;\n                    }\n                    return null;\n                  })()}\n                </div>\n              </div>\n              <div className=\"ml-4 flex-1\">\n                <p className=\"text-sm font-medium text-muted\">Total Users</p>\n                <p className=\"text-2xl font-bold text-text\">2,847</p>\n              </div>\n            </div>\n            <div className=\"mt-4 flex items-center text-sm\">\n              <span className=\"text-success flex items-center\">\n                <TrendingUp className=\"w-3 h-3 mr-1\" />\n                12%\n              </span>\n              <span className=\"text-muted ml-2\">vs last month</span>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card className=\"crypto-card\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center\">\n              <div className=\"flex-shrink-0\">\n                <div className=\"w-8 h-8 bg-accent/20 rounded-lg flex items-center justify-center\">\n                  {(() => {\n                    const item = ADMIN_NAV_ITEMS.find(item => item.title === \"Vendors\");\n                    if (item?.icon) {\n                      const Icon = item.icon;\n                      return <Icon className=\"text-accent w-4 h-4\" />;\n                    }\n                    return null;\n                  })()}\n                </div>\n              </div>\n              <div className=\"ml-4 flex-1\">\n                <p className=\"text-sm font-medium text-muted\">Active Vendors</p>\n                <p className=\"text-2xl font-bold text-text\">127</p>\n              </div>\n            </div>\n            <div className=\"mt-4 flex items-center text-sm\">\n              <span className=\"text-success flex items-center\">\n                <TrendingUp className=\"w-3 h-3 mr-1\" />\n                8%\n              </span>\n              <span className=\"text-muted ml-2\">vs last month</span>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card className=\"crypto-card\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center\">\n              <div className=\"flex-shrink-0\">\n                <div className=\"w-8 h-8 bg-accent/20 rounded-lg flex items-center justify-center\">\n                  {(() => {\n                    const item = ADMIN_NAV_ITEMS.find(item => item.title === \"Listings\");\n                    if (item?.icon) {\n                      const Icon = item.icon;\n                      return <Icon className=\"text-accent w-4 h-4\" />;\n                    }\n                    return null;\n                  })()}\n                </div>\n              </div>\n              <div className=\"ml-4 flex-1\">\n                <p className=\"text-sm font-medium text-muted\">Live Listings</p>\n                <p className=\"text-2xl font-bold text-text\">1,432</p>\n              </div>\n            </div>\n            <div className=\"mt-4 flex items-center text-sm\">\n              <span className=\"text-success flex items-center\">\n                <TrendingUp className=\"w-3 h-3 mr-1\" />\n                24%\n              </span>\n              <span className=\"text-muted ml-2\">vs last month</span>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card className=\"crypto-card\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center\">\n              <div className=\"flex-shrink-0\">\n                <div className=\"w-8 h-8 bg-accent/20 rounded-lg flex items-center justify-center\">\n                  {(() => {\n                    const item = ADMIN_NAV_ITEMS.find(item => item.title === \"Orders\");\n                    if (item?.icon) {\n                      const Icon = item.icon;\n                      return <Icon className=\"text-accent w-4 h-4\" />;\n                    }\n                    return null;\n                  })()}\n                </div>\n              </div>\n              <div className=\"ml-4 flex-1\">\n                <p className=\"text-sm font-medium text-muted\">Orders Today</p>\n                <p className=\"text-2xl font-bold text-text\">89</p>\n              </div>\n            </div>\n            <div className=\"mt-4 flex items-center text-sm\">\n              <span className=\"text-danger flex items-center\">\n                <TrendingDown className=\"w-3 h-3 mr-1\" />\n                3%\n              </span>\n              <span className=\"text-muted ml-2\">vs yesterday</span>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n      \n      {/* Charts and Activity Section */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6 mb-8\">\n        {/* Order Volume Chart */}\n        <Card className=\"lg:col-span-2 crypto-card\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <h3 className=\"text-lg font-semibold text-text\">Order Volume</h3>\n              <div className=\"flex space-x-2\">\n                <button className=\"px-3 py-1 text-sm bg-accent/20 text-accent rounded-md\">7D</button>\n                <button className=\"px-3 py-1 text-sm text-muted hover:bg-surface-2 rounded-md\">30D</button>\n                <button className=\"px-3 py-1 text-sm text-muted hover:bg-surface-2 rounded-md\">90D</button>\n              </div>\n            </div>\n            \n            <div className=\"h-64 bg-surface-2 rounded-xl flex items-center justify-center border border-border relative overflow-hidden\">\n              <img \n                src=\"https://images.unsplash.com/photo-1642790106117-e829e14a795f?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=400\" \n                alt=\"Trading chart visualization\" \n                className=\"w-full h-full object-cover rounded-xl opacity-60\" \n              />\n              <div className=\"absolute inset-0 flex items-center justify-center\">\n                <div className=\"flex items-center text-muted bg-surface/80 px-4 py-2 rounded-lg backdrop-blur-sm\">\n                  <svg className=\"w-5 h-5 mr-2\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                    <path d=\"M2 10a8 8 0 018-8v8h8a8 8 0 11-16 0z\"/>\n                    <path d=\"M12 2.252A8.014 8.014 0 0117.748 8H12V2.252z\"/>\n                  </svg>\n                  <span>Chart: Order volume trends</span>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        {/* Recent Activity */}\n        <Card className=\"crypto-card\">\n          <CardContent className=\"p-6\">\n            <h3 className=\"text-lg font-semibold text-text mb-4\">Recent Activity</h3>\n            <div className=\"space-y-4\">\n              {SAMPLE_ACTIVITY.map((activity) => (\n                <div key={activity.id} className=\"flex items-start space-x-3\">\n                  <div className={`w-2 h-2 rounded-full mt-2 flex-shrink-0 ${\n                    activity.type === \"success\" ? \"bg-success\" :\n                    activity.type === \"warning\" ? \"bg-warning\" :\n                    activity.type === \"accent\" ? \"bg-accent\" :\n                    activity.type === \"danger\" ? \"bg-danger\" :\n                    \"bg-muted\"\n                  }`} />\n                  <div className=\"flex-1\">\n                    <p className=\"text-sm text-text\">{activity.title}</p>\n                    <p className=\"text-xs text-muted\">{activity.description}</p>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n      \n      {/* Node Status and System Health */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8\">\n        {/* Crypto Node Status */}\n        <Card className=\"crypto-card\">\n          <CardContent className=\"p-6\">\n            <h3 className=\"text-lg font-semibold text-text mb-4\">Crypto Nodes</h3>\n            \n            {/* BTC Node */}\n            <div className=\"flex items-center justify-between p-4 bg-surface-2 rounded-xl mb-4\">\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"w-10 h-10 bg-warning/20 rounded-xl flex items-center justify-center\">\n                  <Bitcoin className=\"text-warning w-5 h-5\" />\n                </div>\n                <div>\n                  <p className=\"font-medium text-text\">Bitcoin Node</p>\n                  <p className=\"text-sm text-muted\">Block #820,847 • Synced 2 min ago</p>\n                </div>\n              </div>\n              <StatusBadge status=\"Connected\" type=\"success\" />\n            </div>\n            \n            {/* XMR Node */}\n            <div className=\"flex items-center justify-between p-4 bg-surface-2 rounded-xl\">\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"w-10 h-10 bg-accent/20 rounded-xl flex items-center justify-center\">\n                  <svg className=\"w-5 h-5 text-accent\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n                    <path d=\"M12 0C5.373 0 0 5.373 0 12s5.373 12 12 12 12-5.373 12-12S18.627 0 12 0zm6.605 16.695h-2.292l-1.689-2.646-1.689 2.646H10.64l2.646-4.141L10.64 8.414h2.295l1.689 2.646 1.689-2.646h2.292l-2.646 4.14 2.646 4.141z\"/>\n                  </svg>\n                </div>\n                <div>\n                  <p className=\"font-medium text-text\">Monero Node</p>\n                  <p className=\"text-sm text-muted\">Block #3,021,456 • Synced 1 min ago</p>\n                </div>\n              </div>\n              <StatusBadge status=\"Connected\" type=\"success\" />\n            </div>\n          </CardContent>\n        </Card>\n        \n        {/* Escrow Status */}\n        <Card className=\"crypto-card\">\n          <CardContent className=\"p-6\">\n            <h3 className=\"text-lg font-semibold text-text mb-4\">Escrow Overview</h3>\n            \n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"text-center p-4 bg-surface-2 rounded-xl\">\n                <p className=\"text-2xl font-bold text-text font-mono\">12.847</p>\n                <p className=\"text-sm text-muted\">BTC in Escrow</p>\n                <p className=\"text-xs text-muted mt-1\">~$525,847</p>\n              </div>\n              <div className=\"text-center p-4 bg-surface-2 rounded-xl\">\n                <p className=\"text-2xl font-bold text-text font-mono\">847.23</p>\n                <p className=\"text-sm text-muted\">XMR in Escrow</p>\n                <p className=\"text-xs text-muted mt-1\">~$145,623</p>\n              </div>\n            </div>\n            \n            <div className=\"mt-4 space-y-2\">\n              <div className=\"flex justify-between text-sm\">\n                <span className=\"text-muted\">Pending Releases</span>\n                <span className=\"text-text\">23 orders</span>\n              </div>\n              <div className=\"flex justify-between text-sm\">\n                <span className=\"text-muted\">Auto-Release (48h)</span>\n                <span className=\"text-text\">156 orders</span>\n              </div>\n              <div className=\"flex justify-between text-sm\">\n                <span className=\"text-muted\">Disputed</span>\n                <span className=\"text-danger\">3 orders</span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n      \n      {/* Recent Orders Table */}\n      <Card className=\"crypto-card\">\n        <div className=\"px-6 py-4 border-b border-border\">\n          <div className=\"flex items-center justify-between\">\n            <h3 className=\"text-lg font-semibold text-text\">Recent Orders</h3>\n            <a href=\"#\" className=\"text-sm text-accent hover:text-accent-2\">View all orders →</a>\n          </div>\n        </div>\n        \n        <div className=\"overflow-x-auto\">\n          <table className=\"min-w-full divide-y divide-border\">\n            <thead className=\"bg-surface-2\">\n              <tr>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-muted uppercase tracking-wider\">Order ID</th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-muted uppercase tracking-wider\">Buyer</th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-muted uppercase tracking-wider\">Vendor</th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-muted uppercase tracking-wider\">Listing</th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-muted uppercase tracking-wider\">Amount</th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-muted uppercase tracking-wider\">Status</th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-muted uppercase tracking-wider\">Created</th>\n              </tr>\n            </thead>\n            <tbody className=\"divide-y divide-border\">\n              {SAMPLE_ORDERS.map((order) => (\n                <tr key={order.id} className=\"hover:bg-surface-2\">\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm font-mono text-accent\">{order.id}</td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-text\">{order.buyer}</td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-text\">{order.vendor}</td>\n                  <td className=\"px-6 py-4 text-sm text-text\">{order.listing}</td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-text font-mono\">{order.amount}</td>\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\n                    <StatusBadge status={order.status} type={order.statusType} />\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-muted\">{order.created}</td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      </Card>\n    </main>\n  );\n}\n","size_bytes":15703},"client/src/components/admin/Sidebar.tsx":{"content":"import { useState } from \"react\";\nimport { Shield, User, ChevronDown, ChevronRight } from \"lucide-react\";\nimport { Link, useLocation } from \"wouter\";\nimport { ADMIN_GROUPED_NAV } from \"@/lib/constants\";\nimport { StatusBadge } from \"@/components/ui/status-badge\";\nimport { cn } from \"@/lib/utils\";\n\nexport function Sidebar() {\n  const [location] = useLocation();\n  const [expandedCategories, setExpandedCategories] = useState<string[]>([]);\n  \n  const toggleCategory = (category: string) => {\n    setExpandedCategories(prev => \n      prev.includes(category) \n        ? prev.filter(c => c !== category)\n        : [...prev, category]\n    );\n  };\n  \n  const isCategoryExpanded = (category: string) => expandedCategories.includes(category);\n  \n  const isCategoryActive = (items: any[]) => {\n    return items.some(item => \n      location === item.href || (item.href !== \"/admin\" && location.startsWith(item.href))\n    );\n  };\n\n  return (\n    <div className=\"hidden md:flex md:w-64 md:flex-col\">\n      <div className=\"flex flex-col flex-grow pt-5 pb-4 overflow-y-auto bg-surface border-r border-border\">\n        {/* Logo/Brand */}\n        <div className=\"flex items-center flex-shrink-0 px-4\">\n          <div className=\"flex items-center\">\n            <div className=\"w-8 h-8 bg-accent rounded-lg flex items-center justify-center\">\n              <Shield className=\"text-bg w-4 h-4\" />\n            </div>\n            <div className=\"ml-3\">\n              <h1 className=\"text-lg font-semibold text-text\">CryptoMarket</h1>\n              <p className=\"text-xs text-muted\">Admin Panel</p>\n            </div>\n          </div>\n        </div>\n        \n        {/* Navigation */}\n        <nav className=\"mt-8 flex-1 px-2 space-y-1\">\n          {ADMIN_GROUPED_NAV.map((group) => {\n            const CategoryIcon = group.icon;\n            const isExpanded = isCategoryExpanded(group.category);\n            const isCatActive = isCategoryActive(group.items);\n            \n            return (\n              <div key={group.category} className=\"space-y-1\">\n                {/* Category Header */}\n                <button\n                  onClick={() => toggleCategory(group.category)}\n                  className={cn(\n                    \"w-full flex items-center px-3 py-2 text-sm font-medium rounded-lg transition-all duration-200\",\n                    isCatActive\n                      ? \"bg-accent/10 text-accent border border-accent/20\"\n                      : \"text-gray-300 hover:bg-surface-2 hover:text-white\"\n                  )}\n                  data-testid={`category-${group.category.toLowerCase().replace(/\\s+/g, '-')}`}\n                >\n                  <CategoryIcon className=\"w-4 h-4 mr-3 flex-shrink-0\" />\n                  <span className=\"flex-1 text-left\">{group.category}</span>\n                  <ChevronRight \n                    className={cn(\n                      \"w-4 h-4 ml-2 flex-shrink-0 transition-transform duration-300 ease-in-out\",\n                      isExpanded ? \"transform rotate-90\" : \"transform rotate-0\"\n                    )}\n                  />\n                </button>\n                \n                {/* Category Items */}\n                <div \n                  className={cn(\n                    \"ml-4 border-l border-border pl-4 overflow-hidden transition-all duration-500 ease-in-out\",\n                    isExpanded \n                      ? \"max-h-96 opacity-100 transform translate-y-0\" \n                      : \"max-h-0 opacity-0 transform -translate-y-2\"\n                  )}\n                >\n                  <div className=\"space-y-1 py-1\">\n                    {group.items.map((item) => {\n                      const ItemIcon = item.icon;\n                      const isActive = location === item.href || (item.href !== \"/admin\" && location.startsWith(item.href));\n                      \n                      return (\n                        <Link key={item.href} href={item.href}>\n                          <span \n                            className={cn(\n                              \"nav-item cursor-pointer text-sm transition-all duration-300 ease-in-out\",\n                              isActive ? \"nav-item-active\" : \"nav-item-inactive\"\n                            )}\n                            data-testid={`nav-${item.title.toLowerCase().replace(/\\s+/g, '-')}`}\n                          >\n                            <ItemIcon className=\"w-3.5 h-3.5 mr-2\" />\n                            {item.title}\n                            {item.badge && (\n                              <StatusBadge\n                                status={item.badge.text}\n                                type={item.badge.type as any}\n                                className=\"ml-auto text-xs\"\n                              />\n                            )}\n                          </span>\n                        </Link>\n                      );\n                    })}\n                  </div>\n                </div>\n              </div>\n            );\n          })}\n        </nav>\n        \n        {/* User Profile */}\n        <div className=\"flex-shrink-0 flex border-t border-border p-4\">\n          <div className=\"flex items-center\">\n            <div className=\"w-8 h-8 bg-accent/20 rounded-full flex items-center justify-center\">\n              <User className=\"text-accent w-4 h-4\" />\n            </div>\n            <div className=\"ml-3\">\n              <p className=\"text-sm font-medium text-text\">admin_user</p>\n              <p className=\"text-xs text-muted\">Super Admin</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5596},"client/src/components/marketplace/HomePage.tsx":{"content":"import { Bitcoin, Shield, UserX, ArrowRight, Star, Heart } from \"lucide-react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { StatusBadge } from \"@/components/ui/status-badge\";\nimport { SAMPLE_CATEGORIES, SAMPLE_LISTINGS } from \"@/lib/constants\";\n\nexport function HomePage() {\n  return (\n    <div className=\"min-h-screen bg-bg\">\n      {/* Hero Section */}\n      <section className=\"bg-surface\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-16\">\n          <div className=\"text-center\">\n            <h1 className=\"text-4xl font-bold text-text mb-6\">\n              Secure Digital Account Marketplace\n            </h1>\n            <p className=\"text-xl text-muted mb-8 max-w-3xl mx-auto\">\n              Trade premium accounts safely with cryptocurrency payments, escrow protection, and complete anonymity. Your privacy is our priority.\n            </p>\n            \n            {/* Search Bar */}\n            <div className=\"max-w-2xl mx-auto mb-8\">\n              <div className=\"relative\">\n                <div className=\"absolute inset-y-0 left-0 pl-4 flex items-center pointer-events-none\">\n                  <svg className=\"w-5 h-5 text-muted\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                    <path fillRule=\"evenodd\" d=\"M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z\" clipRule=\"evenodd\" />\n                  </svg>\n                </div>\n                <Input\n                  type=\"text\"\n                  placeholder=\"Search Netflix, Spotify, Gaming accounts...\"\n                  className=\"pl-12 pr-4 py-4 rounded-2xl bg-surface-2 border-border text-text placeholder-muted focus:ring-accent focus:border-accent text-lg\"\n                  data-testid=\"hero-search-input\"\n                />\n                <Button className=\"absolute inset-y-0 right-0 mr-2 my-2 bg-accent hover:bg-accent-2 text-bg px-6 rounded-xl\" data-testid=\"hero-search-button\">\n                  Search\n                </Button>\n              </div>\n            </div>\n            \n            {/* Trust Badges */}\n            <div className=\"flex items-center justify-center space-x-8 text-sm text-muted\">\n              <div className=\"flex items-center\">\n                <Bitcoin className=\"text-warning w-4 h-4 mr-2\" />\n                <span>BTC & XMR Payments</span>\n              </div>\n              <div className=\"flex items-center\">\n                <Shield className=\"text-success w-4 h-4 mr-2\" />\n                <span>Escrow Protection</span>\n              </div>\n              <div className=\"flex items-center\">\n                <UserX className=\"text-accent w-4 h-4 mr-2\" />\n                <span>Anonymous Trading</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n      \n      {/* Featured Categories */}\n      <section className=\"py-16\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <h2 className=\"text-2xl font-bold text-text mb-8\">Featured Categories</h2>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            {SAMPLE_CATEGORIES.map((category) => (\n              <Card key={category.id} className=\"crypto-card cursor-pointer group\" data-testid={`category-${category.id}`}>\n                <CardContent className=\"p-6\">\n                  <img \n                    src={category.image} \n                    alt={category.title}\n                    className=\"w-full h-32 object-cover rounded-xl mb-4\" \n                  />\n                  <h3 className=\"text-lg font-semibold text-text mb-2\">{category.title}</h3>\n                  <p className=\"text-muted text-sm mb-4\">{category.description}</p>\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-accent text-sm font-medium\">{category.listings} listings</span>\n                    <ArrowRight className=\"w-4 h-4 text-muted group-hover:text-accent transition-colors\" />\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </section>\n      \n      {/* Featured Listings */}\n      <section className=\"py-16 bg-surface\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex items-center justify-between mb-8\">\n            <h2 className=\"text-2xl font-bold text-text\">Featured Listings</h2>\n            <a href=\"#\" className=\"text-accent hover:text-accent-2 font-medium\">View All →</a>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {SAMPLE_LISTINGS.map((listing) => (\n              <Card key={listing.id} className=\"bg-bg border border-border hover:border-accent/30 transition-colors cursor-pointer\" data-testid={`listing-${listing.id}`}>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between mb-4\">\n                    <StatusBadge status={listing.delivery} type={listing.deliveryType} />\n                    <Button variant=\"ghost\" size=\"sm\" className=\"text-muted hover:text-danger\" data-testid={`favorite-${listing.id}`}>\n                      <Heart className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                  \n                  <h3 className=\"text-lg font-semibold text-text mb-2\">{listing.title}</h3>\n                  <p className=\"text-muted text-sm mb-4\">{listing.description}</p>\n                  \n                  <div className=\"flex items-center justify-between mb-4\">\n                    <div className=\"flex items-center space-x-2\">\n                      <div className=\"w-6 h-6 bg-accent/20 rounded-full flex items-center justify-center\">\n                        <svg className=\"w-3 h-3 text-accent\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                          <path d=\"M3 4a1 1 0 011-1h12a1 1 0 011 1v2a1 1 0 01-1 1H4a1 1 0 01-1-1V4zM3 10a1 1 0 011-1h6a1 1 0 011 1v6a1 1 0 01-1 1H4a1 1 0 01-1-1v-6zM14 9a1 1 0 00-1 1v6a1 1 0 001 1h2a1 1 0 001-1v-6a1 1 0 00-1-1h-2z\" />\n                        </svg>\n                      </div>\n                      <span className=\"text-sm text-text\">{listing.vendor}</span>\n                      <div className=\"flex items-center\">\n                        <Star className=\"text-warning w-3 h-3 fill-current\" />\n                        <span className=\"text-xs text-muted ml-1\">{listing.rating} ({listing.reviews})</span>\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"space-y-1\">\n                      <div className=\"flex items-center space-x-2\">\n                        <Bitcoin className=\"text-warning w-4 h-4\" />\n                        <span className=\"font-mono text-sm text-text\">{listing.btcPrice} BTC</span>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <svg className=\"w-4 h-4 text-accent\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n                          <path d=\"M12 0C5.373 0 0 5.373 0 12s5.373 12 12 12 12-5.373 12-12S18.627 0 12 0zm6.605 16.695h-2.292l-1.689-2.646-1.689 2.646H10.64l2.646-4.141L10.64 8.414h2.295l1.689 2.646 1.689-2.646h2.292l-2.646 4.14 2.646 4.141z\"/>\n                        </svg>\n                        <span className=\"font-mono text-sm text-text\">{listing.xmrPrice} XMR</span>\n                      </div>\n                    </div>\n                    <Button className=\"bg-accent text-bg hover:bg-accent-2 text-sm font-medium\" data-testid={`buy-${listing.id}`}>\n                      Buy Now\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </section>\n      \n      {/* Privacy & Security Info */}\n      <section className=\"py-16\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-2xl font-bold text-text mb-4\">Why Choose CryptoMarket?</h2>\n            <p className=\"text-muted max-w-2xl mx-auto\">\n              We prioritize your privacy and security above all else, providing a safe environment for anonymous digital commerce.\n            </p>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-accent/20 rounded-2xl flex items-center justify-center mx-auto mb-4\">\n                <UserX className=\"text-accent w-8 h-8\" />\n              </div>\n              <h3 className=\"text-lg font-semibold text-text mb-2\">Anonymous Trading</h3>\n              <p className=\"text-muted\">No personal data required. Trade with complete privacy using only usernames and recovery phrases.</p>\n            </div>\n            \n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-accent/20 rounded-2xl flex items-center justify-center mx-auto mb-4\">\n                <Shield className=\"text-accent w-8 h-8\" />\n              </div>\n              <h3 className=\"text-lg font-semibold text-text mb-2\">Escrow Protection</h3>\n              <p className=\"text-muted\">Your payments are held securely until delivery is confirmed, protecting both buyers and sellers.</p>\n            </div>\n            \n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-accent/20 rounded-2xl flex items-center justify-center mx-auto mb-4\">\n                <Bitcoin className=\"text-accent w-8 h-8\" />\n              </div>\n              <h3 className=\"text-lg font-semibold text-text mb-2\">Crypto Payments</h3>\n              <p className=\"text-muted\">Accept Bitcoin and Monero for maximum privacy and security in all transactions.</p>\n            </div>\n          </div>\n        </div>\n      </section>\n      \n      {/* Footer */}\n      <footer className=\"bg-surface border-t border-border\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-8\">\n            <div className=\"md:col-span-2\">\n              <div className=\"flex items-center mb-4\">\n                <div className=\"w-8 h-8 bg-accent rounded-lg flex items-center justify-center\">\n                  <Shield className=\"text-bg w-4 h-4\" />\n                </div>\n                <h3 className=\"ml-3 text-xl font-bold text-text\">CryptoMarket</h3>\n              </div>\n              <p className=\"text-muted mb-4\">The secure, anonymous marketplace for digital accounts. Trade safely with cryptocurrency payments and escrow protection.</p>\n              <p className=\"text-xs text-muted\">We do not collect unnecessary personal data. Accounts are anonymous. Use recovery phrase to regain access.</p>\n            </div>\n            \n            <div>\n              <h4 className=\"text-sm font-semibold text-text mb-4\">Marketplace</h4>\n              <ul className=\"space-y-2 text-sm text-muted\">\n                <li><a href=\"#\" className=\"hover:text-text\">Browse Listings</a></li>\n                <li><a href=\"#\" className=\"hover:text-text\">Categories</a></li>\n                <li><a href=\"#\" className=\"hover:text-text\">Featured Vendors</a></li>\n                <li><a href=\"#\" className=\"hover:text-text\">How It Works</a></li>\n              </ul>\n            </div>\n            \n            <div>\n              <h4 className=\"text-sm font-semibold text-text mb-4\">Support</h4>\n              <ul className=\"space-y-2 text-sm text-muted\">\n                <li><a href=\"#\" className=\"hover:text-text\">Help Center</a></li>\n                <li><a href=\"#\" className=\"hover:text-text\">Dispute Resolution</a></li>\n                <li><a href=\"#\" className=\"hover:text-text\">Privacy Policy</a></li>\n                <li><a href=\"#\" className=\"hover:text-text\">Terms of Service</a></li>\n              </ul>\n            </div>\n          </div>\n          \n          <div className=\"border-t border-border mt-8 pt-8 text-center\">\n            <p className=\"text-xs text-muted\">\n              © 2024 CryptoMarket. All rights reserved. • Privacy-first anonymous marketplace\n            </p>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}\n","size_bytes":12513},"client/src/components/marketplace/MarketplaceHeader.tsx":{"content":"import { Search, Heart, ShoppingCart, Shield } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\n\nexport function MarketplaceHeader() {\n  return (\n    <header className=\"bg-surface border-b border-border\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center py-4\">\n          {/* Logo & Navigation */}\n          <div className=\"flex items-center space-x-8\">\n            <div className=\"flex items-center\">\n              <div className=\"w-8 h-8 bg-accent rounded-lg flex items-center justify-center\">\n                <Shield className=\"text-bg w-4 h-4\" />\n              </div>\n              <h1 className=\"ml-3 text-xl font-bold text-text\">CryptoMarket</h1>\n            </div>\n            \n            <nav className=\"hidden md:flex space-x-6\">\n              <Link href=\"/\">\n                <span className=\"text-text hover:text-accent cursor-pointer\" data-testid=\"nav-browse\">Browse</span>\n              </Link>\n              <Link href=\"/categories\">\n                <span className=\"text-muted hover:text-text cursor-pointer\" data-testid=\"nav-categories\">Categories</span>\n              </Link>\n              <Link href=\"/vendors\">\n                <span className=\"text-muted hover:text-text cursor-pointer\" data-testid=\"nav-vendors\">Vendors</span>\n              </Link>\n              <Link href=\"/support\">\n                <span className=\"text-muted hover:text-text cursor-pointer\" data-testid=\"nav-support\">Support</span>\n              </Link>\n            </nav>\n          </div>\n          \n          {/* Search Bar */}\n          <div className=\"flex-1 max-w-2xl mx-8\">\n            <div className=\"relative\">\n              <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n                <Search className=\"text-muted w-4 h-4\" />\n              </div>\n              <Input\n                type=\"text\"\n                placeholder=\"Search for accounts...\"\n                className=\"pl-10 bg-surface-2 border-border text-text placeholder-muted focus:ring-accent focus:border-accent\"\n                data-testid=\"search-input\"\n              />\n            </div>\n          </div>\n          \n          {/* User Actions */}\n          <div className=\"flex items-center space-x-4\">\n            <Button variant=\"ghost\" size=\"sm\" className=\"text-muted hover:text-text\" data-testid=\"favorites-button\">\n              <Heart className=\"w-5 h-5\" />\n            </Button>\n            <Button variant=\"ghost\" size=\"sm\" className=\"text-muted hover:text-text relative\" data-testid=\"cart-button\">\n              <ShoppingCart className=\"w-5 h-5\" />\n              <span className=\"absolute -top-2 -right-2 w-4 h-4 bg-accent rounded-full text-xs text-bg flex items-center justify-center\">2</span>\n            </Button>\n            <div className=\"flex items-center space-x-2\">\n              <Button variant=\"outline\" size=\"sm\" className=\"text-muted hover:text-text hover:bg-surface-2\" data-testid=\"signin-button\">\n                Sign In\n              </Button>\n              <Button size=\"sm\" className=\"bg-accent text-bg hover:bg-accent-2\" data-testid=\"join-button\">\n                Join\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":3386},"client/src/components/marketplace/MarketplaceLayout.tsx":{"content":"import { MarketplaceHeader } from \"./MarketplaceHeader\";\n\ninterface MarketplaceLayoutProps {\n  children: React.ReactNode;\n}\n\nexport function MarketplaceLayout({ children }: MarketplaceLayoutProps) {\n  return (\n    <div className=\"min-h-screen bg-bg dark\">\n      <MarketplaceHeader />\n      {children}\n    </div>\n  );\n}\n","size_bytes":319},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/status-badge.tsx":{"content":"import { cn } from \"@/lib/utils\";\n\ninterface StatusBadgeProps {\n  status: string;\n  type: \"success\" | \"warning\" | \"danger\" | \"accent\" | \"muted\";\n  className?: string;\n}\n\nexport function StatusBadge({ status, type, className }: StatusBadgeProps) {\n  const variants = {\n    success: \"bg-success/20 text-success\",\n    warning: \"bg-warning/20 text-warning\", \n    danger: \"bg-danger/20 text-danger\",\n    accent: \"bg-accent/20 text-accent\",\n    muted: \"bg-surface-2 text-muted border border-border\"\n  };\n\n  return (\n    <span \n      className={cn(\n        \"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium\",\n        variants[type],\n        className\n      )}\n      data-testid={`status-badge-${status.toLowerCase().replace(/\\s+/g, '-')}`}\n    >\n      {type !== \"muted\" && (\n        <span className={cn(\"w-1.5 h-1.5 rounded-full mr-1\", \n          type === \"success\" && \"bg-success\",\n          type === \"warning\" && \"bg-warning\", \n          type === \"danger\" && \"bg-danger\",\n          type === \"accent\" && \"bg-accent\"\n        )} />\n      )}\n      {status}\n    </span>\n  );\n}\n","size_bytes":1090},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/admin/admin-dashboard.tsx":{"content":"import { useLocation } from \"wouter\";\nimport { AdminLayout } from \"@/components/admin/AdminLayout\";\nimport { Overview } from \"@/components/admin/Overview\";\n\n// Import all admin page components\nimport Users from \"./users\";\nimport Vendors from \"./vendors\";\nimport Listings from \"./listings\";\nimport Orders from \"./orders\";\nimport Disputes from \"./disputes\";\nimport Messages from \"./messages\";\nimport Tickets from \"./tickets\";\nimport Crypto from \"./crypto\";\nimport Payouts from \"./payouts\";\nimport Commissions from \"./commissions\";\nimport Ads from \"./ads\";\nimport Categories from \"./categories\";\nimport GiftCards from \"./gift-cards\";\nimport Alerts from \"./alerts\";\nimport Roles from \"./roles\";\nimport Security from \"./security\";\nimport Branding from \"./branding\";\n\n// Component mapping\nconst ADMIN_COMPONENTS: Record<string, () => JSX.Element> = {\n  \"\": Overview,\n  \"users\": Users,\n  \"vendors\": Vendors,\n  \"listings\": Listings,\n  \"orders\": Orders,\n  \"disputes\": Disputes,\n  \"messages\": Messages,\n  \"tickets\": Tickets,\n  \"crypto\": Crypto,\n  \"payouts\": Payouts,\n  \"commissions\": Commissions,\n  \"ads\": Ads,\n  \"categories\": Categories,\n  \"gift-cards\": GiftCards,\n  \"alerts\": Alerts,\n  \"roles\": Roles,\n  \"security\": Security,\n  \"branding\": Branding,\n};\n\n// Section name mapping for breadcrumbs\nconst SECTION_NAMES: Record<string, string> = {\n  \"\": \"Overview\",\n  \"users\": \"Users\",\n  \"vendors\": \"Vendors\",\n  \"listings\": \"Listings\",\n  \"orders\": \"Orders\",\n  \"disputes\": \"Disputes\",\n  \"messages\": \"Messages\",\n  \"tickets\": \"Tickets\",\n  \"crypto\": \"Crypto\",\n  \"payouts\": \"Payouts & Refunds\",\n  \"commissions\": \"Commissions\",\n  \"ads\": \"Ads\",\n  \"categories\": \"Categories\",\n  \"gift-cards\": \"Gift Cards\",\n  \"alerts\": \"Alerts\",\n  \"roles\": \"Roles & Permissions\",\n  \"security\": \"Security\",\n  \"branding\": \"Branding\",\n};\n\nexport default function AdminDashboard() {\n  const [location] = useLocation();\n  \n  // Extract section from URL path (e.g., \"/admin/users\" -> \"users\", \"/admin\" -> \"\")\n  const section = location.replace(/^\\/admin\\/?/, \"\");\n  \n  // Get the component for this section, fallback to Overview\n  const Component = ADMIN_COMPONENTS[section] || Overview;\n  const sectionName = SECTION_NAMES[section] || \"Overview\";\n\n  const breadcrumbs = [\n    { label: \"Admin\", href: \"/admin\" },\n    { label: sectionName }\n  ];\n\n  return (\n    <AdminLayout breadcrumbs={breadcrumbs}>\n      <Component />\n    </AdminLayout>\n  );\n}\n","size_bytes":2401},"client/src/pages/marketplace/home.tsx":{"content":"import { MarketplaceLayout } from \"@/components/marketplace/MarketplaceLayout\";\nimport { HomePage } from \"@/components/marketplace/HomePage\";\n\nexport default function MarketplaceHome() {\n  return (\n    <MarketplaceLayout>\n      <HomePage />\n    </MarketplaceLayout>\n  );\n}\n","size_bytes":273},"client/src/components/buyer/BuyerHeader.tsx":{"content":"import { useState } from \"react\";\nimport { Search, Bell, ChevronDown, Settings, LogOut, User } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { Link } from \"wouter\";\n\nexport function BuyerHeader() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  const notifications = [\n    { id: 1, title: \"Order delivered\", message: \"Netflix Premium Account has been delivered\", time: \"2 min ago\", unread: true },\n    { id: 2, title: \"New message\", message: \"Vendor replied to your inquiry\", time: \"5 min ago\", unread: true },\n    { id: 3, title: \"Price drop\", message: \"Adobe Creative Cloud is now 20% off\", time: \"1 hour ago\", unread: false },\n    { id: 4, title: \"Order confirmed\", message: \"Your order #ORD-2847 has been confirmed\", time: \"2 hours ago\", unread: false },\n  ];\n\n  const unreadCount = notifications.filter(n => n.unread).length;\n\n  return (\n    <header className=\"bg-gray-950 border-b border-gray-800 px-6 py-4\">\n      <div className=\"flex items-center justify-between\">\n        {/* Search Bar */}\n        <div className=\"flex-1 max-w-2xl\">\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n            <Input\n              placeholder=\"Search products, vendors, or orders...\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              className=\"pl-10 pr-4 py-2 w-full bg-gray-800 border-gray-700 text-white placeholder-gray-400 rounded-full focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n            />\n          </div>\n        </div>\n\n        {/* Right Controls */}\n        <div className=\"flex items-center space-x-4\">\n          {/* Notifications */}\n          <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n              <Button variant=\"ghost\" size=\"sm\" className=\"relative\">\n                <Bell className=\"w-5 h-5\" />\n                {unreadCount > 0 && (\n                  <Badge className=\"absolute -top-1 -right-1 w-5 h-5 rounded-full p-0 flex items-center justify-center text-xs bg-red-500 text-white\">\n                    {unreadCount}\n                  </Badge>\n                )}\n              </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent align=\"end\" className=\"w-80\">\n              <div className=\"p-3 border-b\">\n                <h3 className=\"font-semibold text-white\">Notifications</h3>\n                <p className=\"text-sm text-gray-400\">{unreadCount} unread</p>\n              </div>\n              <div className=\"max-h-96 overflow-y-auto\">\n                {notifications.map((notification) => (\n                  <DropdownMenuItem key={notification.id} className=\"p-3 border-b last:border-b-0\">\n                    <div className=\"flex items-start space-x-3 w-full\">\n                      <div className={`w-2 h-2 rounded-full mt-2 flex-shrink-0 ${notification.unread ? 'bg-blue-500' : 'bg-gray-300'}`} />\n                      <div className=\"flex-1 min-w-0\">\n                        <p className=\"font-medium text-sm text-white\">{notification.title}</p>\n                        <p className=\"text-sm text-gray-400 truncate\">{notification.message}</p>\n                        <p className=\"text-xs text-gray-400 mt-1\">{notification.time}</p>\n                      </div>\n                    </div>\n                  </DropdownMenuItem>\n                ))}\n              </div>\n            </DropdownMenuContent>\n          </DropdownMenu>\n\n          {/* Profile Dropdown */}\n          <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n              <Button variant=\"ghost\" className=\"flex items-center space-x-2\">\n                <div className=\"w-8 h-8 bg-gradient-to-br from-green-400 to-blue-500 rounded-full flex items-center justify-center\">\n                  <User className=\"text-white w-4 h-4\" />\n                </div>\n                <span className=\"hidden md:block font-medium text-gray-300\">crypto_buyer</span>\n                <ChevronDown className=\"w-4 h-4 text-gray-400\" />\n              </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent align=\"end\" className=\"w-56\">\n              <div className=\"p-3 border-b\">\n                <p className=\"font-medium text-white\">crypto_buyer</p>\n                <p className=\"text-sm text-gray-400\">crypto_buyer@example.com</p>\n              </div>\n              <Link href=\"/buyer/settings\">\n                <DropdownMenuItem>\n                  <User className=\"w-4 h-4 mr-2\" />\n                  Profile\n                </DropdownMenuItem>\n              </Link>\n              <Link href=\"/buyer/settings\">\n                <DropdownMenuItem>\n                  <Settings className=\"w-4 h-4 mr-2\" />\n                  Settings\n                </DropdownMenuItem>\n              </Link>\n              <DropdownMenuSeparator />\n              <DropdownMenuItem className=\"text-red-400\">\n                <LogOut className=\"w-4 h-4 mr-2\" />\n                Logout\n              </DropdownMenuItem>\n            </DropdownMenuContent>\n          </DropdownMenu>\n        </div>\n      </div>\n    </header>\n  );\n}","size_bytes":5406},"client/src/components/buyer/BuyerLayout.tsx":{"content":"import { useState } from \"react\";\nimport { BuyerSidebar } from \"./BuyerSidebar\";\nimport { BuyerHeader } from \"./BuyerHeader\";\n\ninterface BuyerLayoutProps {\n  children: React.ReactNode;\n}\n\nexport function BuyerLayout({ children }: BuyerLayoutProps) {\n  const [sidebarExpanded, setSidebarExpanded] = useState(false);\n\n  return (\n    <div className=\"h-screen bg-gray-950 overflow-hidden\">\n      <div className=\"flex h-full\">\n        <BuyerSidebar \n          expanded={sidebarExpanded}\n          onExpandedChange={setSidebarExpanded}\n        />\n        <div className=\"flex-1 flex flex-col overflow-hidden\">\n          <BuyerHeader />\n          <main className=\"flex-1 overflow-y-auto bg-gray-900\">\n            <div className=\"p-6\">\n              {children}\n            </div>\n          </main>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":835},"client/src/components/buyer/BuyerSidebar.tsx":{"content":"import { useState } from \"react\";\nimport { \n  Home, \n  List, \n  ShoppingCart, \n  MessageSquare, \n  Heart, \n  Settings, \n  HelpCircle,\n  User,\n  Store,\n  ArrowRight\n} from \"lucide-react\";\nimport { Link, useLocation } from \"wouter\";\nimport { cn } from \"@/lib/utils\";\nimport { Badge } from \"@/components/ui/badge\";\n\ninterface BuyerSidebarProps {\n  expanded: boolean;\n  onExpandedChange: (expanded: boolean) => void;\n}\n\nconst BUYER_NAV_ITEMS = [\n  {\n    title: \"Home\",\n    icon: Home,\n    href: \"/buyer\",\n    badge: null\n  },\n  {\n    title: \"Listings\",\n    icon: List,\n    href: \"/buyer/listings\",\n    badge: null\n  },\n  {\n    title: \"Orders\",\n    icon: ShoppingCart,\n    href: \"/buyer/orders\",\n    badge: { text: \"3\", type: \"accent\" }\n  },\n  {\n    title: \"Messages\",\n    icon: MessageSquare,\n    href: \"/buyer/messages\",\n    badge: { text: \"5\", type: \"danger\" }\n  },\n  {\n    title: \"Wishlist\",\n    icon: Heart,\n    href: \"/buyer/wishlist\",\n    badge: { text: \"12\", type: \"success\" }\n  },\n  {\n    title: \"Settings\",\n    icon: Settings,\n    href: \"/buyer/settings\",\n    badge: null\n  },\n  {\n    title: \"Support\",\n    icon: HelpCircle,\n    href: \"/buyer/support\",\n    badge: null\n  }\n];\n\nexport function BuyerSidebar({ expanded, onExpandedChange }: BuyerSidebarProps) {\n  const [location] = useLocation();\n\n  return (\n    <div \n      className={cn(\n        \"bg-gray-950 border-r border-gray-800 transition-all duration-300 ease-in-out flex flex-col\",\n        expanded ? \"w-64\" : \"w-16\"\n      )}\n      onMouseEnter={() => onExpandedChange(true)}\n      onMouseLeave={() => onExpandedChange(false)}\n    >\n      {/* Logo */}\n      <div className=\"p-4 border-b border-gray-800\">\n        <div className=\"flex items-center\">\n          <div className=\"w-8 h-8 bg-gradient-to-br from-blue-500 to-purple-600 rounded-xl flex items-center justify-center\">\n            <User className=\"text-white w-4 h-4\" />\n          </div>\n          {expanded && (\n            <div className=\"ml-3 transition-opacity duration-200\">\n              <h1 className=\"text-lg font-bold text-white\">CryptoMarket</h1>\n              <p className=\"text-xs text-gray-400\">Buyer Dashboard</p>\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Navigation */}\n      <nav className=\"flex-1 p-2 space-y-1\">\n        {BUYER_NAV_ITEMS.map((item) => {\n          const Icon = item.icon;\n          const isActive = location === item.href || (item.href !== \"/buyer\" && location.startsWith(item.href));\n          \n          return (\n            <Link key={item.href} href={item.href}>\n              <div \n                className={cn(\n                  \"relative group flex items-center px-3 py-3 rounded-xl transition-all duration-200 cursor-pointer\",\n                  isActive \n                    ? \"bg-gradient-to-r from-blue-500 to-purple-600 text-white shadow-lg\" \n                    : \"text-gray-400 hover:bg-gray-800 hover:text-white\"\n                )}\n                data-testid={`buyer-nav-${item.title.toLowerCase().replace(/\\s+/g, '-')}`}\n              >\n                <Icon className=\"w-5 h-5 flex-shrink-0\" />\n                \n                {expanded ? (\n                  <div className=\"ml-3 flex items-center justify-between w-full\">\n                    <span className=\"font-medium\">{item.title}</span>\n                    {item.badge && (\n                      <Badge \n                        variant={item.badge.type === 'danger' ? 'destructive' : 'default'}\n                        className=\"text-xs\"\n                      >\n                        {item.badge.text}\n                      </Badge>\n                    )}\n                  </div>\n                ) : (\n                  <>\n                    {item.badge && (\n                      <div className=\"absolute -top-1 -right-1 w-3 h-3 bg-red-500 rounded-full\"></div>\n                    )}\n                    \n                    {/* Tooltip */}\n                    <div className=\"absolute left-16 top-1/2 transform -translate-y-1/2 bg-gray-800 text-white px-3 py-2 rounded-lg shadow-xl opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all duration-200 z-50\">\n                      <div className=\"text-sm font-medium whitespace-nowrap\">{item.title}</div>\n                      {item.badge && (\n                        <div className=\"text-xs text-gray-300 mt-1\">{item.badge.text} new</div>\n                      )}\n                      <div className=\"absolute left-0 top-1/2 transform -translate-y-1/2 -translate-x-1 w-2 h-2 bg-gray-800 rotate-45\"></div>\n                    </div>\n                  </>\n                )}\n              </div>\n            </Link>\n          );\n        })}\n      </nav>\n\n      {/* Apply as Vendor Section */}\n      <div className=\"p-2 border-t border-gray-800\">\n        <Link href=\"/vendor/apply\">\n          <div className=\"relative group flex items-center px-3 py-3 rounded-xl transition-all duration-200 cursor-pointer text-gray-400 hover:bg-gradient-to-r hover:from-purple-600 hover:to-blue-600 hover:text-white border border-gray-700 hover:border-purple-500\">\n            <Store className=\"w-5 h-5 flex-shrink-0\" />\n            \n            {expanded ? (\n              <div className=\"ml-3 flex items-center justify-between w-full\">\n                <span className=\"font-medium\">Apply as Vendor</span>\n                <ArrowRight className=\"w-4 h-4\" />\n              </div>\n            ) : (\n              <div className=\"absolute left-16 top-1/2 transform -translate-y-1/2 bg-gray-800 text-white px-3 py-2 rounded-lg shadow-xl opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all duration-200 z-50\">\n                <div className=\"text-sm font-medium whitespace-nowrap\">Apply as Vendor</div>\n                <div className=\"text-xs text-gray-300 mt-1\">Start selling</div>\n                <div className=\"absolute left-0 top-1/2 transform -translate-y-1/2 -translate-x-1 w-2 h-2 bg-gray-800 rotate-45\"></div>\n              </div>\n            )}\n          </div>\n        </Link>\n      </div>\n\n      {/* User Profile */}\n      <div className=\"p-4 border-t border-gray-800\">\n        <div className=\"flex items-center\">\n          <div className=\"w-8 h-8 bg-gradient-to-br from-green-400 to-blue-500 rounded-full flex items-center justify-center\">\n            <User className=\"text-white w-4 h-4\" />\n          </div>\n          {expanded && (\n            <div className=\"ml-3\">\n              <p className=\"text-sm font-medium text-white\">crypto_buyer</p>\n              <p className=\"text-xs text-gray-400\">Premium Member</p>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":6646},"client/src/components/buyer/MessagesPanel.tsx":{"content":"import { useState } from \"react\";\nimport { MessageSquare, MoreVertical, Send } from \"lucide-react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\n\nconst conversations = [\n  {\n    id: 1,\n    vendor: \"CryptoAccountsPlus\",\n    vendorAvatar: \"CA\",\n    lastMessage: \"Your Netflix account details have been sent\",\n    time: \"2 min ago\",\n    unread: 2,\n    product: \"Netflix Premium Account\"\n  },\n  {\n    id: 2,\n    vendor: \"DigitalVault\",\n    vendorAvatar: \"DV\",\n    lastMessage: \"Thank you for your order! Processing now...\",\n    time: \"5 min ago\",\n    unread: 1,\n    product: \"Spotify Premium\"\n  },\n  {\n    id: 3,\n    vendor: \"PremiumSoft\",\n    vendorAvatar: \"PS\",\n    lastMessage: \"Hi! Do you have any questions about the Adobe license?\",\n    time: \"1 hour ago\",\n    unread: 0,\n    product: \"Adobe Creative Cloud\"\n  },\n  {\n    id: 4,\n    vendor: \"StreamingAccounts\",\n    vendorAvatar: \"SA\",\n    lastMessage: \"Order has been delivered successfully\",\n    time: \"2 hours ago\",\n    unread: 0,\n    product: \"YouTube Premium\"\n  }\n];\n\nconst messages = [\n  {\n    id: 1,\n    sender: \"vendor\",\n    content: \"Hello! Thank you for your order. I'll have your Netflix Premium account ready within the next hour.\",\n    time: \"10:30 AM\"\n  },\n  {\n    id: 2,\n    sender: \"buyer\",\n    content: \"Great! How long is the warranty on this account?\",\n    time: \"10:32 AM\"\n  },\n  {\n    id: 3,\n    sender: \"vendor\", \n    content: \"This account comes with a 6-month warranty. If there are any issues, I'll replace it immediately.\",\n    time: \"10:35 AM\"\n  },\n  {\n    id: 4,\n    sender: \"vendor\",\n    content: \"Your Netflix account details have been sent. Please check and let me know if you have any issues!\",\n    time: \"11:15 AM\"\n  }\n];\n\ninterface MessagesPanelProps {\n  compact?: boolean;\n}\n\nexport function MessagesPanel({ compact = false }: MessagesPanelProps) {\n  const [selectedConversation, setSelectedConversation] = useState(compact ? null : conversations[0]);\n  const [newMessage, setNewMessage] = useState(\"\");\n\n  if (compact) {\n    return (\n      <Card className=\"border border-gray-700 bg-gray-900\">\n        <CardContent className=\"p-0\">\n          <div className=\"space-y-3\">\n            {conversations.slice(0, 3).map((conv) => (\n              <div \n                key={conv.id}\n                className=\"flex items-center justify-between p-4 bg-gray-800 rounded-xl hover:bg-gray-700 transition-colors duration-200 cursor-pointer\"\n                onClick={() => window.location.href = '/buyer/messages'}\n              >\n                <div className=\"flex items-center space-x-3 flex-1\">\n                  <Avatar className=\"w-10 h-10 bg-gradient-to-br from-blue-500 to-purple-600\">\n                    <AvatarFallback className=\"text-white font-semibold\">\n                      {conv.vendorAvatar}\n                    </AvatarFallback>\n                  </Avatar>\n                  \n                  <div className=\"flex-1 min-w-0\">\n                    <div className=\"flex items-center justify-between\">\n                      <h4 className=\"font-medium text-white\">\n                        {conv.vendor}\n                      </h4>\n                      <span className=\"text-xs text-gray-400\">{conv.time}</span>\n                    </div>\n                    <p className=\"text-sm text-gray-400 truncate\">\n                      {conv.lastMessage}\n                    </p>\n                  </div>\n                </div>\n\n                {conv.unread > 0 && (\n                  <Badge className=\"bg-red-500 text-white\">\n                    {conv.unread}\n                  </Badge>\n                )}\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n      {/* Conversations List */}\n      <Card className=\"lg:col-span-1 border border-gray-700 bg-gray-900\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2\">\n            <MessageSquare className=\"w-5 h-5\" />\n            <span>Messages</span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"p-0\">\n          <div className=\"space-y-1\">\n            {conversations.map((conv) => (\n              <div \n                key={conv.id}\n                className={`p-4 cursor-pointer transition-colors duration-200 ${\n                  selectedConversation?.id === conv.id \n                    ? 'bg-blue-900/20 border-r-2 border-blue-500' \n                    : 'hover:bg-gray-800'\n                }`}\n                onClick={() => setSelectedConversation(conv)}\n              >\n                <div className=\"flex items-center space-x-3\">\n                  <Avatar className=\"w-10 h-10 bg-gradient-to-br from-blue-500 to-purple-600\">\n                    <AvatarFallback className=\"text-white font-semibold\">\n                      {conv.vendorAvatar}\n                    </AvatarFallback>\n                  </Avatar>\n                  \n                  <div className=\"flex-1 min-w-0\">\n                    <div className=\"flex items-center justify-between\">\n                      <h4 className=\"font-medium text-gray-900 dark:text-white truncate\">\n                        {conv.vendor}\n                      </h4>\n                      {conv.unread > 0 && (\n                        <Badge className=\"bg-red-500 text-white text-xs\">\n                          {conv.unread}\n                        </Badge>\n                      )}\n                    </div>\n                    <p className=\"text-sm text-gray-400 truncate\">\n                      {conv.lastMessage}\n                    </p>\n                    <p className=\"text-xs text-gray-400 mt-1\">{conv.time}</p>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Chat Window */}\n      <Card className=\"lg:col-span-2 border border-gray-700 bg-gray-900\">\n        {selectedConversation ? (\n          <>\n            {/* Chat Header */}\n            <CardHeader className=\"border-b\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-3\">\n                  <Avatar className=\"w-10 h-10 bg-gradient-to-br from-blue-500 to-purple-600\">\n                    <AvatarFallback className=\"text-white font-semibold\">\n                      {selectedConversation.vendorAvatar}\n                    </AvatarFallback>\n                  </Avatar>\n                  <div>\n                    <h3 className=\"font-semibold text-white\">\n                      {selectedConversation.vendor}\n                    </h3>\n                    <p className=\"text-sm text-gray-400\">\n                      Re: {selectedConversation.product}\n                    </p>\n                  </div>\n                </div>\n                \n                <DropdownMenu>\n                  <DropdownMenuTrigger asChild>\n                    <Button variant=\"ghost\" size=\"sm\">\n                      <MoreVertical className=\"w-4 h-4\" />\n                    </Button>\n                  </DropdownMenuTrigger>\n                  <DropdownMenuContent align=\"end\">\n                    <DropdownMenuItem>View Product</DropdownMenuItem>\n                    <DropdownMenuItem>Report Issue</DropdownMenuItem>\n                    <DropdownMenuItem className=\"text-red-600\">Block Vendor</DropdownMenuItem>\n                  </DropdownMenuContent>\n                </DropdownMenu>\n              </div>\n            </CardHeader>\n\n            {/* Messages */}\n            <CardContent className=\"flex-1 p-4\">\n              <div className=\"space-y-4 mb-4 max-h-96 overflow-y-auto\">\n                {messages.map((message) => (\n                  <div \n                    key={message.id}\n                    className={`flex ${message.sender === 'buyer' ? 'justify-end' : 'justify-start'}`}\n                  >\n                    <div className={`max-w-xs lg:max-w-md px-4 py-2 rounded-2xl ${\n                      message.sender === 'buyer' \n                        ? 'bg-blue-500 text-white' \n                        : 'bg-gray-700 text-white'\n                    }`}>\n                      <p className=\"text-sm\">{message.content}</p>\n                      <p className={`text-xs mt-1 ${\n                        message.sender === 'buyer' ? 'text-blue-100' : 'text-gray-400'\n                      }`}>\n                        {message.time}\n                      </p>\n                    </div>\n                  </div>\n                ))}\n              </div>\n\n              {/* Message Input */}\n              <div className=\"flex items-center space-x-2 border-t pt-4\">\n                <Input\n                  placeholder=\"Type your message...\"\n                  value={newMessage}\n                  onChange={(e) => setNewMessage(e.target.value)}\n                  className=\"flex-1\"\n                  onKeyPress={(e) => {\n                    if (e.key === 'Enter' && newMessage.trim()) {\n                      // Handle send message\n                      setNewMessage(\"\");\n                    }\n                  }}\n                />\n                <Button \n                  size=\"sm\"\n                  className=\"bg-gradient-to-r from-blue-500 to-purple-600\"\n                  disabled={!newMessage.trim()}\n                >\n                  <Send className=\"w-4 h-4\" />\n                </Button>\n              </div>\n            </CardContent>\n          </>\n        ) : (\n          <CardContent className=\"flex items-center justify-center h-96\">\n            <div className=\"text-center\">\n              <MessageSquare className=\"w-16 h-16 text-gray-400 mx-auto mb-4\" />\n              <h3 className=\"text-lg font-medium text-white mb-2\">\n                Select a conversation\n              </h3>\n              <p className=\"text-gray-400\">\n                Choose a vendor to start chatting\n              </p>\n            </div>\n          </CardContent>\n        )}\n      </Card>\n    </div>\n  );\n}","size_bytes":10364},"client/src/components/buyer/OrdersTable.tsx":{"content":"import { MoreVertical, Package, Truck, CheckCircle, XCircle, Clock } from \"lucide-react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\n\nconst orders = [\n  {\n    id: \"ORD-2847\",\n    product: \"Netflix Premium Account (1 Year)\",\n    vendor: \"CryptoAccountsPlus\",\n    price: \"0.0012 BTC\",\n    date: \"2024-01-15\",\n    status: \"Delivered\",\n    statusType: \"success\" as const\n  },\n  {\n    id: \"ORD-2846\",\n    product: \"Spotify Premium (6 Months)\",\n    vendor: \"DigitalVault\", \n    price: \"0.0008 BTC\",\n    date: \"2024-01-14\",\n    status: \"In Transit\",\n    statusType: \"warning\" as const\n  },\n  {\n    id: \"ORD-2845\",\n    product: \"Adobe Creative Cloud (1 Year)\",\n    vendor: \"PremiumSoft\",\n    price: \"0.0034 BTC\", \n    date: \"2024-01-12\",\n    status: \"Processing\",\n    statusType: \"accent\" as const\n  },\n  {\n    id: \"ORD-2844\",\n    product: \"YouTube Premium (3 Months)\",\n    vendor: \"StreamingAccounts\",\n    price: \"0.0006 BTC\",\n    date: \"2024-01-10\",\n    status: \"Cancelled\",\n    statusType: \"danger\" as const\n  }\n];\n\nconst getStatusIcon = (status: string) => {\n  switch (status) {\n    case \"Delivered\":\n      return <CheckCircle className=\"w-4 h-4\" />;\n    case \"In Transit\":\n      return <Truck className=\"w-4 h-4\" />;\n    case \"Processing\":\n      return <Clock className=\"w-4 h-4\" />;\n    case \"Cancelled\":\n      return <XCircle className=\"w-4 h-4\" />;\n    default:\n      return <Package className=\"w-4 h-4\" />;\n  }\n};\n\nconst getStatusColor = (statusType: string) => {\n  switch (statusType) {\n    case \"success\":\n      return \"text-green-400 bg-green-900/20\";\n    case \"warning\":\n      return \"text-yellow-400 bg-yellow-900/20\";\n    case \"accent\":\n      return \"text-blue-400 bg-blue-900/20\";\n    case \"danger\":\n      return \"text-red-400 bg-red-900/20\";\n    default:\n      return \"text-gray-400 bg-gray-900/20\";\n  }\n};\n\ninterface OrdersTableProps {\n  compact?: boolean;\n}\n\nexport function OrdersTable({ compact = false }: OrdersTableProps) {\n  const displayOrders = compact ? orders.slice(0, 3) : orders;\n\n  return (\n    <Card className=\"border border-gray-700 bg-gray-900\">\n      {!compact && (\n        <CardHeader>\n          <CardTitle className=\"text-xl font-bold text-white\">\n            Your Orders\n          </CardTitle>\n        </CardHeader>\n      )}\n      <CardContent className={compact ? \"p-0\" : \"\"}>\n        <div className=\"space-y-4\">\n          {displayOrders.map((order) => (\n            <div \n              key={order.id}\n              className=\"flex items-center justify-between p-4 bg-gray-800 rounded-xl hover:bg-gray-700 transition-colors duration-200\"\n            >\n              <div className=\"flex items-center space-x-4 flex-1\">\n                <div className={`w-10 h-10 rounded-lg flex items-center justify-center ${getStatusColor(order.statusType)}`}>\n                  {getStatusIcon(order.status)}\n                </div>\n                \n                <div className=\"flex-1 min-w-0\">\n                  <h4 className=\"font-medium text-white truncate\">\n                    {order.product}\n                  </h4>\n                  <p className=\"text-sm text-gray-400\">\n                    {order.vendor} • {order.date}\n                  </p>\n                </div>\n              </div>\n\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"text-right\">\n                  <p className=\"font-semibold text-white\">\n                    {order.price}\n                  </p>\n                  <Badge \n                    className={`text-xs ${getStatusColor(order.statusType)}`}\n                    variant=\"secondary\"\n                  >\n                    {order.status}\n                  </Badge>\n                </div>\n\n                <DropdownMenu>\n                  <DropdownMenuTrigger asChild>\n                    <Button variant=\"ghost\" size=\"sm\">\n                      <MoreVertical className=\"w-4 h-4\" />\n                    </Button>\n                  </DropdownMenuTrigger>\n                  <DropdownMenuContent align=\"end\">\n                    <DropdownMenuItem>View Details</DropdownMenuItem>\n                    <DropdownMenuItem>Track Order</DropdownMenuItem>\n                    {order.status === \"Delivered\" && (\n                      <DropdownMenuItem>Leave Review</DropdownMenuItem>\n                    )}\n                    {order.status === \"Processing\" && (\n                      <DropdownMenuItem className=\"text-red-600\">Cancel Order</DropdownMenuItem>\n                    )}\n                  </DropdownMenuContent>\n                </DropdownMenu>\n              </div>\n            </div>\n          ))}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":4914},"client/src/components/buyer/OverviewCards.tsx":{"content":"import { ShoppingCart, Package, Heart, MessageSquare } from \"lucide-react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\n\nconst overviewData = [\n  {\n    title: \"Total Orders\",\n    value: \"24\",\n    icon: ShoppingCart,\n    color: \"from-blue-500 to-purple-600\",\n    textColor: \"text-blue-600 dark:text-blue-400\"\n  },\n  {\n    title: \"Active Orders\",\n    value: \"3\",\n    icon: Package,\n    color: \"from-green-500 to-emerald-600\",\n    textColor: \"text-green-600 dark:text-green-400\"\n  },\n  {\n    title: \"Wishlist Items\",\n    value: \"12\",\n    icon: Heart,\n    color: \"from-pink-500 to-rose-600\",\n    textColor: \"text-pink-600 dark:text-pink-400\"\n  },\n  {\n    title: \"Unread Messages\",\n    value: \"5\",\n    icon: MessageSquare,\n    color: \"from-orange-500 to-amber-600\",\n    textColor: \"text-orange-600 dark:text-orange-400\"\n  }\n];\n\nexport function OverviewCards() {\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n      {overviewData.map((item, index) => {\n        const Icon = item.icon;\n        \n        return (\n          <Card \n            key={item.title}\n            className=\"group hover:shadow-xl transition-all duration-300 hover:-translate-y-1 border-0 shadow-md bg-white dark:bg-gray-800\"\n          >\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400 mb-1\">\n                    {item.title}\n                  </p>\n                  <p className={`text-3xl font-bold ${item.textColor}`}>\n                    {item.value}\n                  </p>\n                </div>\n                <div className={`w-12 h-12 rounded-xl bg-gradient-to-br ${item.color} flex items-center justify-center group-hover:scale-110 transition-transform duration-300`}>\n                  <Icon className=\"w-6 h-6 text-white\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        );\n      })}\n    </div>\n  );\n}","size_bytes":2054},"client/src/components/buyer/ProductCard.tsx":{"content":"import { useState } from \"react\";\nimport { Heart, Star, Eye, ShoppingCart } from \"lucide-react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\n\ninterface Product {\n  id: number;\n  title: string;\n  vendor: string;\n  price: string;\n  image: string;\n  rating: number;\n  inStock: boolean;\n}\n\ninterface ProductCardProps {\n  product: Product;\n}\n\nexport function ProductCard({ product }: ProductCardProps) {\n  const [isWishlisted, setIsWishlisted] = useState(false);\n  const [imageLoaded, setImageLoaded] = useState(false);\n\n  return (\n    <Card className=\"group overflow-hidden transition-all duration-300 hover:-translate-y-2 border border-gray-700 bg-gray-900\">\n      <div className=\"relative\">\n        {/* Product Image */}\n        <div className=\"relative h-48 bg-gray-200 dark:bg-gray-700 overflow-hidden\">\n          <img\n            src={product.image}\n            alt={product.title}\n            className={`w-full h-full object-cover transition-all duration-500 group-hover:scale-110 ${\n              imageLoaded ? 'opacity-100' : 'opacity-0'\n            }`}\n            onLoad={() => setImageLoaded(true)}\n          />\n          {!imageLoaded && (\n            <div className=\"absolute inset-0 bg-gray-200 dark:bg-gray-700 animate-pulse\" />\n          )}\n        </div>\n\n        {/* Wishlist Button */}\n        <Button\n          size=\"sm\"\n          variant=\"ghost\"\n          className={`absolute top-3 right-3 w-8 h-8 rounded-full backdrop-blur-sm transition-all duration-200 ${\n            isWishlisted \n              ? 'bg-red-500 text-white hover:bg-red-600' \n              : 'bg-gray-800/80 text-gray-300 hover:bg-gray-700 hover:text-red-500'\n          }`}\n          onClick={() => setIsWishlisted(!isWishlisted)}\n        >\n          <Heart className={`w-4 h-4 ${isWishlisted ? 'fill-current' : ''}`} />\n        </Button>\n\n        {/* Stock Status */}\n        <div className=\"absolute top-3 left-3\">\n          <Badge \n            variant={product.inStock ? \"default\" : \"destructive\"}\n            className=\"text-xs\"\n          >\n            {product.inStock ? \"In Stock\" : \"Out of Stock\"}\n          </Badge>\n        </div>\n      </div>\n\n      <CardContent className=\"p-6\">\n        {/* Vendor */}\n        <p className=\"text-sm text-gray-400 mb-2\">{product.vendor}</p>\n        \n        {/* Title */}\n        <h3 className=\"font-semibold text-white mb-3 line-clamp-2 leading-snug\">\n          {product.title}\n        </h3>\n\n        {/* Rating */}\n        <div className=\"flex items-center space-x-1 mb-4\">\n          <Star className=\"w-4 h-4 fill-yellow-400 text-yellow-400\" />\n          <span className=\"text-sm font-medium text-gray-300\">\n            {product.rating}\n          </span>\n          <span className=\"text-sm text-gray-400\">(127 reviews)</span>\n        </div>\n\n        {/* Price */}\n        <div className=\"flex items-center justify-between mb-4\">\n          <span className=\"text-2xl font-bold text-blue-400\">\n            {product.price}\n          </span>\n          <span className=\"text-sm text-gray-400\">≈ $45.60</span>\n        </div>\n\n        {/* Action Buttons */}\n        <div className=\"flex space-x-2\">\n          <Button variant=\"outline\" size=\"sm\" className=\"flex-1\">\n            <Eye className=\"w-4 h-4 mr-2\" />\n            View\n          </Button>\n          <Button \n            size=\"sm\" \n            className=\"flex-1 bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700\"\n            disabled={!product.inStock}\n          >\n            <ShoppingCart className=\"w-4 h-4 mr-2\" />\n            Order\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":3737},"client/src/components/buyer/RecommendationsSection.tsx":{"content":"import { ChevronLeft, ChevronRight, Star, Users } from \"lucide-react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\n\nconst recommendedVendors = [\n  {\n    id: 1,\n    name: \"CryptoAccountsPlus\",\n    rating: 4.9,\n    products: 47,\n    totalSales: \"12.8 BTC\",\n    specialty: \"Streaming Services\",\n    avatar: \"CA\"\n  },\n  {\n    id: 2,\n    name: \"DigitalVault\",\n    rating: 4.7,\n    products: 23,\n    totalSales: \"8.4 BTC\", \n    specialty: \"Software & Tools\",\n    avatar: \"DV\"\n  },\n  {\n    id: 3,\n    name: \"PremiumSoft\",\n    rating: 4.8,\n    products: 31,\n    totalSales: \"15.2 BTC\",\n    specialty: \"Creative Software\",\n    avatar: \"PS\"\n  }\n];\n\nconst popularProducts = [\n  {\n    id: 1,\n    title: \"Discord Nitro (1 Year)\",\n    price: \"0.0009 BTC\",\n    image: \"https://images.unsplash.com/photo-1611224923853-80b023f02d71?w=400\",\n    orders: 145\n  },\n  {\n    id: 2,\n    title: \"Microsoft Office 365\",\n    price: \"0.0025 BTC\",\n    image: \"https://images.unsplash.com/photo-1633356122544-f134324a6cee?w=400\",\n    orders: 89\n  },\n  {\n    id: 3,\n    title: \"HBO Max Premium\",\n    price: \"0.0011 BTC\", \n    image: \"https://images.unsplash.com/photo-1489599417076-1e36a7bb28a3?w=400\",\n    orders: 67\n  }\n];\n\nexport function RecommendationsSection() {\n  return (\n    <div className=\"space-y-8\">\n      {/* Recommended Vendors */}\n      <section>\n        <div className=\"flex items-center justify-between mb-6\">\n          <h2 className=\"text-2xl font-bold text-gray-900 dark:text-white\">Recommended Vendors</h2>\n          <div className=\"flex space-x-2\">\n            <Button variant=\"outline\" size=\"sm\">\n              <ChevronLeft className=\"w-4 h-4\" />\n            </Button>\n            <Button variant=\"outline\" size=\"sm\">\n              <ChevronRight className=\"w-4 h-4\" />\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n          {recommendedVendors.map((vendor) => (\n            <Card key={vendor.id} className=\"group hover:shadow-xl transition-all duration-300 hover:-translate-y-1 border-0 shadow-lg\">\n              <CardContent className=\"p-6 text-center\">\n                <div className=\"w-16 h-16 bg-gradient-to-br from-blue-500 to-purple-600 rounded-full flex items-center justify-center mx-auto mb-4 group-hover:scale-110 transition-transform duration-300\">\n                  <span className=\"text-white font-bold text-lg\">{vendor.avatar}</span>\n                </div>\n                \n                <h3 className=\"font-semibold text-gray-900 dark:text-white mb-2\">\n                  {vendor.name}\n                </h3>\n                \n                <div className=\"flex items-center justify-center space-x-1 mb-3\">\n                  <Star className=\"w-4 h-4 fill-yellow-400 text-yellow-400\" />\n                  <span className=\"text-sm font-medium\">{vendor.rating}</span>\n                  <span className=\"text-sm text-gray-500\">({vendor.products} products)</span>\n                </div>\n                \n                <Badge variant=\"secondary\" className=\"mb-3\">\n                  {vendor.specialty}\n                </Badge>\n                \n                <div className=\"space-y-2 text-sm text-gray-600 dark:text-gray-400 mb-4\">\n                  <div className=\"flex items-center justify-center space-x-2\">\n                    <Users className=\"w-4 h-4\" />\n                    <span>Total Sales: {vendor.totalSales}</span>\n                  </div>\n                </div>\n                \n                <Button \n                  className=\"w-full bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700\"\n                  size=\"sm\"\n                >\n                  View Vendor\n                </Button>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </section>\n\n      {/* Popular Products */}\n      <section>\n        <div className=\"flex items-center justify-between mb-6\">\n          <h2 className=\"text-2xl font-bold text-gray-900 dark:text-white\">Popular This Week</h2>\n          <div className=\"flex space-x-2\">\n            <Button variant=\"outline\" size=\"sm\">\n              <ChevronLeft className=\"w-4 h-4\" />\n            </Button>\n            <Button variant=\"outline\" size=\"sm\">\n              <ChevronRight className=\"w-4 h-4\" />\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n          {popularProducts.map((product) => (\n            <Card key={product.id} className=\"group overflow-hidden hover:shadow-xl transition-all duration-300 hover:-translate-y-1 border-0 shadow-lg\">\n              <div className=\"relative h-32 bg-gray-200 dark:bg-gray-700 overflow-hidden\">\n                <img\n                  src={product.image}\n                  alt={product.title}\n                  className=\"w-full h-full object-cover group-hover:scale-110 transition-transform duration-300\"\n                />\n                <div className=\"absolute top-2 right-2\">\n                  <Badge className=\"bg-red-500 text-white text-xs\">\n                    🔥 {product.orders} orders\n                  </Badge>\n                </div>\n              </div>\n              \n              <CardContent className=\"p-4\">\n                <h3 className=\"font-semibold text-gray-900 dark:text-white mb-2 line-clamp-2\">\n                  {product.title}\n                </h3>\n                \n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-lg font-bold text-blue-600 dark:text-blue-400\">\n                    {product.price}\n                  </span>\n                  <Button size=\"sm\" className=\"bg-gradient-to-r from-blue-500 to-purple-600\">\n                    Order Now\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </section>\n    </div>\n  );\n}","size_bytes":6015},"client/src/pages/admin/ads.tsx":{"content":"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { StatusBadge } from \"@/components/ui/status-badge\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Megaphone, Eye, BarChart3, Plus, Edit, Trash2, Play, Pause } from \"lucide-react\";\n\nexport default function AdminAds() {\n\n  const sampleAds = [\n    {\n      id: 1,\n      title: \"Premium VPN Services - 70% Off\",\n      description: \"Get secure, anonymous browsing with our premium VPN. Special offer for crypto marketplace users.\",\n      placement: \"Homepage Banner\",\n      status: \"Active\",\n      statusType: \"success\" as const,\n      impressions: 24567,\n      clicks: 234,\n      ctr: \"0.95%\",\n      budget: \"0.05 BTC\",\n      spent: \"0.023 BTC\",\n      startDate: \"2024-03-01\",\n      endDate: \"2024-03-31\"\n    },\n    {\n      id: 2,\n      title: \"Secure Bitcoin Wallet\",\n      description: \"Hardware wallet for ultimate crypto security. Free shipping worldwide.\",\n      placement: \"Sidebar\",\n      status: \"Paused\",\n      statusType: \"warning\" as const,\n      impressions: 8934,\n      clicks: 127,\n      ctr: \"1.42%\",\n      budget: \"0.02 BTC\",\n      spent: \"0.015 BTC\",\n      startDate: \"2024-03-10\",\n      endDate: \"2024-04-10\"\n    },\n    {\n      id: 3,\n      title: \"Anonymous Email Service\",\n      description: \"Protect your privacy with encrypted email. No logs, no tracking.\",\n      placement: \"Category Pages\",\n      status: \"Draft\",\n      statusType: \"muted\" as const,\n      impressions: 0,\n      clicks: 0,\n      ctr: \"0.00%\",\n      budget: \"0.03 BTC\",\n      spent: \"0.000 BTC\",\n      startDate: \"2024-04-01\",\n      endDate: \"2024-04-30\"\n    }\n  ];\n\n  return (\n    \n      <main className=\"flex-1 overflow-y-auto bg-bg p-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between mb-6\">\n          <div>\n            <h1 className=\"text-2xl font-bold text-white\">Advertisement Management</h1>\n            <p className=\"text-gray-300 mt-1\">Create and manage marketplace advertisements</p>\n          </div>\n          <Button className=\"bg-accent text-bg hover:bg-accent-2\">\n            <Plus className=\"w-4 h-4 mr-2\" />\n            Create Ad\n          </Button>\n        </div>\n\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n          <Card className=\"crypto-card\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <Megaphone className=\"w-8 h-8 text-accent mr-4\" />\n                <div>\n                  <p className=\"text-sm text-gray-400\">Active Ads</p>\n                  <p className=\"text-2xl font-bold text-white\">8</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"crypto-card\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <Eye className=\"w-8 h-8 text-success mr-4\" />\n                <div>\n                  <p className=\"text-sm text-gray-400\">Total Impressions</p>\n                  <p className=\"text-2xl font-bold text-white\">1.2M</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"crypto-card\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <BarChart3 className=\"w-8 h-8 text-warning mr-4\" />\n                <div>\n                  <p className=\"text-sm text-gray-400\">Click-Through Rate</p>\n                  <p className=\"text-2xl font-bold text-white\">1.2%</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"crypto-card\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <div className=\"w-8 h-8 bg-accent/20 rounded-lg flex items-center justify-center mr-4\">\n                  <span className=\"text-accent font-bold\">₿</span>\n                </div>\n                <div>\n                  <p className=\"text-sm text-gray-400\">Revenue This Month</p>\n                  <p className=\"text-2xl font-bold text-white\">2.4 BTC</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <Tabs defaultValue=\"active\" className=\"w-full\">\n          <TabsList className=\"bg-surface-2 mb-6\">\n            <TabsTrigger value=\"active\" className=\"text-gray-300 data-[state=active]:text-white\">\n              Active Ads\n            </TabsTrigger>\n            <TabsTrigger value=\"create\" className=\"text-gray-300 data-[state=active]:text-white\">\n              Create New\n            </TabsTrigger>\n            <TabsTrigger value=\"analytics\" className=\"text-gray-300 data-[state=active]:text-white\">\n              Analytics\n            </TabsTrigger>\n            <TabsTrigger value=\"settings\" className=\"text-gray-300 data-[state=active]:text-white\">\n              Settings\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"active\">\n            <Card className=\"crypto-card\">\n              <CardHeader>\n                <CardTitle className=\"text-white\">Current Advertisements</CardTitle>\n              </CardHeader>\n              <CardContent className=\"p-0\">\n                <div className=\"overflow-x-auto\">\n                  <table className=\"w-full\">\n                    <thead className=\"bg-surface-2\">\n                      <tr>\n                        <th className=\"text-left p-4 text-sm font-medium text-gray-300\">Ad Title</th>\n                        <th className=\"text-left p-4 text-sm font-medium text-gray-300\">Placement</th>\n                        <th className=\"text-left p-4 text-sm font-medium text-gray-300\">Status</th>\n                        <th className=\"text-left p-4 text-sm font-medium text-gray-300\">Impressions</th>\n                        <th className=\"text-left p-4 text-sm font-medium text-gray-300\">Clicks</th>\n                        <th className=\"text-left p-4 text-sm font-medium text-gray-300\">CTR</th>\n                        <th className=\"text-left p-4 text-sm font-medium text-gray-300\">Budget</th>\n                        <th className=\"text-left p-4 text-sm font-medium text-gray-300\">Actions</th>\n                      </tr>\n                    </thead>\n                    <tbody className=\"divide-y divide-border\">\n                      {sampleAds.map((ad) => (\n                        <tr key={ad.id} className=\"hover:bg-surface-2/50\" data-testid={`ad-row-${ad.id}`}>\n                          <td className=\"p-4\">\n                            <div>\n                              <p className=\"font-medium text-white\">{ad.title}</p>\n                              <p className=\"text-sm text-gray-400 line-clamp-1\">{ad.description}</p>\n                            </div>\n                          </td>\n                          <td className=\"p-4\">\n                            <Badge variant=\"outline\" className=\"text-gray-300\">\n                              {ad.placement}\n                            </Badge>\n                          </td>\n                          <td className=\"p-4\">\n                            <StatusBadge status={ad.status} type={ad.statusType} />\n                          </td>\n                          <td className=\"p-4 text-white\">{ad.impressions.toLocaleString()}</td>\n                          <td className=\"p-4 text-white\">{ad.clicks}</td>\n                          <td className=\"p-4 text-white\">{ad.ctr}</td>\n                          <td className=\"p-4\">\n                            <div className=\"text-sm\">\n                              <p className=\"text-white font-mono\">{ad.spent}</p>\n                              <p className=\"text-gray-400\">of {ad.budget}</p>\n                            </div>\n                          </td>\n                          <td className=\"p-4\">\n                            <div className=\"flex items-center space-x-2\">\n                              {ad.status === \"Active\" ? (\n                                <Button variant=\"ghost\" size=\"sm\" className=\"text-warning hover:text-yellow-400\" data-testid={`pause-ad-${ad.id}`}>\n                                  <Pause className=\"w-4 h-4\" />\n                                </Button>\n                              ) : ad.status === \"Paused\" ? (\n                                <Button variant=\"ghost\" size=\"sm\" className=\"text-success hover:text-green-400\" data-testid={`resume-ad-${ad.id}`}>\n                                  <Play className=\"w-4 h-4\" />\n                                </Button>\n                              ) : null}\n                              <Button variant=\"ghost\" size=\"sm\" className=\"text-gray-400 hover:text-white\" data-testid={`edit-ad-${ad.id}`}>\n                                <Edit className=\"w-4 h-4\" />\n                              </Button>\n                              <Button variant=\"ghost\" size=\"sm\" className=\"text-gray-400 hover:text-white\" data-testid={`view-ad-${ad.id}`}>\n                                <Eye className=\"w-4 h-4\" />\n                              </Button>\n                              <Button variant=\"ghost\" size=\"sm\" className=\"text-danger hover:text-red-400\" data-testid={`delete-ad-${ad.id}`}>\n                                <Trash2 className=\"w-4 h-4\" />\n                              </Button>\n                            </div>\n                          </td>\n                        </tr>\n                      ))}\n                    </tbody>\n                  </table>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"create\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              <Card className=\"crypto-card\">\n                <CardHeader>\n                  <CardTitle className=\"text-white\">Ad Content</CardTitle>\n                </CardHeader>\n                <CardContent className=\"p-6\">\n                  <div className=\"space-y-6\">\n                    <div>\n                      <Label htmlFor=\"adTitle\" className=\"text-white\">Ad Title</Label>\n                      <Input \n                        id=\"adTitle\"\n                        placeholder=\"Enter compelling ad title...\"\n                        className=\"mt-2 bg-surface-2 border-border text-white\"\n                        data-testid=\"ad-title-input\"\n                      />\n                    </div>\n                    \n                    <div>\n                      <Label htmlFor=\"adDescription\" className=\"text-white\">Description</Label>\n                      <Textarea \n                        id=\"adDescription\"\n                        placeholder=\"Describe your product or service...\"\n                        className=\"mt-2 bg-surface-2 border-border text-white\"\n                        rows={4}\n                        data-testid=\"ad-description-input\"\n                      />\n                    </div>\n                    \n                    <div>\n                      <Label htmlFor=\"adUrl\" className=\"text-white\">Target URL</Label>\n                      <Input \n                        id=\"adUrl\"\n                        placeholder=\"https://example.com\"\n                        className=\"mt-2 bg-surface-2 border-border text-white\"\n                        data-testid=\"ad-url-input\"\n                      />\n                    </div>\n                    \n                    <div>\n                      <Label htmlFor=\"adImage\" className=\"text-white\">Ad Image</Label>\n                      <div className=\"mt-2 border-2 border-dashed border-border rounded-lg p-6 text-center\">\n                        <p className=\"text-gray-400\">Upload ad image (recommended: 728x90 px)</p>\n                        <Button variant=\"outline\" className=\"mt-2 border-border text-gray-300\" data-testid=\"upload-ad-image\">\n                          Choose File\n                        </Button>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"crypto-card\">\n                <CardHeader>\n                  <CardTitle className=\"text-white\">Targeting & Budget</CardTitle>\n                </CardHeader>\n                <CardContent className=\"p-6\">\n                  <div className=\"space-y-6\">\n                    <div>\n                      <Label htmlFor=\"placement\" className=\"text-white\">Ad Placement</Label>\n                      <Select>\n                        <SelectTrigger className=\"mt-2 bg-surface-2 border-border text-white\">\n                          <SelectValue placeholder=\"Select placement\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"homepage\">Homepage Banner</SelectItem>\n                          <SelectItem value=\"sidebar\">Sidebar</SelectItem>\n                          <SelectItem value=\"category\">Category Pages</SelectItem>\n                          <SelectItem value=\"search\">Search Results</SelectItem>\n                          <SelectItem value=\"footer\">Footer</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                    \n                    <div>\n                      <Label htmlFor=\"budget\" className=\"text-white\">Budget (BTC)</Label>\n                      <Input \n                        id=\"budget\"\n                        type=\"number\"\n                        step=\"0.001\"\n                        placeholder=\"0.01\"\n                        className=\"mt-2 bg-surface-2 border-border text-white\"\n                        data-testid=\"ad-budget-input\"\n                      />\n                    </div>\n                    \n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div>\n                        <Label htmlFor=\"startDate\" className=\"text-white\">Start Date</Label>\n                        <Input \n                          id=\"startDate\"\n                          type=\"date\"\n                          className=\"mt-2 bg-surface-2 border-border text-white\"\n                          data-testid=\"ad-start-date\"\n                        />\n                      </div>\n                      <div>\n                        <Label htmlFor=\"endDate\" className=\"text-white\">End Date</Label>\n                        <Input \n                          id=\"endDate\"\n                          type=\"date\"\n                          className=\"mt-2 bg-surface-2 border-border text-white\"\n                          data-testid=\"ad-end-date\"\n                        />\n                      </div>\n                    </div>\n                    \n                    <div>\n                      <Label className=\"text-white\">Target Audience</Label>\n                      <div className=\"mt-3 space-y-3\">\n                        <div className=\"flex items-center space-x-2\">\n                          <input type=\"checkbox\" id=\"allUsers\" className=\"rounded\" />\n                          <Label htmlFor=\"allUsers\" className=\"text-gray-300\">All Users</Label>\n                        </div>\n                        <div className=\"flex items-center space-x-2\">\n                          <input type=\"checkbox\" id=\"vendors\" className=\"rounded\" />\n                          <Label htmlFor=\"vendors\" className=\"text-gray-300\">Vendors Only</Label>\n                        </div>\n                        <div className=\"flex items-center space-x-2\">\n                          <input type=\"checkbox\" id=\"buyers\" className=\"rounded\" />\n                          <Label htmlFor=\"buyers\" className=\"text-gray-300\">Buyers Only</Label>\n                        </div>\n                      </div>\n                    </div>\n                    \n                    <div className=\"pt-4\">\n                      <Button className=\"w-full bg-accent text-bg hover:bg-accent-2\" data-testid=\"create-ad-button\">\n                        Create Advertisement\n                      </Button>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"analytics\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              <Card className=\"crypto-card\">\n                <CardHeader>\n                  <CardTitle className=\"text-white\">Performance Overview</CardTitle>\n                </CardHeader>\n                <CardContent className=\"p-6\">\n                  <div className=\"space-y-6\">\n                    <div className=\"text-center p-6 bg-surface-2 rounded-xl\">\n                      <h3 className=\"text-3xl font-bold text-white\">1.2M</h3>\n                      <p className=\"text-gray-400\">Total Impressions</p>\n                      <p className=\"text-sm text-success mt-2\">↑ 15% from last month</p>\n                    </div>\n                    \n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div className=\"text-center p-4 bg-surface-2 rounded-lg\">\n                        <h4 className=\"text-xl font-bold text-white\">14.8K</h4>\n                        <p className=\"text-sm text-gray-400\">Total Clicks</p>\n                      </div>\n                      <div className=\"text-center p-4 bg-surface-2 rounded-lg\">\n                        <h4 className=\"text-xl font-bold text-white\">1.23%</h4>\n                        <p className=\"text-sm text-gray-400\">Avg CTR</p>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"crypto-card\">\n                <CardHeader>\n                  <CardTitle className=\"text-white\">Top Performing Ads</CardTitle>\n                </CardHeader>\n                <CardContent className=\"p-6\">\n                  <div className=\"space-y-4\">\n                    {sampleAds.filter(ad => ad.status === \"Active\").map((ad) => (\n                      <div key={ad.id} className=\"p-4 bg-surface-2 rounded-lg\">\n                        <h4 className=\"font-medium text-white mb-2\">{ad.title}</h4>\n                        <div className=\"grid grid-cols-3 gap-2 text-sm\">\n                          <div>\n                            <p className=\"text-gray-400\">Impressions</p>\n                            <p className=\"text-white\">{ad.impressions.toLocaleString()}</p>\n                          </div>\n                          <div>\n                            <p className=\"text-gray-400\">Clicks</p>\n                            <p className=\"text-white\">{ad.clicks}</p>\n                          </div>\n                          <div>\n                            <p className=\"text-gray-400\">CTR</p>\n                            <p className=\"text-accent\">{ad.ctr}</p>\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"settings\">\n            <Card className=\"crypto-card\">\n              <CardHeader>\n                <CardTitle className=\"text-white\">Advertisement Settings</CardTitle>\n              </CardHeader>\n              <CardContent className=\"p-6\">\n                <div className=\"space-y-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-white font-medium\">Enable Advertisements</p>\n                      <p className=\"text-sm text-gray-400\">Allow ads to be displayed on the marketplace</p>\n                    </div>\n                    <Switch defaultChecked data-testid=\"enable-ads-toggle\" />\n                  </div>\n                  \n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-white font-medium\">Auto-approve Ads</p>\n                      <p className=\"text-sm text-gray-400\">Automatically approve ads after payment</p>\n                    </div>\n                    <Switch data-testid=\"auto-approve-toggle\" />\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"maxDailyBudget\" className=\"text-white\">Maximum Daily Budget (BTC)</Label>\n                    <Input \n                      id=\"maxDailyBudget\"\n                      type=\"number\"\n                      step=\"0.001\"\n                      defaultValue=\"0.1\"\n                      className=\"mt-2 bg-surface-2 border-border text-white\"\n                      data-testid=\"max-daily-budget\"\n                    />\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"reviewTime\" className=\"text-white\">Ad Review Time (hours)</Label>\n                    <Input \n                      id=\"reviewTime\"\n                      type=\"number\"\n                      defaultValue=\"24\"\n                      className=\"mt-2 bg-surface-2 border-border text-white\"\n                      data-testid=\"review-time\"\n                    />\n                  </div>\n                  \n                  <div className=\"pt-4\">\n                    <Button className=\"bg-accent text-bg hover:bg-accent-2\" data-testid=\"save-ad-settings\">\n                      Save Settings\n                    </Button>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </main>\n    \n  );\n}","size_bytes":22052},"client/src/pages/admin/alerts.tsx":{"content":"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { StatusBadge } from \"@/components/ui/status-badge\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Bell, AlertTriangle, Info, CheckCircle, X, Plus, Settings } from \"lucide-react\";\n\nexport default function AdminAlerts() {\n\n  const systemAlerts = [\n    {\n      id: 1,\n      type: \"Critical\",\n      title: \"BTC Node Synchronization Warning\",\n      message: \"Bitcoin node is 2 blocks behind. Sync in progress.\",\n      priority: \"High\",\n      priorityType: \"danger\" as const,\n      timestamp: \"5 min ago\",\n      status: \"Active\",\n      statusType: \"danger\" as const,\n      category: \"System\",\n      resolved: false\n    },\n    {\n      id: 2,\n      type: \"Info\",\n      title: \"New Vendor Application\",\n      message: \"DigitalServices submitted a vendor application for review.\",\n      priority: \"Medium\",\n      priorityType: \"warning\" as const,\n      timestamp: \"1 hour ago\",\n      status: \"Active\",\n      statusType: \"warning\" as const,\n      category: \"Vendor\",\n      resolved: false\n    },\n    {\n      id: 3,\n      type: \"Warning\",\n      title: \"Low Escrow Balance\",\n      message: \"BTC escrow wallet balance is below 5 BTC threshold.\",\n      priority: \"Medium\",\n      priorityType: \"warning\" as const,\n      timestamp: \"2 hours ago\",\n      status: \"Active\",\n      statusType: \"warning\" as const,\n      category: \"Finance\",\n      resolved: false\n    },\n    {\n      id: 4,\n      type: \"Success\",\n      title: \"System Backup Completed\",\n      message: \"Daily backup completed successfully. All data secured.\",\n      priority: \"Low\",\n      priorityType: \"success\" as const,\n      timestamp: \"6 hours ago\",\n      status: \"Resolved\",\n      statusType: \"success\" as const,\n      category: \"System\",\n      resolved: true\n    },\n    {\n      id: 5,\n      type: \"Critical\",\n      title: \"Dispute Requires Attention\",\n      message: \"Order #ORD-2844 dispute has been open for 24+ hours.\",\n      priority: \"High\",\n      priorityType: \"danger\" as const,\n      timestamp: \"1 day ago\",\n      status: \"Active\",\n      statusType: \"danger\" as const,\n      category: \"Orders\",\n      resolved: false\n    }\n  ];\n\n  const alertSettings = [\n    {\n      id: 1,\n      name: \"Node Connectivity\",\n      description: \"Alert when blockchain nodes go offline or fall behind\",\n      enabled: true,\n      threshold: \"2 blocks\",\n      recipients: [\"admin@marketplace.onion\"]\n    },\n    {\n      id: 2,\n      name: \"Vendor Applications\",\n      description: \"Notify when new vendor applications are submitted\",\n      enabled: true,\n      threshold: \"Immediate\",\n      recipients: [\"vendor-review@marketplace.onion\"]\n    },\n    {\n      id: 3,\n      name: \"Dispute Escalation\",\n      description: \"Alert when disputes remain unresolved\",\n      enabled: true,\n      threshold: \"24 hours\",\n      recipients: [\"disputes@marketplace.onion\"]\n    },\n    {\n      id: 4,\n      name: \"Low Balance Warning\",\n      description: \"Warn when escrow balances drop below threshold\",\n      enabled: true,\n      threshold: \"5 BTC / 50 XMR\",\n      recipients: [\"finance@marketplace.onion\"]\n    },\n    {\n      id: 5,\n      name: \"Security Incidents\",\n      description: \"Critical security alerts and failed login attempts\",\n      enabled: true,\n      threshold: \"5 failed attempts\",\n      recipients: [\"security@marketplace.onion\"]\n    }\n  ];\n\n  return (\n    \n      <main className=\"flex-1 overflow-y-auto bg-bg p-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between mb-6\">\n          <div>\n            <h1 className=\"text-2xl font-bold text-white\">Alert Management</h1>\n            <p className=\"text-gray-300 mt-1\">Monitor system alerts and configure notifications</p>\n          </div>\n          <Button className=\"bg-accent text-bg hover:bg-accent-2\">\n            <Plus className=\"w-4 h-4 mr-2\" />\n            Create Alert\n          </Button>\n        </div>\n\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n          <Card className=\"crypto-card\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <AlertTriangle className=\"w-8 h-8 text-danger mr-4\" />\n                <div>\n                  <p className=\"text-sm text-gray-400\">Active Alerts</p>\n                  <p className=\"text-2xl font-bold text-white\">5</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"crypto-card\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <div className=\"w-8 h-8 bg-danger/20 rounded-lg flex items-center justify-center mr-4\">\n                  <AlertTriangle className=\"w-5 h-5 text-danger\" />\n                </div>\n                <div>\n                  <p className=\"text-sm text-gray-400\">Critical</p>\n                  <p className=\"text-2xl font-bold text-white\">2</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"crypto-card\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <Bell className=\"w-8 h-8 text-warning mr-4\" />\n                <div>\n                  <p className=\"text-sm text-gray-400\">Warnings</p>\n                  <p className=\"text-2xl font-bold text-white\">2</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"crypto-card\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <CheckCircle className=\"w-8 h-8 text-success mr-4\" />\n                <div>\n                  <p className=\"text-sm text-gray-400\">Resolved Today</p>\n                  <p className=\"text-2xl font-bold text-white\">12</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <Tabs defaultValue=\"active\" className=\"w-full\">\n          <TabsList className=\"bg-surface-2 mb-6\">\n            <TabsTrigger value=\"active\" className=\"text-gray-300 data-[state=active]:text-white\">\n              Active Alerts\n            </TabsTrigger>\n            <TabsTrigger value=\"create\" className=\"text-gray-300 data-[state=active]:text-white\">\n              Create Alert\n            </TabsTrigger>\n            <TabsTrigger value=\"settings\" className=\"text-gray-300 data-[state=active]:text-white\">\n              Alert Settings\n            </TabsTrigger>\n            <TabsTrigger value=\"history\" className=\"text-gray-300 data-[state=active]:text-white\">\n              Alert History\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"active\">\n            <div className=\"space-y-4\">\n              {systemAlerts.filter(alert => !alert.resolved).map((alert) => (\n                <Card key={alert.id} className=\"crypto-card\" data-testid={`alert-${alert.id}`}>\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center space-x-3 mb-3\">\n                          {alert.type === \"Critical\" && <AlertTriangle className=\"w-5 h-5 text-danger\" />}\n                          {alert.type === \"Warning\" && <Bell className=\"w-5 h-5 text-warning\" />}\n                          {alert.type === \"Info\" && <Info className=\"w-5 h-5 text-accent\" />}\n                          {alert.type === \"Success\" && <CheckCircle className=\"w-5 h-5 text-success\" />}\n                          \n                          <h3 className=\"text-lg font-semibold text-white\">{alert.title}</h3>\n                          <StatusBadge status={alert.priority} type={alert.priorityType} />\n                          <Badge variant=\"outline\" className=\"text-gray-300\">\n                            {alert.category}\n                          </Badge>\n                        </div>\n                        \n                        <p className=\"text-gray-300 mb-3\">{alert.message}</p>\n                        \n                        <div className=\"flex items-center space-x-4 text-sm text-gray-400\">\n                          <span>{alert.timestamp}</span>\n                          <span>•</span>\n                          <span>Priority: {alert.priority}</span>\n                          <span>•</span>\n                          <span>Category: {alert.category}</span>\n                        </div>\n                      </div>\n                      \n                      <div className=\"flex items-center space-x-2 ml-6\">\n                        <Button variant=\"outline\" className=\"border-border text-gray-300 hover:bg-surface-2\" data-testid={`view-alert-${alert.id}`}>\n                          View Details\n                        </Button>\n                        <Button className=\"bg-success text-white hover:bg-green-600\" data-testid={`resolve-alert-${alert.id}`}>\n                          <CheckCircle className=\"w-4 h-4 mr-2\" />\n                          Resolve\n                        </Button>\n                        <Button variant=\"ghost\" className=\"text-danger hover:text-red-400\" data-testid={`dismiss-alert-${alert.id}`}>\n                          <X className=\"w-4 h-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n              \n              {systemAlerts.filter(alert => !alert.resolved).length === 0 && (\n                <Card className=\"crypto-card\">\n                  <CardContent className=\"p-12 text-center\">\n                    <CheckCircle className=\"w-12 h-12 text-success mx-auto mb-4\" />\n                    <p className=\"text-gray-400\">No active alerts</p>\n                    <p className=\"text-sm text-gray-500 mt-2\">All systems operating normally</p>\n                  </CardContent>\n                </Card>\n              )}\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"create\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              <Card className=\"crypto-card\">\n                <CardHeader>\n                  <CardTitle className=\"text-white\">Alert Details</CardTitle>\n                </CardHeader>\n                <CardContent className=\"p-6\">\n                  <div className=\"space-y-6\">\n                    <div>\n                      <Label htmlFor=\"alertTitle\" className=\"text-white\">Alert Title</Label>\n                      <Input \n                        id=\"alertTitle\"\n                        placeholder=\"Enter alert title...\"\n                        className=\"mt-2 bg-surface-2 border-border text-white\"\n                        data-testid=\"alert-title-input\"\n                      />\n                    </div>\n                    \n                    <div>\n                      <Label htmlFor=\"alertMessage\" className=\"text-white\">Message</Label>\n                      <Textarea \n                        id=\"alertMessage\"\n                        placeholder=\"Describe the alert...\"\n                        className=\"mt-2 bg-surface-2 border-border text-white\"\n                        rows={4}\n                        data-testid=\"alert-message-input\"\n                      />\n                    </div>\n                    \n                    <div>\n                      <Label htmlFor=\"alertType\" className=\"text-white\">Alert Type</Label>\n                      <Select>\n                        <SelectTrigger className=\"mt-2 bg-surface-2 border-border text-white\">\n                          <SelectValue placeholder=\"Select alert type\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"critical\">Critical</SelectItem>\n                          <SelectItem value=\"warning\">Warning</SelectItem>\n                          <SelectItem value=\"info\">Info</SelectItem>\n                          <SelectItem value=\"success\">Success</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                    \n                    <div>\n                      <Label htmlFor=\"alertPriority\" className=\"text-white\">Priority</Label>\n                      <Select>\n                        <SelectTrigger className=\"mt-2 bg-surface-2 border-border text-white\">\n                          <SelectValue placeholder=\"Select priority\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"high\">High</SelectItem>\n                          <SelectItem value=\"medium\">Medium</SelectItem>\n                          <SelectItem value=\"low\">Low</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"crypto-card\">\n                <CardHeader>\n                  <CardTitle className=\"text-white\">Alert Configuration</CardTitle>\n                </CardHeader>\n                <CardContent className=\"p-6\">\n                  <div className=\"space-y-6\">\n                    <div>\n                      <Label htmlFor=\"alertCategory\" className=\"text-white\">Category</Label>\n                      <Select>\n                        <SelectTrigger className=\"mt-2 bg-surface-2 border-border text-white\">\n                          <SelectValue placeholder=\"Select category\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"system\">System</SelectItem>\n                          <SelectItem value=\"security\">Security</SelectItem>\n                          <SelectItem value=\"finance\">Finance</SelectItem>\n                          <SelectItem value=\"vendor\">Vendor</SelectItem>\n                          <SelectItem value=\"orders\">Orders</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                    \n                    <div>\n                      <Label htmlFor=\"recipients\" className=\"text-white\">Recipients</Label>\n                      <Input \n                        id=\"recipients\"\n                        placeholder=\"admin@marketplace.onion\"\n                        className=\"mt-2 bg-surface-2 border-border text-white\"\n                        data-testid=\"alert-recipients-input\"\n                      />\n                      <p className=\"text-sm text-gray-400 mt-1\">Separate multiple emails with commas</p>\n                    </div>\n                    \n                    <div>\n                      <Label className=\"text-white\">Auto-resolve</Label>\n                      <div className=\"mt-3 space-y-2\">\n                        <div className=\"flex items-center space-x-2\">\n                          <input type=\"radio\" id=\"manual\" name=\"resolve\" value=\"manual\" defaultChecked />\n                          <Label htmlFor=\"manual\" className=\"text-gray-300\">Manual resolution only</Label>\n                        </div>\n                        <div className=\"flex items-center space-x-2\">\n                          <input type=\"radio\" id=\"timer\" name=\"resolve\" value=\"timer\" />\n                          <Label htmlFor=\"timer\" className=\"text-gray-300\">Auto-resolve after 24 hours</Label>\n                        </div>\n                        <div className=\"flex items-center space-x-2\">\n                          <input type=\"radio\" id=\"condition\" name=\"resolve\" value=\"condition\" />\n                          <Label htmlFor=\"condition\" className=\"text-gray-300\">Resolve when condition met</Label>\n                        </div>\n                      </div>\n                    </div>\n                    \n                    <div className=\"pt-4\">\n                      <Button className=\"w-full bg-accent text-bg hover:bg-accent-2\" data-testid=\"create-alert-button\">\n                        Create Alert\n                      </Button>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"settings\">\n            <Card className=\"crypto-card\">\n              <CardHeader>\n                <CardTitle className=\"text-white\">Alert Notification Settings</CardTitle>\n              </CardHeader>\n              <CardContent className=\"p-6\">\n                <div className=\"space-y-6\">\n                  {alertSettings.map((setting) => (\n                    <div key={setting.id} className=\"border border-border rounded-lg p-4\" data-testid={`alert-setting-${setting.id}`}>\n                      <div className=\"flex items-start justify-between\">\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center space-x-3 mb-2\">\n                            <h3 className=\"text-lg font-medium text-white\">{setting.name}</h3>\n                            <StatusBadge \n                              status={setting.enabled ? \"Enabled\" : \"Disabled\"} \n                              type={setting.enabled ? \"success\" : \"muted\"} \n                            />\n                          </div>\n                          <p className=\"text-gray-300 mb-3\">{setting.description}</p>\n                          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm\">\n                            <div>\n                              <p className=\"text-gray-400\">Threshold</p>\n                              <p className=\"text-white\">{setting.threshold}</p>\n                            </div>\n                            <div>\n                              <p className=\"text-gray-400\">Recipients</p>\n                              <p className=\"text-white\">{setting.recipients.join(\", \")}</p>\n                            </div>\n                          </div>\n                        </div>\n                        <div className=\"flex items-center space-x-2 ml-6\">\n                          <Button variant=\"outline\" size=\"sm\" className=\"border-border text-gray-300 hover:bg-surface-2\" data-testid={`edit-setting-${setting.id}`}>\n                            <Settings className=\"w-4 h-4\" />\n                          </Button>\n                          <Button \n                            variant={setting.enabled ? \"outline\" : \"default\"}\n                            size=\"sm\" \n                            className={setting.enabled ? \"border-border text-gray-300\" : \"bg-accent text-bg\"}\n                            data-testid={`toggle-setting-${setting.id}`}\n                          >\n                            {setting.enabled ? \"Disable\" : \"Enable\"}\n                          </Button>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"history\">\n            <Card className=\"crypto-card\">\n              <CardHeader>\n                <CardTitle className=\"text-white\">Resolved Alerts</CardTitle>\n              </CardHeader>\n              <CardContent className=\"p-6\">\n                <div className=\"space-y-4\">\n                  {systemAlerts.filter(alert => alert.resolved).map((alert) => (\n                    <div key={alert.id} className=\"p-4 bg-surface-2 rounded-lg opacity-75\" data-testid={`resolved-alert-${alert.id}`}>\n                      <div className=\"flex items-center space-x-3\">\n                        <CheckCircle className=\"w-5 h-5 text-success\" />\n                        <div className=\"flex-1\">\n                          <h4 className=\"font-medium text-white\">{alert.title}</h4>\n                          <p className=\"text-sm text-gray-400\">{alert.message}</p>\n                          <p className=\"text-xs text-gray-500 mt-1\">Resolved {alert.timestamp}</p>\n                        </div>\n                        <Badge variant=\"outline\" className=\"text-gray-300\">\n                          {alert.category}\n                        </Badge>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </main>\n    \n  );\n}","size_bytes":20852},"client/src/pages/admin/branding.tsx":{"content":"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Palette, Upload, Save, RotateCcw, Eye, Download } from \"lucide-react\";\n\nexport default function AdminBranding() {\n\n  const colorThemes = [\n    { name: \"Default Blue\", primary: \"#22D3EE\", secondary: \"#0B0F14\", accent: \"#1E40AF\" },\n    { name: \"Purple Night\", primary: \"#8B5CF6\", secondary: \"#0F0A1A\", accent: \"#6D28D9\" },\n    { name: \"Green Matrix\", primary: \"#10B981\", secondary: \"#0A0F0A\", accent: \"#059669\" },\n    { name: \"Orange Sunset\", primary: \"#F59E0B\", secondary: \"#1A0F0A\", accent: \"#D97706\" },\n    { name: \"Red Alert\", primary: \"#EF4444\", secondary: \"#1A0A0A\", accent: \"#DC2626\" }\n  ];\n\n  return (\n    \n      <main className=\"flex-1 overflow-y-auto bg-bg p-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between mb-6\">\n          <div>\n            <h1 className=\"text-2xl font-bold text-white\">Branding & Customization</h1>\n            <p className=\"text-gray-300 mt-1\">Customize your marketplace appearance and branding</p>\n          </div>\n          <div className=\"flex space-x-3\">\n            <Button variant=\"outline\" className=\"border-border text-gray-300 hover:bg-surface-2\">\n              <Eye className=\"w-4 h-4 mr-2\" />\n              Preview\n            </Button>\n            <Button className=\"bg-accent text-bg hover:bg-accent-2\">\n              <Save className=\"w-4 h-4 mr-2\" />\n              Save Changes\n            </Button>\n          </div>\n        </div>\n\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n          <Card className=\"crypto-card\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <Palette className=\"w-8 h-8 text-accent mr-4\" />\n                <div>\n                  <p className=\"text-sm text-gray-400\">Active Theme</p>\n                  <p className=\"text-2xl font-bold text-white\">Dark</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"crypto-card\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <div className=\"w-8 h-8 bg-success/20 rounded-lg flex items-center justify-center mr-4\">\n                  <Upload className=\"w-5 h-5 text-success\" />\n                </div>\n                <div>\n                  <p className=\"text-sm text-gray-400\">Custom Assets</p>\n                  <p className=\"text-2xl font-bold text-white\">5</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"crypto-card\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <div className=\"w-8 h-8 bg-warning/20 rounded-lg flex items-center justify-center mr-4\">\n                  <span className=\"text-warning font-bold\">%</span>\n                </div>\n                <div>\n                  <p className=\"text-sm text-gray-400\">Customization</p>\n                  <p className=\"text-2xl font-bold text-white\">85%</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"crypto-card\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <Download className=\"w-8 h-8 text-accent mr-4\" />\n                <div>\n                  <p className=\"text-sm text-gray-400\">Last Backup</p>\n                  <p className=\"text-2xl font-bold text-white\">Today</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <Tabs defaultValue=\"general\" className=\"w-full\">\n          <TabsList className=\"bg-surface-2 mb-6\">\n            <TabsTrigger value=\"general\" className=\"text-gray-300 data-[state=active]:text-white\">\n              General Settings\n            </TabsTrigger>\n            <TabsTrigger value=\"colors\" className=\"text-gray-300 data-[state=active]:text-white\">\n              Colors & Theme\n            </TabsTrigger>\n            <TabsTrigger value=\"assets\" className=\"text-gray-300 data-[state=active]:text-white\">\n              Logo & Assets\n            </TabsTrigger>\n            <TabsTrigger value=\"pages\" className=\"text-gray-300 data-[state=active]:text-white\">\n              Custom Pages\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"general\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              <Card className=\"crypto-card\">\n                <CardHeader>\n                  <CardTitle className=\"text-white\">Site Information</CardTitle>\n                </CardHeader>\n                <CardContent className=\"p-6\">\n                  <div className=\"space-y-6\">\n                    <div>\n                      <Label htmlFor=\"siteName\" className=\"text-white\">Site Name</Label>\n                      <Input \n                        id=\"siteName\"\n                        defaultValue=\"CryptoMarket\"\n                        className=\"mt-2 bg-surface-2 border-border text-white\"\n                        data-testid=\"site-name-input\"\n                      />\n                    </div>\n                    \n                    <div>\n                      <Label htmlFor=\"siteTagline\" className=\"text-white\">Tagline</Label>\n                      <Input \n                        id=\"siteTagline\"\n                        defaultValue=\"Anonymous Digital Marketplace\"\n                        className=\"mt-2 bg-surface-2 border-border text-white\"\n                        data-testid=\"site-tagline-input\"\n                      />\n                    </div>\n                    \n                    <div>\n                      <Label htmlFor=\"siteDescription\" className=\"text-white\">Description</Label>\n                      <Textarea \n                        id=\"siteDescription\"\n                        defaultValue=\"Secure, anonymous marketplace for digital goods and services. Privacy-focused trading with cryptocurrency payments.\"\n                        className=\"mt-2 bg-surface-2 border-border text-white\"\n                        rows={4}\n                        data-testid=\"site-description-input\"\n                      />\n                    </div>\n                    \n                    <div>\n                      <Label htmlFor=\"supportEmail\" className=\"text-white\">Support Email</Label>\n                      <Input \n                        id=\"supportEmail\"\n                        defaultValue=\"support@cryptomarket.onion\"\n                        className=\"mt-2 bg-surface-2 border-border text-white\"\n                        data-testid=\"support-email-input\"\n                      />\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"crypto-card\">\n                <CardHeader>\n                  <CardTitle className=\"text-white\">Display Settings</CardTitle>\n                </CardHeader>\n                <CardContent className=\"p-6\">\n                  <div className=\"space-y-6\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"text-white font-medium\">Dark Mode Default</p>\n                        <p className=\"text-sm text-gray-400\">Default to dark theme for new visitors</p>\n                      </div>\n                      <Switch defaultChecked data-testid=\"dark-mode-toggle\" />\n                    </div>\n                    \n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"text-white font-medium\">Show Marketplace Stats</p>\n                        <p className=\"text-sm text-gray-400\">Display user counts and listing stats on homepage</p>\n                      </div>\n                      <Switch defaultChecked data-testid=\"stats-toggle\" />\n                    </div>\n                    \n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"text-white font-medium\">Enable Custom Footer</p>\n                        <p className=\"text-sm text-gray-400\">Show custom footer with additional links</p>\n                      </div>\n                      <Switch data-testid=\"footer-toggle\" />\n                    </div>\n                    \n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"text-white font-medium\">Maintenance Mode</p>\n                        <p className=\"text-sm text-gray-400\">Display maintenance page to public users</p>\n                      </div>\n                      <Switch data-testid=\"maintenance-toggle\" />\n                    </div>\n                    \n                    <div>\n                      <Label htmlFor=\"timezone\" className=\"text-white\">Timezone</Label>\n                      <select \n                        id=\"timezone\"\n                        className=\"mt-2 w-full bg-surface-2 border border-border rounded-md px-3 py-2 text-white\"\n                        data-testid=\"timezone-select\"\n                      >\n                        <option value=\"UTC\">UTC</option>\n                        <option value=\"America/New_York\">Eastern Time</option>\n                        <option value=\"America/Los_Angeles\">Pacific Time</option>\n                        <option value=\"Europe/London\">London</option>\n                        <option value=\"Europe/Berlin\">Berlin</option>\n                        <option value=\"Asia/Tokyo\">Tokyo</option>\n                      </select>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"colors\">\n            <div className=\"space-y-6\">\n              <Card className=\"crypto-card\">\n                <CardHeader>\n                  <CardTitle className=\"text-white\">Color Theme</CardTitle>\n                </CardHeader>\n                <CardContent className=\"p-6\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-3 lg:grid-cols-5 gap-4 mb-8\">\n                    {colorThemes.map((theme, index) => (\n                      <div \n                        key={index} \n                        className=\"border border-border rounded-lg p-4 cursor-pointer hover:border-accent transition-colors\"\n                        data-testid={`color-theme-${index}`}\n                      >\n                        <div className=\"flex space-x-2 mb-3\">\n                          <div \n                            className=\"w-6 h-6 rounded\"\n                            style={{ backgroundColor: theme.primary }}\n                          ></div>\n                          <div \n                            className=\"w-6 h-6 rounded\"\n                            style={{ backgroundColor: theme.secondary }}\n                          ></div>\n                          <div \n                            className=\"w-6 h-6 rounded\"\n                            style={{ backgroundColor: theme.accent }}\n                          ></div>\n                        </div>\n                        <p className=\"text-sm text-white font-medium\">{theme.name}</p>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"crypto-card\">\n                <CardHeader>\n                  <CardTitle className=\"text-white\">Custom Colors</CardTitle>\n                </CardHeader>\n                <CardContent className=\"p-6\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                    <div>\n                      <Label htmlFor=\"primaryColor\" className=\"text-white\">Primary Color</Label>\n                      <div className=\"mt-2 flex space-x-2\">\n                        <Input \n                          id=\"primaryColor\"\n                          type=\"color\"\n                          defaultValue=\"#22D3EE\"\n                          className=\"w-16 h-10 p-1 bg-surface-2 border-border\"\n                          data-testid=\"primary-color-picker\"\n                        />\n                        <Input \n                          defaultValue=\"#22D3EE\"\n                          className=\"flex-1 bg-surface-2 border-border text-white\"\n                          data-testid=\"primary-color-input\"\n                        />\n                      </div>\n                    </div>\n                    \n                    <div>\n                      <Label htmlFor=\"accentColor\" className=\"text-white\">Accent Color</Label>\n                      <div className=\"mt-2 flex space-x-2\">\n                        <Input \n                          id=\"accentColor\"\n                          type=\"color\"\n                          defaultValue=\"#1E40AF\"\n                          className=\"w-16 h-10 p-1 bg-surface-2 border-border\"\n                          data-testid=\"accent-color-picker\"\n                        />\n                        <Input \n                          defaultValue=\"#1E40AF\"\n                          className=\"flex-1 bg-surface-2 border-border text-white\"\n                          data-testid=\"accent-color-input\"\n                        />\n                      </div>\n                    </div>\n                    \n                    <div>\n                      <Label htmlFor=\"backgroundColor\" className=\"text-white\">Background Color</Label>\n                      <div className=\"mt-2 flex space-x-2\">\n                        <Input \n                          id=\"backgroundColor\"\n                          type=\"color\"\n                          defaultValue=\"#0B0F14\"\n                          className=\"w-16 h-10 p-1 bg-surface-2 border-border\"\n                          data-testid=\"background-color-picker\"\n                        />\n                        <Input \n                          defaultValue=\"#0B0F14\"\n                          className=\"flex-1 bg-surface-2 border-border text-white\"\n                          data-testid=\"background-color-input\"\n                        />\n                      </div>\n                    </div>\n                    \n                    <div>\n                      <Label htmlFor=\"successColor\" className=\"text-white\">Success Color</Label>\n                      <div className=\"mt-2 flex space-x-2\">\n                        <Input \n                          id=\"successColor\"\n                          type=\"color\"\n                          defaultValue=\"#10B981\"\n                          className=\"w-16 h-10 p-1 bg-surface-2 border-border\"\n                          data-testid=\"success-color-picker\"\n                        />\n                        <Input \n                          defaultValue=\"#10B981\"\n                          className=\"flex-1 bg-surface-2 border-border text-white\"\n                          data-testid=\"success-color-input\"\n                        />\n                      </div>\n                    </div>\n                    \n                    <div>\n                      <Label htmlFor=\"warningColor\" className=\"text-white\">Warning Color</Label>\n                      <div className=\"mt-2 flex space-x-2\">\n                        <Input \n                          id=\"warningColor\"\n                          type=\"color\"\n                          defaultValue=\"#F59E0B\"\n                          className=\"w-16 h-10 p-1 bg-surface-2 border-border\"\n                          data-testid=\"warning-color-picker\"\n                        />\n                        <Input \n                          defaultValue=\"#F59E0B\"\n                          className=\"flex-1 bg-surface-2 border-border text-white\"\n                          data-testid=\"warning-color-input\"\n                        />\n                      </div>\n                    </div>\n                    \n                    <div>\n                      <Label htmlFor=\"dangerColor\" className=\"text-white\">Danger Color</Label>\n                      <div className=\"mt-2 flex space-x-2\">\n                        <Input \n                          id=\"dangerColor\"\n                          type=\"color\"\n                          defaultValue=\"#EF4444\"\n                          className=\"w-16 h-10 p-1 bg-surface-2 border-border\"\n                          data-testid=\"danger-color-picker\"\n                        />\n                        <Input \n                          defaultValue=\"#EF4444\"\n                          className=\"flex-1 bg-surface-2 border-border text-white\"\n                          data-testid=\"danger-color-input\"\n                        />\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"mt-6 flex space-x-3\">\n                    <Button variant=\"outline\" className=\"border-border text-gray-300 hover:bg-surface-2\" data-testid=\"reset-colors\">\n                      <RotateCcw className=\"w-4 h-4 mr-2\" />\n                      Reset to Default\n                    </Button>\n                    <Button className=\"bg-accent text-bg hover:bg-accent-2\" data-testid=\"apply-colors\">\n                      Apply Colors\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"assets\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              <Card className=\"crypto-card\">\n                <CardHeader>\n                  <CardTitle className=\"text-white\">Logo & Brand Assets</CardTitle>\n                </CardHeader>\n                <CardContent className=\"p-6\">\n                  <div className=\"space-y-6\">\n                    <div>\n                      <Label className=\"text-white\">Site Logo</Label>\n                      <div className=\"mt-2 border-2 border-dashed border-border rounded-lg p-8 text-center\">\n                        <Upload className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n                        <p className=\"text-gray-400 mb-2\">Upload logo (PNG, SVG recommended)</p>\n                        <p className=\"text-sm text-gray-500\">Optimal size: 200x60px</p>\n                        <Button variant=\"outline\" className=\"mt-3 border-border text-gray-300\" data-testid=\"upload-logo\">\n                          Choose File\n                        </Button>\n                      </div>\n                    </div>\n                    \n                    <div>\n                      <Label className=\"text-white\">Favicon</Label>\n                      <div className=\"mt-2 border-2 border-dashed border-border rounded-lg p-6 text-center\">\n                        <div className=\"w-8 h-8 bg-accent/20 rounded mx-auto mb-3\"></div>\n                        <p className=\"text-gray-400 mb-2\">Upload favicon (ICO, PNG)</p>\n                        <p className=\"text-sm text-gray-500\">Size: 32x32px or 16x16px</p>\n                        <Button variant=\"outline\" className=\"mt-3 border-border text-gray-300\" data-testid=\"upload-favicon\">\n                          Choose File\n                        </Button>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"crypto-card\">\n                <CardHeader>\n                  <CardTitle className=\"text-white\">Additional Assets</CardTitle>\n                </CardHeader>\n                <CardContent className=\"p-6\">\n                  <div className=\"space-y-6\">\n                    <div>\n                      <Label className=\"text-white\">Hero Background</Label>\n                      <div className=\"mt-2 border-2 border-dashed border-border rounded-lg p-6 text-center\">\n                        <div className=\"w-16 h-10 bg-gradient-to-r from-accent/20 to-accent/40 rounded mx-auto mb-3\"></div>\n                        <p className=\"text-gray-400 mb-2\">Homepage hero background</p>\n                        <p className=\"text-sm text-gray-500\">Recommended: 1920x600px</p>\n                        <Button variant=\"outline\" className=\"mt-3 border-border text-gray-300\" data-testid=\"upload-hero\">\n                          Choose File\n                        </Button>\n                      </div>\n                    </div>\n                    \n                    <div>\n                      <Label className=\"text-white\">Loading Animation</Label>\n                      <div className=\"mt-2 border-2 border-dashed border-border rounded-lg p-6 text-center\">\n                        <div className=\"w-8 h-8 border-2 border-accent border-t-transparent rounded-full animate-spin mx-auto mb-3\"></div>\n                        <p className=\"text-gray-400 mb-2\">Custom loading spinner</p>\n                        <p className=\"text-sm text-gray-500\">SVG or GIF, 64x64px max</p>\n                        <Button variant=\"outline\" className=\"mt-3 border-border text-gray-300\" data-testid=\"upload-spinner\">\n                          Choose File\n                        </Button>\n                      </div>\n                    </div>\n                    \n                    <div>\n                      <Label className=\"text-white\">Email Header</Label>\n                      <div className=\"mt-2 border-2 border-dashed border-border rounded-lg p-6 text-center\">\n                        <div className=\"w-16 h-6 bg-accent/20 rounded mx-auto mb-3\"></div>\n                        <p className=\"text-gray-400 mb-2\">Email template header</p>\n                        <p className=\"text-sm text-gray-500\">600x150px recommended</p>\n                        <Button variant=\"outline\" className=\"mt-3 border-border text-gray-300\" data-testid=\"upload-email-header\">\n                          Choose File\n                        </Button>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"pages\">\n            <div className=\"space-y-6\">\n              <Card className=\"crypto-card\">\n                <CardHeader>\n                  <CardTitle className=\"text-white\">Custom Pages</CardTitle>\n                </CardHeader>\n                <CardContent className=\"p-6\">\n                  <div className=\"space-y-6\">\n                    <div>\n                      <Label htmlFor=\"aboutPage\" className=\"text-white\">About Page Content</Label>\n                      <Textarea \n                        id=\"aboutPage\"\n                        placeholder=\"Tell users about your marketplace...\"\n                        className=\"mt-2 bg-surface-2 border-border text-white\"\n                        rows={6}\n                        data-testid=\"about-page-content\"\n                      />\n                    </div>\n                    \n                    <div>\n                      <Label htmlFor=\"termsPage\" className=\"text-white\">Terms of Service</Label>\n                      <Textarea \n                        id=\"termsPage\"\n                        placeholder=\"Enter your terms of service...\"\n                        className=\"mt-2 bg-surface-2 border-border text-white\"\n                        rows={6}\n                        data-testid=\"terms-page-content\"\n                      />\n                    </div>\n                    \n                    <div>\n                      <Label htmlFor=\"privacyPage\" className=\"text-white\">Privacy Policy</Label>\n                      <Textarea \n                        id=\"privacyPage\"\n                        placeholder=\"Enter your privacy policy...\"\n                        className=\"mt-2 bg-surface-2 border-border text-white\"\n                        rows={6}\n                        data-testid=\"privacy-page-content\"\n                      />\n                    </div>\n                    \n                    <div>\n                      <Label htmlFor=\"faqPage\" className=\"text-white\">FAQ Content</Label>\n                      <Textarea \n                        id=\"faqPage\"\n                        placeholder=\"Frequently asked questions and answers...\"\n                        className=\"mt-2 bg-surface-2 border-border text-white\"\n                        rows={6}\n                        data-testid=\"faq-page-content\"\n                      />\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"crypto-card\">\n                <CardHeader>\n                  <CardTitle className=\"text-white\">Maintenance & Error Pages</CardTitle>\n                </CardHeader>\n                <CardContent className=\"p-6\">\n                  <div className=\"space-y-6\">\n                    <div>\n                      <Label htmlFor=\"maintenancePage\" className=\"text-white\">Maintenance Page Message</Label>\n                      <Textarea \n                        id=\"maintenancePage\"\n                        placeholder=\"We're currently performing maintenance. Please check back soon.\"\n                        className=\"mt-2 bg-surface-2 border-border text-white\"\n                        rows={4}\n                        data-testid=\"maintenance-page-content\"\n                      />\n                    </div>\n                    \n                    <div>\n                      <Label htmlFor=\"errorPage\" className=\"text-white\">404 Error Page Message</Label>\n                      <Textarea \n                        id=\"errorPage\"\n                        placeholder=\"The page you're looking for doesn't exist.\"\n                        className=\"mt-2 bg-surface-2 border-border text-white\"\n                        rows={4}\n                        data-testid=\"error-page-content\"\n                      />\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n        </Tabs>\n      </main>\n    \n  );\n}","size_bytes":26469},"client/src/pages/admin/categories.tsx":{"content":"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Plus, Edit, Trash2, Folder, Tag, Move3D, GripVertical } from \"lucide-react\";\n\nexport default function AdminCategories() {\n\n  const categories = [\n    {\n      id: 1,\n      name: \"Streaming Services\",\n      slug: \"streaming-services\",\n      description: \"Digital entertainment and media streaming accounts\",\n      parentId: null,\n      listingCount: 1247,\n      isActive: true,\n      order: 1,\n      subcategories: [\n        { id: 11, name: \"Netflix\", slug: \"netflix\", listingCount: 345 },\n        { id: 12, name: \"Spotify\", slug: \"spotify\", listingCount: 234 },\n        { id: 13, name: \"Disney+\", slug: \"disney-plus\", listingCount: 189 },\n        { id: 14, name: \"Amazon Prime\", slug: \"amazon-prime\", listingCount: 156 }\n      ]\n    },\n    {\n      id: 2,\n      name: \"Software & Tools\",\n      slug: \"software-tools\",\n      description: \"Software licenses, applications, and digital tools\",\n      parentId: null,\n      listingCount: 892,\n      isActive: true,\n      order: 2,\n      subcategories: [\n        { id: 21, name: \"Adobe Creative Suite\", slug: \"adobe-creative\", listingCount: 123 },\n        { id: 22, name: \"Microsoft Office\", slug: \"microsoft-office\", listingCount: 234 },\n        { id: 23, name: \"Development Tools\", slug: \"dev-tools\", listingCount: 156 },\n        { id: 24, name: \"Antivirus Software\", slug: \"antivirus\", listingCount: 89 }\n      ]\n    },\n    {\n      id: 3,\n      name: \"Gaming\",\n      slug: \"gaming\",\n      description: \"Game accounts, in-game items, and gaming services\",\n      parentId: null,\n      listingCount: 567,\n      isActive: true,\n      order: 3,\n      subcategories: [\n        { id: 31, name: \"Steam Accounts\", slug: \"steam\", listingCount: 234 },\n        { id: 32, name: \"Xbox Game Pass\", slug: \"xbox-gamepass\", listingCount: 123 },\n        { id: 33, name: \"PlayStation Plus\", slug: \"ps-plus\", listingCount: 109 },\n        { id: 34, name: \"Epic Games\", slug: \"epic-games\", listingCount: 67 }\n      ]\n    },\n    {\n      id: 4,\n      name: \"Digital Services\",\n      slug: \"digital-services\",\n      description: \"VPNs, hosting, email services, and other digital solutions\",\n      parentId: null,\n      listingCount: 423,\n      isActive: true,\n      order: 4,\n      subcategories: [\n        { id: 41, name: \"VPN Services\", slug: \"vpn\", listingCount: 145 },\n        { id: 42, name: \"Web Hosting\", slug: \"hosting\", listingCount: 89 },\n        { id: 43, name: \"Email Services\", slug: \"email\", listingCount: 67 },\n        { id: 44, name: \"Cloud Storage\", slug: \"cloud-storage\", listingCount: 56 }\n      ]\n    }\n  ];\n\n  const tags = [\n    { id: 1, name: \"instant-delivery\", count: 456, color: \"success\" },\n    { id: 2, name: \"warranty\", count: 234, color: \"accent\" },\n    { id: 3, name: \"premium\", count: 345, color: \"warning\" },\n    { id: 4, name: \"lifetime\", count: 123, color: \"danger\" },\n    { id: 5, name: \"verified\", count: 567, color: \"success\" },\n    { id: 6, name: \"bulk-discount\", count: 89, color: \"accent\" }\n  ];\n\n  return (\n    \n      <main className=\"flex-1 overflow-y-auto bg-bg p-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between mb-6\">\n          <div>\n            <h1 className=\"text-2xl font-bold text-white\">Category Management</h1>\n            <p className=\"text-gray-300 mt-1\">Organize marketplace products and manage categories</p>\n          </div>\n          <Button className=\"bg-accent text-bg hover:bg-accent-2\">\n            <Plus className=\"w-4 h-4 mr-2\" />\n            Add Category\n          </Button>\n        </div>\n\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n          <Card className=\"crypto-card\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <Folder className=\"w-8 h-8 text-accent mr-4\" />\n                <div>\n                  <p className=\"text-sm text-gray-400\">Total Categories</p>\n                  <p className=\"text-2xl font-bold text-white\">{categories.length}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"crypto-card\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <div className=\"w-8 h-8 bg-success/20 rounded-lg flex items-center justify-center mr-4\">\n                  <Folder className=\"w-5 h-5 text-success\" />\n                </div>\n                <div>\n                  <p className=\"text-sm text-gray-400\">Subcategories</p>\n                  <p className=\"text-2xl font-bold text-white\">16</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"crypto-card\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <Tag className=\"w-8 h-8 text-warning mr-4\" />\n                <div>\n                  <p className=\"text-sm text-gray-400\">Active Tags</p>\n                  <p className=\"text-2xl font-bold text-white\">{tags.length}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"crypto-card\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <div className=\"w-8 h-8 bg-danger/20 rounded-lg flex items-center justify-center mr-4\">\n                  <span className=\"text-danger font-bold\">#</span>\n                </div>\n                <div>\n                  <p className=\"text-sm text-gray-400\">Total Listings</p>\n                  <p className=\"text-2xl font-bold text-white\">3,129</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <Tabs defaultValue=\"categories\" className=\"w-full\">\n          <TabsList className=\"bg-surface-2 mb-6\">\n            <TabsTrigger value=\"categories\" className=\"text-gray-300 data-[state=active]:text-white\">\n              Categories\n            </TabsTrigger>\n            <TabsTrigger value=\"create\" className=\"text-gray-300 data-[state=active]:text-white\">\n              Create Category\n            </TabsTrigger>\n            <TabsTrigger value=\"tags\" className=\"text-gray-300 data-[state=active]:text-white\">\n              Tags\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"categories\">\n            <Card className=\"crypto-card\">\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <CardTitle className=\"text-white\">Category Hierarchy</CardTitle>\n                  <Button variant=\"outline\" className=\"border-border text-gray-300 hover:bg-surface-2\">\n                    <Move3D className=\"w-4 h-4 mr-2\" />\n                    Reorder\n                  </Button>\n                </div>\n              </CardHeader>\n              <CardContent className=\"p-6\">\n                <div className=\"space-y-4\">\n                  {categories.map((category) => (\n                    <div key={category.id} className=\"border border-border rounded-lg p-4\" data-testid={`category-${category.id}`}>\n                      <div className=\"flex items-start justify-between mb-4\">\n                        <div className=\"flex items-center\">\n                          <GripVertical className=\"w-5 h-5 text-gray-400 mr-3 cursor-move\" />\n                          <div>\n                            <h3 className=\"text-lg font-medium text-white\">{category.name}</h3>\n                            <p className=\"text-sm text-gray-400\">{category.description}</p>\n                            <div className=\"flex items-center space-x-4 mt-2\">\n                              <span className=\"text-sm text-gray-400\">Slug: {category.slug}</span>\n                              <span className=\"text-sm text-accent\">{category.listingCount} listings</span>\n                            </div>\n                          </div>\n                        </div>\n                        <div className=\"flex items-center space-x-2\">\n                          <Button variant=\"ghost\" size=\"sm\" className=\"text-gray-400 hover:text-white\" data-testid={`edit-category-${category.id}`}>\n                            <Edit className=\"w-4 h-4\" />\n                          </Button>\n                          <Button variant=\"ghost\" size=\"sm\" className=\"text-danger hover:text-red-400\" data-testid={`delete-category-${category.id}`}>\n                            <Trash2 className=\"w-4 h-4\" />\n                          </Button>\n                        </div>\n                      </div>\n                      \n                      {category.subcategories && category.subcategories.length > 0 && (\n                        <div className=\"ml-8 space-y-2\">\n                          <h4 className=\"text-sm font-medium text-gray-300\">Subcategories:</h4>\n                          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2\">\n                            {category.subcategories.map((sub) => (\n                              <div key={sub.id} className=\"flex items-center justify-between p-3 bg-surface-2 rounded-lg\" data-testid={`subcategory-${sub.id}`}>\n                                <div>\n                                  <p className=\"text-white\">{sub.name}</p>\n                                  <p className=\"text-xs text-gray-400\">{sub.listingCount} listings</p>\n                                </div>\n                                <div className=\"flex items-center space-x-1\">\n                                  <Button variant=\"ghost\" size=\"sm\" className=\"text-gray-400 hover:text-white h-6 w-6 p-0\" data-testid={`edit-subcategory-${sub.id}`}>\n                                    <Edit className=\"w-3 h-3\" />\n                                  </Button>\n                                  <Button variant=\"ghost\" size=\"sm\" className=\"text-danger hover:text-red-400 h-6 w-6 p-0\" data-testid={`delete-subcategory-${sub.id}`}>\n                                    <Trash2 className=\"w-3 h-3\" />\n                                  </Button>\n                                </div>\n                              </div>\n                            ))}\n                          </div>\n                          <Button variant=\"outline\" size=\"sm\" className=\"border-border text-gray-300 hover:bg-surface-2\" data-testid={`add-subcategory-${category.id}`}>\n                            <Plus className=\"w-4 h-4 mr-2\" />\n                            Add Subcategory\n                          </Button>\n                        </div>\n                      )}\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"create\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              <Card className=\"crypto-card\">\n                <CardHeader>\n                  <CardTitle className=\"text-white\">Category Details</CardTitle>\n                </CardHeader>\n                <CardContent className=\"p-6\">\n                  <div className=\"space-y-6\">\n                    <div>\n                      <Label htmlFor=\"categoryName\" className=\"text-white\">Category Name</Label>\n                      <Input \n                        id=\"categoryName\"\n                        placeholder=\"Enter category name...\"\n                        className=\"mt-2 bg-surface-2 border-border text-white\"\n                        data-testid=\"category-name-input\"\n                      />\n                    </div>\n                    \n                    <div>\n                      <Label htmlFor=\"categorySlug\" className=\"text-white\">URL Slug</Label>\n                      <Input \n                        id=\"categorySlug\"\n                        placeholder=\"category-slug\"\n                        className=\"mt-2 bg-surface-2 border-border text-white\"\n                        data-testid=\"category-slug-input\"\n                      />\n                      <p className=\"text-sm text-gray-400 mt-1\">Auto-generated from name</p>\n                    </div>\n                    \n                    <div>\n                      <Label htmlFor=\"categoryDescription\" className=\"text-white\">Description</Label>\n                      <Textarea \n                        id=\"categoryDescription\"\n                        placeholder=\"Describe this category...\"\n                        className=\"mt-2 bg-surface-2 border-border text-white\"\n                        rows={4}\n                        data-testid=\"category-description-input\"\n                      />\n                    </div>\n                    \n                    <div>\n                      <Label htmlFor=\"parentCategory\" className=\"text-white\">Parent Category</Label>\n                      <select \n                        id=\"parentCategory\"\n                        className=\"mt-2 w-full bg-surface-2 border border-border rounded-md px-3 py-2 text-white\"\n                        data-testid=\"parent-category-select\"\n                      >\n                        <option value=\"\">None (Top Level)</option>\n                        {categories.map((cat) => (\n                          <option key={cat.id} value={cat.id}>{cat.name}</option>\n                        ))}\n                      </select>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"crypto-card\">\n                <CardHeader>\n                  <CardTitle className=\"text-white\">Category Settings</CardTitle>\n                </CardHeader>\n                <CardContent className=\"p-6\">\n                  <div className=\"space-y-6\">\n                    <div>\n                      <Label htmlFor=\"displayOrder\" className=\"text-white\">Display Order</Label>\n                      <Input \n                        id=\"displayOrder\"\n                        type=\"number\"\n                        defaultValue=\"0\"\n                        className=\"mt-2 bg-surface-2 border-border text-white\"\n                        data-testid=\"display-order-input\"\n                      />\n                      <p className=\"text-sm text-gray-400 mt-1\">Lower numbers appear first</p>\n                    </div>\n                    \n                    <div>\n                      <Label className=\"text-white\">Category Status</Label>\n                      <div className=\"mt-3 space-y-2\">\n                        <div className=\"flex items-center space-x-2\">\n                          <input type=\"radio\" id=\"active\" name=\"status\" value=\"active\" defaultChecked className=\"text-accent\" />\n                          <Label htmlFor=\"active\" className=\"text-gray-300\">Active</Label>\n                        </div>\n                        <div className=\"flex items-center space-x-2\">\n                          <input type=\"radio\" id=\"hidden\" name=\"status\" value=\"hidden\" className=\"text-accent\" />\n                          <Label htmlFor=\"hidden\" className=\"text-gray-300\">Hidden</Label>\n                        </div>\n                        <div className=\"flex items-center space-x-2\">\n                          <input type=\"radio\" id=\"disabled\" name=\"status\" value=\"disabled\" className=\"text-accent\" />\n                          <Label htmlFor=\"disabled\" className=\"text-gray-300\">Disabled</Label>\n                        </div>\n                      </div>\n                    </div>\n                    \n                    <div>\n                      <Label className=\"text-white\">Category Icon</Label>\n                      <div className=\"mt-2 border-2 border-dashed border-border rounded-lg p-6 text-center\">\n                        <p className=\"text-gray-400\">Upload category icon (optional)</p>\n                        <Button variant=\"outline\" className=\"mt-2 border-border text-gray-300\" data-testid=\"upload-category-icon\">\n                          Choose File\n                        </Button>\n                      </div>\n                    </div>\n                    \n                    <div className=\"pt-4\">\n                      <Button className=\"w-full bg-accent text-bg hover:bg-accent-2\" data-testid=\"create-category-button\">\n                        Create Category\n                      </Button>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"tags\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              <Card className=\"crypto-card\">\n                <CardHeader>\n                  <CardTitle className=\"text-white\">Manage Tags</CardTitle>\n                </CardHeader>\n                <CardContent className=\"p-6\">\n                  <div className=\"space-y-4\">\n                    <div className=\"flex space-x-2\">\n                      <Input \n                        placeholder=\"Add new tag...\"\n                        className=\"bg-surface-2 border-border text-white\"\n                        data-testid=\"new-tag-input\"\n                      />\n                      <Button className=\"bg-accent text-bg hover:bg-accent-2\" data-testid=\"add-tag-button\">\n                        Add\n                      </Button>\n                    </div>\n                    \n                    <div className=\"flex flex-wrap gap-2\">\n                      {tags.map((tag) => (\n                        <div key={tag.id} className=\"flex items-center space-x-2 group\" data-testid={`tag-${tag.id}`}>\n                          <Badge \n                            variant={tag.color === \"success\" ? \"default\" : tag.color === \"danger\" ? \"destructive\" : \"secondary\"}\n                            className=\"pr-1\"\n                          >\n                            {tag.name}\n                            <span className=\"ml-2 text-xs opacity-75\">({tag.count})</span>\n                            <Button \n                              variant=\"ghost\" \n                              size=\"sm\" \n                              className=\"ml-1 h-auto p-0 w-4 h-4 opacity-0 group-hover:opacity-100 hover:bg-transparent\"\n                              data-testid={`delete-tag-${tag.id}`}\n                            >\n                              <Trash2 className=\"w-3 h-3\" />\n                            </Button>\n                          </Badge>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"crypto-card\">\n                <CardHeader>\n                  <CardTitle className=\"text-white\">Tag Analytics</CardTitle>\n                </CardHeader>\n                <CardContent className=\"p-6\">\n                  <div className=\"space-y-4\">\n                    <h4 className=\"text-lg font-medium text-white\">Most Popular Tags</h4>\n                    <div className=\"space-y-3\">\n                      {tags.sort((a, b) => b.count - a.count).slice(0, 5).map((tag, index) => (\n                        <div key={tag.id} className=\"flex items-center justify-between p-3 bg-surface-2 rounded-lg\">\n                          <div className=\"flex items-center\">\n                            <span className=\"w-6 h-6 bg-accent/20 rounded-full flex items-center justify-center text-accent text-sm font-bold mr-3\">\n                              {index + 1}\n                            </span>\n                            <span className=\"text-white\">{tag.name}</span>\n                          </div>\n                          <span className=\"text-accent font-mono\">{tag.count}</span>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n        </Tabs>\n      </main>\n    \n  );\n}","size_bytes":20266},"client/src/pages/admin/commissions.tsx":{"content":"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Percent, DollarSign, TrendingUp, Save, Settings, Edit } from \"lucide-react\";\n\nexport default function AdminCommissions() {\n\n  const commissionHistory = [\n    {\n      id: 1,\n      vendor: \"CryptoAccountsPlus\",\n      period: \"March 2024\",\n      totalSales: \"12.8 BTC\",\n      commissionRate: \"5%\",\n      commissionEarned: \"0.64 BTC\",\n      usdValue: \"$28,430\",\n      paidOut: true\n    },\n    {\n      id: 2,\n      vendor: \"PremiumSoft\",\n      period: \"March 2024\",\n      totalSales: \"8.4 BTC\",\n      commissionRate: \"4%\",\n      commissionEarned: \"0.336 BTC\",\n      usdValue: \"$14,890\",\n      paidOut: true\n    },\n    {\n      id: 3,\n      vendor: \"DigitalVault\",\n      period: \"March 2024\",\n      totalSales: \"4.2 XMR\",\n      commissionRate: \"5%\",\n      commissionEarned: \"0.21 XMR\",\n      usdValue: \"$3,420\",\n      paidOut: false\n    }\n  ];\n\n  const vendorCommissions = [\n    {\n      id: 1,\n      vendor: \"CryptoAccountsPlus\",\n      currentRate: \"5\",\n      category: \"Streaming Services\",\n      totalSales: \"12.8 BTC\",\n      joinDate: \"2023-08-15\",\n      performance: \"Excellent\"\n    },\n    {\n      id: 2,\n      vendor: \"PremiumSoft\",\n      currentRate: \"4\",\n      category: \"Software & Tools\",\n      totalSales: \"8.4 BTC\",\n      joinDate: \"2023-12-03\",\n      performance: \"Good\"\n    },\n    {\n      id: 3,\n      vendor: \"DigitalVault\",\n      currentRate: \"5\",\n      category: \"Software & Tools\",\n      totalSales: \"0 BTC\",\n      joinDate: \"2024-03-22\",\n      performance: \"New\"\n    }\n  ];\n\n  return (\n    \n      <main className=\"flex-1 overflow-y-auto bg-bg p-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between mb-6\">\n          <div>\n            <h1 className=\"text-2xl font-bold text-white\">Commission Management</h1>\n            <p className=\"text-gray-300 mt-1\">Configure commission rates and track earnings</p>\n          </div>\n          <Button className=\"bg-accent text-bg hover:bg-accent-2\">\n            <Save className=\"w-4 h-4 mr-2\" />\n            Save Changes\n          </Button>\n        </div>\n\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n          <Card className=\"crypto-card\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <DollarSign className=\"w-8 h-8 text-accent mr-4\" />\n                <div>\n                  <p className=\"text-sm text-gray-400\">Total Commissions</p>\n                  <p className=\"text-2xl font-bold text-white\">23.4 BTC</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"crypto-card\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <Percent className=\"w-8 h-8 text-success mr-4\" />\n                <div>\n                  <p className=\"text-sm text-gray-400\">Avg Commission Rate</p>\n                  <p className=\"text-2xl font-bold text-white\">4.8%</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"crypto-card\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <TrendingUp className=\"w-8 h-8 text-warning mr-4\" />\n                <div>\n                  <p className=\"text-sm text-gray-400\">This Month</p>\n                  <p className=\"text-2xl font-bold text-white\">2.1 BTC</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"crypto-card\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <div className=\"w-8 h-8 bg-danger/20 rounded-lg flex items-center justify-center mr-4\">\n                  <DollarSign className=\"w-5 h-5 text-danger\" />\n                </div>\n                <div>\n                  <p className=\"text-sm text-gray-400\">Pending Payouts</p>\n                  <p className=\"text-2xl font-bold text-white\">0.84 BTC</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <Tabs defaultValue=\"settings\" className=\"w-full\">\n          <TabsList className=\"bg-surface-2 mb-6\">\n            <TabsTrigger value=\"settings\" className=\"text-gray-300 data-[state=active]:text-white\">\n              Commission Settings\n            </TabsTrigger>\n            <TabsTrigger value=\"vendors\" className=\"text-gray-300 data-[state=active]:text-white\">\n              Vendor Rates\n            </TabsTrigger>\n            <TabsTrigger value=\"history\" className=\"text-gray-300 data-[state=active]:text-white\">\n              Commission History\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"settings\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              {/* Global Settings */}\n              <Card className=\"crypto-card\">\n                <CardHeader>\n                  <CardTitle className=\"text-white\">Global Commission Settings</CardTitle>\n                </CardHeader>\n                <CardContent className=\"p-6\">\n                  <div className=\"space-y-6\">\n                    <div>\n                      <Label htmlFor=\"defaultRate\" className=\"text-white\">Default Commission Rate (%)</Label>\n                      <Input \n                        id=\"defaultRate\"\n                        type=\"number\"\n                        defaultValue=\"5\"\n                        className=\"mt-2 bg-surface-2 border-border text-white\"\n                        data-testid=\"default-commission-rate\"\n                      />\n                      <p className=\"text-sm text-gray-400 mt-2\">Applied to new vendors by default</p>\n                    </div>\n                    \n                    <div>\n                      <Label htmlFor=\"minRate\" className=\"text-white\">Minimum Commission Rate (%)</Label>\n                      <Input \n                        id=\"minRate\"\n                        type=\"number\"\n                        defaultValue=\"3\"\n                        className=\"mt-2 bg-surface-2 border-border text-white\"\n                        data-testid=\"minimum-commission-rate\"\n                      />\n                    </div>\n                    \n                    <div>\n                      <Label htmlFor=\"maxRate\" className=\"text-white\">Maximum Commission Rate (%)</Label>\n                      <Input \n                        id=\"maxRate\"\n                        type=\"number\"\n                        defaultValue=\"15\"\n                        className=\"mt-2 bg-surface-2 border-border text-white\"\n                        data-testid=\"maximum-commission-rate\"\n                      />\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Category-Based Rates */}\n              <Card className=\"crypto-card\">\n                <CardHeader>\n                  <CardTitle className=\"text-white\">Category-Based Rates</CardTitle>\n                </CardHeader>\n                <CardContent className=\"p-6\">\n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-center justify-between p-4 bg-surface-2 rounded-lg\">\n                      <div>\n                        <p className=\"text-white font-medium\">Streaming Services</p>\n                        <p className=\"text-sm text-gray-400\">Digital entertainment accounts</p>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <Input \n                          type=\"number\"\n                          defaultValue=\"5\"\n                          className=\"w-20 bg-surface border-border text-white text-center\"\n                          data-testid=\"streaming-commission-rate\"\n                        />\n                        <span className=\"text-gray-400\">%</span>\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex items-center justify-between p-4 bg-surface-2 rounded-lg\">\n                      <div>\n                        <p className=\"text-white font-medium\">Software & Tools</p>\n                        <p className=\"text-sm text-gray-400\">Software licenses and applications</p>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <Input \n                          type=\"number\"\n                          defaultValue=\"4\"\n                          className=\"w-20 bg-surface border-border text-white text-center\"\n                          data-testid=\"software-commission-rate\"\n                        />\n                        <span className=\"text-gray-400\">%</span>\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex items-center justify-between p-4 bg-surface-2 rounded-lg\">\n                      <div>\n                        <p className=\"text-white font-medium\">Gaming</p>\n                        <p className=\"text-sm text-gray-400\">Game accounts and in-game items</p>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <Input \n                          type=\"number\"\n                          defaultValue=\"6\"\n                          className=\"w-20 bg-surface border-border text-white text-center\"\n                          data-testid=\"gaming-commission-rate\"\n                        />\n                        <span className=\"text-gray-400\">%</span>\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex items-center justify-between p-4 bg-surface-2 rounded-lg\">\n                      <div>\n                        <p className=\"text-white font-medium\">Digital Services</p>\n                        <p className=\"text-sm text-gray-400\">VPNs, hosting, and online services</p>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <Input \n                          type=\"number\"\n                          defaultValue=\"7\"\n                          className=\"w-20 bg-surface border-border text-white text-center\"\n                          data-testid=\"services-commission-rate\"\n                        />\n                        <span className=\"text-gray-400\">%</span>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Payment Settings */}\n            <Card className=\"crypto-card mt-6\">\n              <CardHeader>\n                <CardTitle className=\"text-white\">Payment & Processing Settings</CardTitle>\n              </CardHeader>\n              <CardContent className=\"p-6\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <div>\n                    <Label htmlFor=\"payoutSchedule\" className=\"text-white\">Automatic Payout Schedule</Label>\n                    <select \n                      id=\"payoutSchedule\"\n                      className=\"mt-2 w-full bg-surface-2 border border-border rounded-md px-3 py-2 text-white\"\n                      data-testid=\"payout-schedule\"\n                    >\n                      <option value=\"weekly\">Weekly</option>\n                      <option value=\"biweekly\">Bi-weekly</option>\n                      <option value=\"monthly\">Monthly</option>\n                      <option value=\"manual\">Manual Only</option>\n                    </select>\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"minPayout\" className=\"text-white\">Minimum Payout Amount (BTC)</Label>\n                    <Input \n                      id=\"minPayout\"\n                      type=\"number\"\n                      step=\"0.001\"\n                      defaultValue=\"0.01\"\n                      className=\"mt-2 bg-surface-2 border-border text-white\"\n                      data-testid=\"minimum-payout-amount\"\n                    />\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"holdPeriod\" className=\"text-white\">Commission Hold Period (days)</Label>\n                    <Input \n                      id=\"holdPeriod\"\n                      type=\"number\"\n                      defaultValue=\"7\"\n                      className=\"mt-2 bg-surface-2 border-border text-white\"\n                      data-testid=\"hold-period\"\n                    />\n                    <p className=\"text-sm text-gray-400 mt-2\">Days to hold commission before payout eligibility</p>\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"currency\" className=\"text-white\">Default Payout Currency</Label>\n                    <select \n                      id=\"currency\"\n                      className=\"mt-2 w-full bg-surface-2 border border-border rounded-md px-3 py-2 text-white\"\n                      data-testid=\"default-currency\"\n                    >\n                      <option value=\"btc\">Bitcoin (BTC)</option>\n                      <option value=\"xmr\">Monero (XMR)</option>\n                      <option value=\"vendor_choice\">Vendor's Choice</option>\n                    </select>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"vendors\">\n            <Card className=\"crypto-card\">\n              <CardHeader>\n                <CardTitle className=\"text-white\">Individual Vendor Commission Rates</CardTitle>\n              </CardHeader>\n              <CardContent className=\"p-0\">\n                <div className=\"overflow-x-auto\">\n                  <table className=\"w-full\">\n                    <thead className=\"bg-surface-2\">\n                      <tr>\n                        <th className=\"text-left p-4 text-sm font-medium text-gray-300\">Vendor</th>\n                        <th className=\"text-left p-4 text-sm font-medium text-gray-300\">Category</th>\n                        <th className=\"text-left p-4 text-sm font-medium text-gray-300\">Current Rate</th>\n                        <th className=\"text-left p-4 text-sm font-medium text-gray-300\">Total Sales</th>\n                        <th className=\"text-left p-4 text-sm font-medium text-gray-300\">Performance</th>\n                        <th className=\"text-left p-4 text-sm font-medium text-gray-300\">Member Since</th>\n                        <th className=\"text-left p-4 text-sm font-medium text-gray-300\">Actions</th>\n                      </tr>\n                    </thead>\n                    <tbody className=\"divide-y divide-border\">\n                      {vendorCommissions.map((vendor) => (\n                        <tr key={vendor.id} className=\"hover:bg-surface-2/50\" data-testid={`vendor-commission-${vendor.id}`}>\n                          <td className=\"p-4\">\n                            <p className=\"font-medium text-white\">{vendor.vendor}</p>\n                          </td>\n                          <td className=\"p-4 text-gray-300\">{vendor.category}</td>\n                          <td className=\"p-4\">\n                            <div className=\"flex items-center space-x-2\">\n                              <Input \n                                type=\"number\"\n                                defaultValue={vendor.currentRate}\n                                className=\"w-20 bg-surface-2 border-border text-white text-center\"\n                                data-testid={`rate-input-${vendor.id}`}\n                              />\n                              <span className=\"text-gray-400\">%</span>\n                            </div>\n                          </td>\n                          <td className=\"p-4\">\n                            <span className=\"font-mono text-white\">{vendor.totalSales}</span>\n                          </td>\n                          <td className=\"p-4\">\n                            <span className={`px-2 py-1 rounded text-xs ${\n                              vendor.performance === \"Excellent\" ? \"bg-success/20 text-success\" :\n                              vendor.performance === \"Good\" ? \"bg-warning/20 text-warning\" :\n                              \"bg-accent/20 text-accent\"\n                            }`}>\n                              {vendor.performance}\n                            </span>\n                          </td>\n                          <td className=\"p-4 text-gray-300\">{vendor.joinDate}</td>\n                          <td className=\"p-4\">\n                            <Button variant=\"ghost\" size=\"sm\" className=\"text-gray-400 hover:text-white\" data-testid={`edit-commission-${vendor.id}`}>\n                              <Edit className=\"w-4 h-4\" />\n                            </Button>\n                          </td>\n                        </tr>\n                      ))}\n                    </tbody>\n                  </table>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"history\">\n            <Card className=\"crypto-card\">\n              <CardHeader>\n                <CardTitle className=\"text-white\">Commission Earnings History</CardTitle>\n              </CardHeader>\n              <CardContent className=\"p-0\">\n                <div className=\"overflow-x-auto\">\n                  <table className=\"w-full\">\n                    <thead className=\"bg-surface-2\">\n                      <tr>\n                        <th className=\"text-left p-4 text-sm font-medium text-gray-300\">Vendor</th>\n                        <th className=\"text-left p-4 text-sm font-medium text-gray-300\">Period</th>\n                        <th className=\"text-left p-4 text-sm font-medium text-gray-300\">Total Sales</th>\n                        <th className=\"text-left p-4 text-sm font-medium text-gray-300\">Commission Rate</th>\n                        <th className=\"text-left p-4 text-sm font-medium text-gray-300\">Commission Earned</th>\n                        <th className=\"text-left p-4 text-sm font-medium text-gray-300\">USD Value</th>\n                        <th className=\"text-left p-4 text-sm font-medium text-gray-300\">Status</th>\n                      </tr>\n                    </thead>\n                    <tbody className=\"divide-y divide-border\">\n                      {commissionHistory.map((record) => (\n                        <tr key={record.id} className=\"hover:bg-surface-2/50\" data-testid={`commission-history-${record.id}`}>\n                          <td className=\"p-4 text-white\">{record.vendor}</td>\n                          <td className=\"p-4 text-gray-300\">{record.period}</td>\n                          <td className=\"p-4\">\n                            <span className=\"font-mono text-white\">{record.totalSales}</span>\n                          </td>\n                          <td className=\"p-4 text-white\">{record.commissionRate}</td>\n                          <td className=\"p-4\">\n                            <span className=\"font-mono text-accent\">{record.commissionEarned}</span>\n                          </td>\n                          <td className=\"p-4 text-gray-300\">{record.usdValue}</td>\n                          <td className=\"p-4\">\n                            <span className={`px-2 py-1 rounded text-xs ${\n                              record.paidOut ? \"bg-success/20 text-success\" : \"bg-warning/20 text-warning\"\n                            }`}>\n                              {record.paidOut ? \"Paid Out\" : \"Pending\"}\n                            </span>\n                          </td>\n                        </tr>\n                      ))}\n                    </tbody>\n                  </table>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </main>\n    \n  );\n}","size_bytes":20299},"client/src/pages/admin/crypto.tsx":{"content":"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { StatusBadge } from \"@/components/ui/status-badge\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Bitcoin, Wallet, RefreshCw, Settings, Lock, Unlock, AlertTriangle, CheckCircle } from \"lucide-react\";\n\nexport default function AdminCrypto() {\n\n  const cryptoNodes = [\n    {\n      id: 1,\n      name: \"Bitcoin Node\",\n      symbol: \"BTC\",\n      status: \"Connected\",\n      statusType: \"success\" as const,\n      blockHeight: \"820,847\",\n      lastSync: \"2 min ago\",\n      peers: 8,\n      mempool: \"4.2 MB\",\n      version: \"v25.0\"\n    },\n    {\n      id: 2,\n      name: \"Monero Node\", \n      symbol: \"XMR\",\n      status: \"Connected\",\n      statusType: \"success\" as const,\n      blockHeight: \"3,021,456\",\n      lastSync: \"1 min ago\",\n      peers: 12,\n      mempool: \"2.1 MB\",\n      version: \"v0.18.3.1\"\n    }\n  ];\n\n  const escrowWallets = [\n    {\n      currency: \"BTC\",\n      balance: \"12.84739281\",\n      usdValue: \"$525,847\",\n      pendingOrders: 23,\n      autoReleaseOrders: 156,\n      disputedOrders: 3\n    },\n    {\n      currency: \"XMR\",\n      balance: \"847.23841567\",\n      usdValue: \"$145,623\",\n      pendingOrders: 8,\n      autoReleaseOrders: 67,\n      disputedOrders: 1\n    }\n  ];\n\n  const recentTransactions = [\n    {\n      id: 1,\n      txHash: \"a1b2c3d4e5f6...9876543210\",\n      type: \"Deposit\",\n      amount: \"0.0012 BTC\",\n      status: \"Confirmed\",\n      statusType: \"success\" as const,\n      confirmations: 6,\n      timestamp: \"5 min ago\",\n      orderId: \"ORD-2847\"\n    },\n    {\n      id: 2,\n      txHash: \"9f8e7d6c5b4a...1234567890\",\n      type: \"Escrow Release\",\n      amount: \"0.0008 BTC\", \n      status: \"Confirmed\",\n      statusType: \"success\" as const,\n      confirmations: 3,\n      timestamp: \"12 min ago\",\n      orderId: \"ORD-2846\"\n    },\n    {\n      id: 3,\n      txHash: \"5a4b3c2d1e0f...abcdef1234\",\n      type: \"Refund\",\n      amount: \"1.24 XMR\",\n      status: \"Pending\",\n      statusType: \"warning\" as const,\n      confirmations: 1,\n      timestamp: \"1 hour ago\",\n      orderId: \"ORD-2845\"\n    }\n  ];\n\n  return (\n    \n      <main className=\"flex-1 overflow-y-auto bg-bg p-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between mb-6\">\n          <div>\n            <h1 className=\"text-2xl font-bold text-white\">Crypto Management</h1>\n            <p className=\"text-gray-300 mt-1\">Monitor blockchain nodes, wallets, and transactions</p>\n          </div>\n          <div className=\"flex space-x-3\">\n            <Button variant=\"outline\" className=\"border-border text-gray-300 hover:bg-surface-2\">\n              <RefreshCw className=\"w-4 h-4 mr-2\" />\n              Sync Nodes\n            </Button>\n            <Button className=\"bg-accent text-bg hover:bg-accent-2\">\n              <Settings className=\"w-4 h-4 mr-2\" />\n              Settings\n            </Button>\n          </div>\n        </div>\n\n        <Tabs defaultValue=\"nodes\" className=\"w-full\">\n          <TabsList className=\"bg-surface-2 mb-6\">\n            <TabsTrigger value=\"nodes\" className=\"text-gray-300 data-[state=active]:text-white\">\n              Blockchain Nodes\n            </TabsTrigger>\n            <TabsTrigger value=\"wallets\" className=\"text-gray-300 data-[state=active]:text-white\">\n              Escrow Wallets\n            </TabsTrigger>\n            <TabsTrigger value=\"transactions\" className=\"text-gray-300 data-[state=active]:text-white\">\n              Transaction Logs\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"nodes\">\n            {/* Node Status Cards */}\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8\">\n              {cryptoNodes.map((node) => (\n                <Card key={node.id} className=\"crypto-card\" data-testid={`node-${node.symbol.toLowerCase()}`}>\n                  <CardHeader>\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center\">\n                        {node.symbol === \"BTC\" ? (\n                          <Bitcoin className=\"w-8 h-8 text-warning mr-3\" />\n                        ) : (\n                          <div className=\"w-8 h-8 bg-accent/20 rounded-lg flex items-center justify-center mr-3\">\n                            <svg className=\"w-5 h-5 text-accent\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n                              <path d=\"M12 0C5.373 0 0 5.373 0 12s5.373 12 12 12 12-5.373 12-12S18.627 0 12 0zm6.605 16.695h-2.292l-1.689-2.646-1.689 2.646H10.64l2.646-4.141L10.64 8.414h2.295l1.689 2.646 1.689-2.646h2.292l-2.646 4.14 2.646 4.141z\"/>\n                            </svg>\n                          </div>\n                        )}\n                        <div>\n                          <h3 className=\"text-lg font-semibold text-white\">{node.name}</h3>\n                          <p className=\"text-sm text-gray-400\">{node.symbol} • {node.version}</p>\n                        </div>\n                      </div>\n                      <StatusBadge status={node.status} type={node.statusType} />\n                    </div>\n                  </CardHeader>\n                  <CardContent className=\"p-6 pt-0\">\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div>\n                        <p className=\"text-sm text-gray-400\">Block Height</p>\n                        <p className=\"text-white font-mono\">{node.blockHeight}</p>\n                      </div>\n                      <div>\n                        <p className=\"text-sm text-gray-400\">Last Sync</p>\n                        <p className=\"text-white\">{node.lastSync}</p>\n                      </div>\n                      <div>\n                        <p className=\"text-sm text-gray-400\">Connected Peers</p>\n                        <p className=\"text-white\">{node.peers}</p>\n                      </div>\n                      <div>\n                        <p className=\"text-sm text-gray-400\">Mempool Size</p>\n                        <p className=\"text-white\">{node.mempool}</p>\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex space-x-2 mt-6\">\n                      <Button variant=\"outline\" size=\"sm\" className=\"border-border text-gray-300 hover:bg-surface-2\" data-testid={`restart-node-${node.symbol.toLowerCase()}`}>\n                        Restart\n                      </Button>\n                      <Button variant=\"outline\" size=\"sm\" className=\"border-border text-gray-300 hover:bg-surface-2\" data-testid={`settings-node-${node.symbol.toLowerCase()}`}>\n                        Configure\n                      </Button>\n                      <Button variant=\"outline\" size=\"sm\" className=\"border-border text-gray-300 hover:bg-surface-2\" data-testid={`logs-node-${node.symbol.toLowerCase()}`}>\n                        View Logs\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n\n            {/* Node Management Actions */}\n            <Card className=\"crypto-card\">\n              <CardHeader>\n                <CardTitle className=\"text-white\">Node Management</CardTitle>\n              </CardHeader>\n              <CardContent className=\"p-6\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <div className=\"space-y-4\">\n                    <h4 className=\"text-lg font-medium text-white\">Security Settings</h4>\n                    <div className=\"space-y-3\">\n                      <div className=\"flex items-center justify-between p-3 bg-surface-2 rounded-lg\">\n                        <span className=\"text-gray-300\">RPC Authentication</span>\n                        <StatusBadge status=\"Enabled\" type=\"success\" />\n                      </div>\n                      <div className=\"flex items-center justify-between p-3 bg-surface-2 rounded-lg\">\n                        <span className=\"text-gray-300\">SSL/TLS Encryption</span>\n                        <StatusBadge status=\"Enabled\" type=\"success\" />\n                      </div>\n                      <div className=\"flex items-center justify-between p-3 bg-surface-2 rounded-lg\">\n                        <span className=\"text-gray-300\">IP Whitelist</span>\n                        <StatusBadge status=\"Active\" type=\"success\" />\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"space-y-4\">\n                    <h4 className=\"text-lg font-medium text-white\">Node Actions</h4>\n                    <div className=\"space-y-3\">\n                      <Button variant=\"outline\" className=\"w-full border-border text-gray-300 hover:bg-surface-2 justify-start\" data-testid=\"backup-wallets\">\n                        <Lock className=\"w-4 h-4 mr-2\" />\n                        Backup Wallet Files\n                      </Button>\n                      <Button variant=\"outline\" className=\"w-full border-border text-gray-300 hover:bg-surface-2 justify-start\" data-testid=\"rotate-keys\">\n                        <RefreshCw className=\"w-4 h-4 mr-2\" />\n                        Rotate API Keys\n                      </Button>\n                      <Button variant=\"outline\" className=\"w-full border-border text-gray-300 hover:bg-surface-2 justify-start\" data-testid=\"rescan-blockchain\">\n                        <RefreshCw className=\"w-4 h-4 mr-2\" />\n                        Rescan Blockchain\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"wallets\">\n            {/* Escrow Wallet Overview */}\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8\">\n              {escrowWallets.map((wallet) => (\n                <Card key={wallet.currency} className=\"crypto-card\" data-testid={`wallet-${wallet.currency.toLowerCase()}`}>\n                  <CardHeader>\n                    <div className=\"flex items-center justify-between\">\n                      <h3 className=\"text-lg font-semibold text-white\">{wallet.currency} Escrow Wallet</h3>\n                      <Wallet className=\"w-6 h-6 text-accent\" />\n                    </div>\n                  </CardHeader>\n                  <CardContent className=\"p-6 pt-0\">\n                    <div className=\"space-y-4\">\n                      <div className=\"text-center p-4 bg-surface-2 rounded-xl\">\n                        <p className=\"text-3xl font-bold text-white font-mono\">{wallet.balance}</p>\n                        <p className=\"text-sm text-gray-400\">{wallet.currency}</p>\n                        <p className=\"text-lg text-accent mt-2\">{wallet.usdValue}</p>\n                      </div>\n                      \n                      <div className=\"grid grid-cols-3 gap-4 text-center\">\n                        <div>\n                          <p className=\"text-2xl font-bold text-white\">{wallet.pendingOrders}</p>\n                          <p className=\"text-xs text-gray-400\">Pending Release</p>\n                        </div>\n                        <div>\n                          <p className=\"text-2xl font-bold text-white\">{wallet.autoReleaseOrders}</p>\n                          <p className=\"text-xs text-gray-400\">Auto-Release</p>\n                        </div>\n                        <div>\n                          <p className=\"text-2xl font-bold text-white\">{wallet.disputedOrders}</p>\n                          <p className=\"text-xs text-gray-400\">Disputed</p>\n                        </div>\n                      </div>\n                      \n                      <div className=\"flex space-x-2\">\n                        <Button variant=\"outline\" size=\"sm\" className=\"flex-1 border-border text-gray-300 hover:bg-surface-2\" data-testid={`release-funds-${wallet.currency.toLowerCase()}`}>\n                          <Unlock className=\"w-4 h-4 mr-2\" />\n                          Release Funds\n                        </Button>\n                        <Button variant=\"outline\" size=\"sm\" className=\"flex-1 border-border text-gray-300 hover:bg-surface-2\" data-testid={`view-transactions-${wallet.currency.toLowerCase()}`}>\n                          View History\n                        </Button>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n\n            {/* Escrow Management Actions */}\n            <Card className=\"crypto-card\">\n              <CardHeader>\n                <CardTitle className=\"text-white\">Escrow Management</CardTitle>\n              </CardHeader>\n              <CardContent className=\"p-6\">\n                <div className=\"space-y-6\">\n                  <div>\n                    <h4 className=\"text-lg font-medium text-white mb-4\">Bulk Actions</h4>\n                    <div className=\"flex flex-wrap gap-3\">\n                      <Button variant=\"outline\" className=\"border-border text-gray-300 hover:bg-surface-2\" data-testid=\"release-all-expired\">\n                        <CheckCircle className=\"w-4 h-4 mr-2\" />\n                        Release All Expired (48h)\n                      </Button>\n                      <Button variant=\"outline\" className=\"border-border text-gray-300 hover:bg-surface-2\" data-testid=\"export-escrow-report\">\n                        Export Escrow Report\n                      </Button>\n                      <Button variant=\"outline\" className=\"border-border text-gray-300 hover:bg-surface-2\" data-testid=\"backup-escrow-keys\">\n                        <Lock className=\"w-4 h-4 mr-2\" />\n                        Backup Escrow Keys\n                      </Button>\n                    </div>\n                  </div>\n                  \n                  <div>\n                    <h4 className=\"text-lg font-medium text-white mb-4\">Security Alerts</h4>\n                    <div className=\"space-y-3\">\n                      <div className=\"flex items-center p-3 bg-surface-2 rounded-lg\">\n                        <CheckCircle className=\"w-5 h-5 text-success mr-3\" />\n                        <span className=\"text-gray-300\">All escrow wallets are secure and synced</span>\n                      </div>\n                      <div className=\"flex items-center p-3 bg-surface-2 rounded-lg\">\n                        <CheckCircle className=\"w-5 h-5 text-success mr-3\" />\n                        <span className=\"text-gray-300\">Multi-signature verification active</span>\n                      </div>\n                      <div className=\"flex items-center p-3 bg-surface-2 rounded-lg\">\n                        <CheckCircle className=\"w-5 h-5 text-success mr-3\" />\n                        <span className=\"text-gray-300\">Cold storage backup completed</span>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"transactions\">\n            {/* Transaction Filters */}\n            <Card className=\"crypto-card mb-6\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex flex-col md:flex-row gap-4\">\n                  <div className=\"flex-1\">\n                    <Input \n                      placeholder=\"Search by transaction hash or order ID...\" \n                      className=\"bg-surface-2 border-border text-white\"\n                      data-testid=\"search-transactions\"\n                    />\n                  </div>\n                  <div className=\"flex space-x-3\">\n                    <select className=\"bg-surface-2 border border-border rounded-md px-3 py-2 text-white\">\n                      <option value=\"all\">All Types</option>\n                      <option value=\"deposit\">Deposits</option>\n                      <option value=\"release\">Escrow Releases</option>\n                      <option value=\"refund\">Refunds</option>\n                    </select>\n                    <select className=\"bg-surface-2 border border-border rounded-md px-3 py-2 text-white\">\n                      <option value=\"all\">All Currencies</option>\n                      <option value=\"btc\">BTC</option>\n                      <option value=\"xmr\">XMR</option>\n                    </select>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Transaction Table */}\n            <Card className=\"crypto-card\">\n              <CardHeader>\n                <CardTitle className=\"text-white\">Recent Transactions</CardTitle>\n              </CardHeader>\n              <CardContent className=\"p-0\">\n                <div className=\"overflow-x-auto\">\n                  <table className=\"w-full\">\n                    <thead className=\"bg-surface-2\">\n                      <tr>\n                        <th className=\"text-left p-4 text-sm font-medium text-gray-300\">Transaction Hash</th>\n                        <th className=\"text-left p-4 text-sm font-medium text-gray-300\">Type</th>\n                        <th className=\"text-left p-4 text-sm font-medium text-gray-300\">Amount</th>\n                        <th className=\"text-left p-4 text-sm font-medium text-gray-300\">Status</th>\n                        <th className=\"text-left p-4 text-sm font-medium text-gray-300\">Confirmations</th>\n                        <th className=\"text-left p-4 text-sm font-medium text-gray-300\">Order ID</th>\n                        <th className=\"text-left p-4 text-sm font-medium text-gray-300\">Timestamp</th>\n                      </tr>\n                    </thead>\n                    <tbody className=\"divide-y divide-border\">\n                      {recentTransactions.map((tx) => (\n                        <tr key={tx.id} className=\"hover:bg-surface-2/50\" data-testid={`transaction-${tx.id}`}>\n                          <td className=\"p-4\">\n                            <span className=\"font-mono text-accent text-sm\">{tx.txHash}</span>\n                          </td>\n                          <td className=\"p-4\">\n                            <Badge \n                              variant={\n                                tx.type === \"Deposit\" ? \"secondary\" :\n                                tx.type === \"Escrow Release\" ? \"default\" :\n                                \"outline\"\n                              }\n                              className=\"text-xs\"\n                            >\n                              {tx.type}\n                            </Badge>\n                          </td>\n                          <td className=\"p-4\">\n                            <span className=\"font-mono text-white\">{tx.amount}</span>\n                          </td>\n                          <td className=\"p-4\">\n                            <StatusBadge status={tx.status} type={tx.statusType} />\n                          </td>\n                          <td className=\"p-4\">\n                            <div className=\"flex items-center\">\n                              <span className=\"text-white mr-2\">{tx.confirmations}</span>\n                              {tx.confirmations >= 3 ? (\n                                <CheckCircle className=\"w-4 h-4 text-success\" />\n                              ) : (\n                                <AlertTriangle className=\"w-4 h-4 text-warning\" />\n                              )}\n                            </div>\n                          </td>\n                          <td className=\"p-4\">\n                            <span className=\"font-mono text-accent\">{tx.orderId}</span>\n                          </td>\n                          <td className=\"p-4 text-gray-300\">{tx.timestamp}</td>\n                        </tr>\n                      ))}\n                    </tbody>\n                  </table>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </main>\n    \n  );\n}","size_bytes":20162},"client/src/pages/admin/disputes.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { StatusBadge } from \"@/components/ui/status-badge\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Search, Filter, Eye, MessageSquare, Clock, AlertTriangle, CheckCircle } from \"lucide-react\";\nimport { SAMPLE_DISPUTES } from \"@/lib/constants\";\n\nexport default function AdminDisputes() {\n\n  return (\n    <main className=\"flex-1 overflow-y-auto bg-bg p-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between mb-6\">\n          <div>\n            <h1 className=\"text-2xl font-bold text-white\">Dispute Management</h1>\n            <p className=\"text-gray-300 mt-1\">Resolve conflicts between buyers and vendors</p>\n          </div>\n          <Button className=\"bg-accent text-bg hover:bg-accent-2\">\n            Export Report\n          </Button>\n        </div>\n\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n          <Card className=\"crypto-card\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <AlertTriangle className=\"w-8 h-8 text-danger mr-4\" />\n                <div>\n                  <p className=\"text-sm text-gray-400\">Open Disputes</p>\n                  <p className=\"text-2xl font-bold text-white\">3</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"crypto-card\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <Clock className=\"w-8 h-8 text-warning mr-4\" />\n                <div>\n                  <p className=\"text-sm text-gray-400\">In Review</p>\n                  <p className=\"text-2xl font-bold text-white\">1</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"crypto-card\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <CheckCircle className=\"w-8 h-8 text-success mr-4\" />\n                <div>\n                  <p className=\"text-sm text-gray-400\">Resolved Today</p>\n                  <p className=\"text-2xl font-bold text-white\">5</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"crypto-card\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <div className=\"w-8 h-8 bg-accent/20 rounded-lg flex items-center justify-center mr-4\">\n                  <span className=\"text-accent font-bold\">%</span>\n                </div>\n                <div>\n                  <p className=\"text-sm text-gray-400\">Resolution Rate</p>\n                  <p className=\"text-2xl font-bold text-white\">94.2%</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Filters */}\n        <Card className=\"crypto-card mb-6\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex flex-col md:flex-row gap-4\">\n              <div className=\"flex-1\">\n                <div className=\"relative\">\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n                  <Input \n                    placeholder=\"Search by order ID, buyer, or vendor...\" \n                    className=\"pl-10 bg-surface-2 border-border text-white\"\n                    data-testid=\"search-disputes\"\n                  />\n                </div>\n              </div>\n              <Select>\n                <SelectTrigger className=\"w-40 bg-surface-2 border-border text-white\">\n                  <SelectValue placeholder=\"Status\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Status</SelectItem>\n                  <SelectItem value=\"open\">Open</SelectItem>\n                  <SelectItem value=\"review\">In Review</SelectItem>\n                  <SelectItem value=\"resolved\">Resolved</SelectItem>\n                </SelectContent>\n              </Select>\n              <Select>\n                <SelectTrigger className=\"w-40 bg-surface-2 border-border text-white\">\n                  <SelectValue placeholder=\"Priority\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Priority</SelectItem>\n                  <SelectItem value=\"high\">High</SelectItem>\n                  <SelectItem value=\"medium\">Medium</SelectItem>\n                  <SelectItem value=\"low\">Low</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Disputes List */}\n        <div className=\"space-y-6\">\n          {SAMPLE_DISPUTES.map((dispute) => (\n            <Card key={dispute.id} className=\"crypto-card\" data-testid={`dispute-${dispute.id}`}>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center space-x-4 mb-4\">\n                      <div className=\"flex items-center space-x-2\">\n                        <AlertTriangle className=\"w-5 h-5 text-danger\" />\n                        <span className=\"font-mono text-accent\">#{dispute.orderId}</span>\n                      </div>\n                      <StatusBadge status={dispute.status} type={dispute.statusType} />\n                      <Badge \n                        variant={\n                          dispute.priority === \"High\" ? \"destructive\" :\n                          dispute.priority === \"Medium\" ? \"secondary\" :\n                          \"outline\"\n                        }\n                        className=\"text-xs\"\n                      >\n                        {dispute.priority} Priority\n                      </Badge>\n                    </div>\n                    \n                    <h3 className=\"text-lg font-semibold text-white mb-2\">{dispute.reason}</h3>\n                    \n                    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-4\">\n                      <div>\n                        <p className=\"text-sm text-gray-400\">Buyer</p>\n                        <p className=\"text-white\">{dispute.buyer}</p>\n                      </div>\n                      <div>\n                        <p className=\"text-sm text-gray-400\">Vendor</p>\n                        <p className=\"text-white\">{dispute.vendor}</p>\n                      </div>\n                      <div>\n                        <p className=\"text-sm text-gray-400\">Amount</p>\n                        <p className=\"text-white font-mono\">{dispute.amount}</p>\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex items-center space-x-4 text-sm text-gray-400\">\n                      <span>Created {dispute.created}</span>\n                      <span>•</span>\n                      <span>Order #{dispute.orderId}</span>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex flex-col space-y-2 ml-6\">\n                    <Button variant=\"outline\" className=\"border-border text-gray-300 hover:bg-surface-2\" data-testid={`view-dispute-${dispute.id}`}>\n                      <Eye className=\"w-4 h-4 mr-2\" />\n                      View Details\n                    </Button>\n                    <Button variant=\"outline\" className=\"border-border text-gray-300 hover:bg-surface-2\" data-testid={`messages-dispute-${dispute.id}`}>\n                      <MessageSquare className=\"w-4 h-4 mr-2\" />\n                      Messages\n                    </Button>\n                    {dispute.status === \"Open\" && (\n                      <Button className=\"bg-accent text-bg hover:bg-accent-2\" data-testid={`assign-dispute-${dispute.id}`}>\n                        Assign to Me\n                      </Button>\n                    )}\n                  </div>\n                </div>\n                \n                {dispute.status === \"In Review\" && (\n                  <div className=\"mt-6 pt-6 border-t border-border\">\n                    <h4 className=\"text-white font-medium mb-4\">Resolution Decision</h4>\n                    <div className=\"space-y-4\">\n                      <Textarea \n                        placeholder=\"Add resolution notes...\"\n                        className=\"bg-surface-2 border-border text-white\"\n                        data-testid={`resolution-notes-${dispute.id}`}\n                      />\n                      <div className=\"flex space-x-3\">\n                        <Button className=\"bg-success text-white hover:bg-green-600\" data-testid={`resolve-buyer-${dispute.id}`}>\n                          Resolve for Buyer\n                        </Button>\n                        <Button className=\"bg-warning text-white hover:bg-yellow-600\" data-testid={`resolve-vendor-${dispute.id}`}>\n                          Resolve for Vendor\n                        </Button>\n                        <Button variant=\"outline\" className=\"border-border text-gray-300 hover:bg-surface-2\" data-testid={`request-info-${dispute.id}`}>\n                          Request More Info\n                        </Button>\n                      </div>\n                    </div>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </main>\n  );\n}","size_bytes":9835},"client/src/pages/admin/gift-cards.tsx":{"content":"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { StatusBadge } from \"@/components/ui/status-badge\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Search, Gift, Plus, Check, X, Eye, Edit } from \"lucide-react\";\n\nexport default function AdminGiftCards() {\n\n  const sampleGiftCards = [\n    {\n      id: 1,\n      vendor: \"CryptoAccountsPlus\",\n      type: \"Netflix Premium (1 Year)\",\n      value: \"0.0012 BTC\",\n      usdValue: \"$52\",\n      quantity: 25,\n      sold: 18,\n      status: \"Active\",\n      statusType: \"success\" as const,\n      validUntil: \"2024-12-31\",\n      commission: \"5%\",\n      approved: true\n    },\n    {\n      id: 2,\n      vendor: \"DigitalVault\",\n      type: \"Spotify Premium (6 Months)\",\n      value: \"0.0008 BTC\",\n      usdValue: \"$35\",\n      quantity: 50,\n      sold: 12,\n      status: \"Pending\",\n      statusType: \"warning\" as const,\n      validUntil: \"2024-06-30\",\n      commission: \"5%\",\n      approved: false\n    },\n    {\n      id: 3,\n      vendor: \"PremiumSoft\",\n      type: \"Adobe Creative Cloud (1 Year)\",\n      value: \"0.0034 BTC\",\n      usdValue: \"$149\",\n      quantity: 15,\n      sold: 8,\n      status: \"Active\",\n      statusType: \"success\" as const,\n      validUntil: \"2025-03-31\",\n      commission: \"4%\",\n      approved: true\n    },\n    {\n      id: 4,\n      vendor: \"GameAccounts\",\n      type: \"Steam Wallet ($50)\",\n      value: \"0.0011 BTC\",\n      usdValue: \"$50\",\n      quantity: 100,\n      sold: 67,\n      status: \"Low Stock\",\n      statusType: \"warning\" as const,\n      validUntil: \"No Expiry\",\n      commission: \"6%\",\n      approved: true\n    }\n  ];\n\n  return (\n    \n      <main className=\"flex-1 overflow-y-auto bg-bg p-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between mb-6\">\n          <div>\n            <h1 className=\"text-2xl font-bold text-white\">Gift Card Management</h1>\n            <p className=\"text-gray-300 mt-1\">Manage gift card listings and vendor submissions</p>\n          </div>\n          <Button className=\"bg-accent text-bg hover:bg-accent-2\">\n            <Plus className=\"w-4 h-4 mr-2\" />\n            Create Gift Card\n          </Button>\n        </div>\n\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n          <Card className=\"crypto-card\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <Gift className=\"w-8 h-8 text-accent mr-4\" />\n                <div>\n                  <p className=\"text-sm text-gray-400\">Active Gift Cards</p>\n                  <p className=\"text-2xl font-bold text-white\">45</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"crypto-card\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <div className=\"w-8 h-8 bg-success/20 rounded-lg flex items-center justify-center mr-4\">\n                  <Gift className=\"w-5 h-5 text-success\" />\n                </div>\n                <div>\n                  <p className=\"text-sm text-gray-400\">Total Sales</p>\n                  <p className=\"text-2xl font-bold text-white\">1,247</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"crypto-card\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <div className=\"w-8 h-8 bg-warning/20 rounded-lg flex items-center justify-center mr-4\">\n                  <span className=\"text-warning font-bold\">₿</span>\n                </div>\n                <div>\n                  <p className=\"text-sm text-gray-400\">Revenue</p>\n                  <p className=\"text-2xl font-bold text-white\">12.8 BTC</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"crypto-card\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <div className=\"w-8 h-8 bg-danger/20 rounded-lg flex items-center justify-center mr-4\">\n                  <Gift className=\"w-5 h-5 text-danger\" />\n                </div>\n                <div>\n                  <p className=\"text-sm text-gray-400\">Pending Approval</p>\n                  <p className=\"text-2xl font-bold text-white\">7</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Filters */}\n        <Card className=\"crypto-card mb-6\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex flex-col md:flex-row gap-4\">\n              <div className=\"flex-1\">\n                <div className=\"relative\">\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n                  <Input \n                    placeholder=\"Search gift cards by type or vendor...\" \n                    className=\"pl-10 bg-surface-2 border-border text-white\"\n                    data-testid=\"search-gift-cards\"\n                  />\n                </div>\n              </div>\n              <Select>\n                <SelectTrigger className=\"w-40 bg-surface-2 border-border text-white\">\n                  <SelectValue placeholder=\"Status\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Status</SelectItem>\n                  <SelectItem value=\"active\">Active</SelectItem>\n                  <SelectItem value=\"pending\">Pending</SelectItem>\n                  <SelectItem value=\"low-stock\">Low Stock</SelectItem>\n                  <SelectItem value=\"expired\">Expired</SelectItem>\n                </SelectContent>\n              </Select>\n              <Select>\n                <SelectTrigger className=\"w-40 bg-surface-2 border-border text-white\">\n                  <SelectValue placeholder=\"Vendor\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Vendors</SelectItem>\n                  <SelectItem value=\"crypto-accounts\">CryptoAccountsPlus</SelectItem>\n                  <SelectItem value=\"digital-vault\">DigitalVault</SelectItem>\n                  <SelectItem value=\"premium-soft\">PremiumSoft</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Gift Cards Table */}\n        <Card className=\"crypto-card\">\n          <CardHeader>\n            <CardTitle className=\"text-white\">Gift Card Listings</CardTitle>\n          </CardHeader>\n          <CardContent className=\"p-0\">\n            <div className=\"overflow-x-auto\">\n              <table className=\"w-full\">\n                <thead className=\"bg-surface-2\">\n                  <tr>\n                    <th className=\"text-left p-4 text-sm font-medium text-gray-300\">Gift Card Type</th>\n                    <th className=\"text-left p-4 text-sm font-medium text-gray-300\">Vendor</th>\n                    <th className=\"text-left p-4 text-sm font-medium text-gray-300\">Value</th>\n                    <th className=\"text-left p-4 text-sm font-medium text-gray-300\">Stock</th>\n                    <th className=\"text-left p-4 text-sm font-medium text-gray-300\">Sales</th>\n                    <th className=\"text-left p-4 text-sm font-medium text-gray-300\">Status</th>\n                    <th className=\"text-left p-4 text-sm font-medium text-gray-300\">Valid Until</th>\n                    <th className=\"text-left p-4 text-sm font-medium text-gray-300\">Commission</th>\n                    <th className=\"text-left p-4 text-sm font-medium text-gray-300\">Actions</th>\n                  </tr>\n                </thead>\n                <tbody className=\"divide-y divide-border\">\n                  {sampleGiftCards.map((card) => (\n                    <tr key={card.id} className=\"hover:bg-surface-2/50\" data-testid={`gift-card-row-${card.id}`}>\n                      <td className=\"p-4\">\n                        <div className=\"flex items-center\">\n                          <div className=\"w-10 h-10 bg-accent/20 rounded-lg flex items-center justify-center mr-3\">\n                            <Gift className=\"w-5 h-5 text-accent\" />\n                          </div>\n                          <div>\n                            <p className=\"font-medium text-white\">{card.type}</p>\n                          </div>\n                        </div>\n                      </td>\n                      <td className=\"p-4 text-gray-300\">{card.vendor}</td>\n                      <td className=\"p-4\">\n                        <div>\n                          <p className=\"font-mono text-white\">{card.value}</p>\n                          <p className=\"text-sm text-gray-400\">{card.usdValue}</p>\n                        </div>\n                      </td>\n                      <td className=\"p-4\">\n                        <div>\n                          <p className=\"text-white\">{card.quantity - card.sold}</p>\n                          <p className=\"text-sm text-gray-400\">of {card.quantity}</p>\n                        </div>\n                      </td>\n                      <td className=\"p-4 text-white\">{card.sold}</td>\n                      <td className=\"p-4\">\n                        <StatusBadge status={card.status} type={card.statusType} />\n                      </td>\n                      <td className=\"p-4 text-gray-300\">{card.validUntil}</td>\n                      <td className=\"p-4 text-white\">{card.commission}</td>\n                      <td className=\"p-4\">\n                        <div className=\"flex items-center space-x-2\">\n                          {!card.approved && (\n                            <>\n                              <Button variant=\"ghost\" size=\"sm\" className=\"text-success hover:text-green-400\" data-testid={`approve-card-${card.id}`}>\n                                <Check className=\"w-4 h-4\" />\n                              </Button>\n                              <Button variant=\"ghost\" size=\"sm\" className=\"text-danger hover:text-red-400\" data-testid={`reject-card-${card.id}`}>\n                                <X className=\"w-4 h-4\" />\n                              </Button>\n                            </>\n                          )}\n                          <Button variant=\"ghost\" size=\"sm\" className=\"text-gray-400 hover:text-white\" data-testid={`view-card-${card.id}`}>\n                            <Eye className=\"w-4 h-4\" />\n                          </Button>\n                          <Button variant=\"ghost\" size=\"sm\" className=\"text-gray-400 hover:text-white\" data-testid={`edit-card-${card.id}`}>\n                            <Edit className=\"w-4 h-4\" />\n                          </Button>\n                        </div>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Quick Actions */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mt-6\">\n          <Card className=\"crypto-card\">\n            <CardHeader>\n              <CardTitle className=\"text-white\">Popular Gift Card Types</CardTitle>\n            </CardHeader>\n            <CardContent className=\"p-6\">\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center justify-between p-3 bg-surface-2 rounded-lg\">\n                  <div>\n                    <p className=\"text-white font-medium\">Netflix Premium</p>\n                    <p className=\"text-sm text-gray-400\">Streaming service</p>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"text-white\">143 sold</p>\n                    <p className=\"text-sm text-accent\">45 in stock</p>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-center justify-between p-3 bg-surface-2 rounded-lg\">\n                  <div>\n                    <p className=\"text-white font-medium\">Steam Wallet</p>\n                    <p className=\"text-sm text-gray-400\">Gaming platform</p>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"text-white\">89 sold</p>\n                    <p className=\"text-sm text-accent\">33 in stock</p>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-center justify-between p-3 bg-surface-2 rounded-lg\">\n                  <div>\n                    <p className=\"text-white font-medium\">Adobe Creative Cloud</p>\n                    <p className=\"text-sm text-gray-400\">Design software</p>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"text-white\">67 sold</p>\n                    <p className=\"text-sm text-warning\">7 in stock</p>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"crypto-card\">\n            <CardHeader>\n              <CardTitle className=\"text-white\">Gift Card Settings</CardTitle>\n            </CardHeader>\n            <CardContent className=\"p-6\">\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center justify-between p-3 bg-surface-2 rounded-lg\">\n                  <span className=\"text-gray-300\">Auto-approve new listings</span>\n                  <Badge variant=\"secondary\">Disabled</Badge>\n                </div>\n                \n                <div className=\"flex items-center justify-between p-3 bg-surface-2 rounded-lg\">\n                  <span className=\"text-gray-300\">Low stock threshold</span>\n                  <Badge variant=\"outline\">10 units</Badge>\n                </div>\n                \n                <div className=\"flex items-center justify-between p-3 bg-surface-2 rounded-lg\">\n                  <span className=\"text-gray-300\">Expiry notifications</span>\n                  <Badge variant=\"default\">Enabled</Badge>\n                </div>\n                \n                <Button variant=\"outline\" className=\"w-full border-border text-gray-300 hover:bg-surface-2\" data-testid=\"manage-settings\">\n                  Manage Settings\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </main>\n    \n  );\n}","size_bytes":14644},"client/src/pages/admin/listings.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { StatusBadge } from \"@/components/ui/status-badge\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from \"@/components/ui/alert-dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel } from \"@/components/ui/form\";\nimport { useForm } from \"react-hook-form\";\nimport { Search, Filter, Check, X, Edit, Trash2, Eye, Star, MapPin, Calendar } from \"lucide-react\";\nimport { SAMPLE_LISTINGS } from \"@/lib/constants\";\n\nexport default function AdminListings() {\n  const [viewListingModalOpen, setViewListingModalOpen] = useState(false);\n  const [editListingModalOpen, setEditListingModalOpen] = useState(false);\n  const [deleteConfirmOpen, setDeleteConfirmOpen] = useState(false);\n  const [selectedListing, setSelectedListing] = useState<any>(null);\n  \n  const editForm = useForm({\n    defaultValues: {\n      title: \"\",\n      description: \"\",\n      vendor: \"\",\n      category: \"\",\n      btcPrice: \"\",\n      xmrPrice: \"\",\n      delivery: \"\",\n      status: \"Pending\"\n    }\n  });\n  \n  const handleViewListing = (listing: any) => {\n    setSelectedListing(listing);\n    setViewListingModalOpen(true);\n  };\n  \n  const handleEditListing = (listing: any) => {\n    setSelectedListing(listing);\n    editForm.reset({\n      title: listing.title,\n      description: listing.description,\n      vendor: listing.vendor,\n      category: listing.category,\n      btcPrice: listing.btcPrice,\n      xmrPrice: listing.xmrPrice,\n      delivery: listing.delivery,\n      status: listing.status\n    });\n    setEditListingModalOpen(true);\n  };\n  \n  const handleUpdateListing = (data: any) => {\n    console.log(\"Updating listing:\", selectedListing?.id, data);\n    setEditListingModalOpen(false);\n  };\n  \n  const handleDeleteListing = (listing: any) => {\n    setSelectedListing(listing);\n    setDeleteConfirmOpen(true);\n  };\n  \n  const confirmDeleteListing = () => {\n    console.log(\"Confirmed deleting listing:\", selectedListing?.id);\n    setDeleteConfirmOpen(false);\n    setSelectedListing(null);\n  };\n  \n  const handleApproveListing = (listingId: number) => {\n    console.log(\"Approving listing:\", listingId);\n  };\n  \n  const handleRejectListing = (listingId: number) => {\n    console.log(\"Rejecting listing:\", listingId);\n  };\n\n  const extendedListings = [\n    ...SAMPLE_LISTINGS.map(listing => ({\n      ...listing,\n      status: \"Approved\" as const,\n      statusType: \"success\" as const,\n      category: \"Streaming\",\n      created: \"2 days ago\",\n      lastUpdate: \"1 hour ago\"\n    })),\n    {\n      id: 4,\n      title: \"Steam Account with 100+ Games\",\n      description: \"Premium Steam account with extensive game library including AAA titles.\",\n      vendor: \"GamingAccounts\",\n      rating: 4.6,\n      reviews: 78,\n      btcPrice: \"0.0025\",\n      xmrPrice: \"1.84\",\n      delivery: \"Manual Delivery\",\n      deliveryType: \"accent\" as const,\n      status: \"Pending\" as const,\n      statusType: \"warning\" as const,\n      category: \"Gaming\",\n      created: \"1 day ago\",\n      lastUpdate: \"6 hours ago\"\n    },\n    {\n      id: 5,\n      title: \"Office 365 Business License\",\n      description: \"Complete Office 365 business suite with all applications included.\",\n      vendor: \"BusinessSoft\",\n      rating: 0,\n      reviews: 0,\n      btcPrice: \"0.0045\",\n      xmrPrice: \"3.21\",\n      delivery: \"Instant Delivery\",\n      deliveryType: \"success\" as const,\n      status: \"Rejected\" as const,\n      statusType: \"danger\" as const,\n      category: \"Software\",\n      created: \"3 days ago\",\n      lastUpdate: \"2 days ago\"\n    }\n  ];\n\n  return (\n    <main className=\"flex-1 overflow-y-auto bg-bg p-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between mb-6\">\n          <div>\n            <h1 className=\"text-2xl font-bold text-white\">Listing Management</h1>\n            <p className=\"text-gray-300 mt-1\">Review and manage product listings from vendors</p>\n          </div>\n          <div className=\"flex space-x-3\">\n            <Button variant=\"outline\" className=\"border-border text-gray-300 hover:bg-surface-2\">\n              Bulk Actions\n            </Button>\n            <Button className=\"bg-accent text-bg hover:bg-accent-2\">\n              Export Data\n            </Button>\n          </div>\n        </div>\n\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n          <Card className=\"crypto-card\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <div className=\"p-2 bg-success/20 rounded-lg\">\n                  <Check className=\"w-6 h-6 text-success\" />\n                </div>\n                <div className=\"ml-4\">\n                  <p className=\"text-sm text-gray-400\">Approved</p>\n                  <p className=\"text-2xl font-bold text-white\">1,432</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"crypto-card\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <div className=\"p-2 bg-warning/20 rounded-lg\">\n                  <div className=\"w-6 h-6 bg-warning rounded\"></div>\n                </div>\n                <div className=\"ml-4\">\n                  <p className=\"text-sm text-gray-400\">Pending Review</p>\n                  <p className=\"text-2xl font-bold text-white\">47</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"crypto-card\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <div className=\"p-2 bg-danger/20 rounded-lg\">\n                  <X className=\"w-6 h-6 text-danger\" />\n                </div>\n                <div className=\"ml-4\">\n                  <p className=\"text-sm text-gray-400\">Rejected</p>\n                  <p className=\"text-2xl font-bold text-white\">23</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"crypto-card\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <div className=\"p-2 bg-accent/20 rounded-lg\">\n                  <Edit className=\"w-6 h-6 text-accent\" />\n                </div>\n                <div className=\"ml-4\">\n                  <p className=\"text-sm text-gray-400\">Draft</p>\n                  <p className=\"text-2xl font-bold text-white\">12</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Filters */}\n        <Card className=\"crypto-card mb-6\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex flex-col md:flex-row gap-4\">\n              <div className=\"flex-1\">\n                <div className=\"relative\">\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n                  <Input \n                    placeholder=\"Search listings by title, vendor, or category...\" \n                    className=\"pl-10 bg-surface-2 border-border text-white\"\n                    data-testid=\"search-listings\"\n                  />\n                </div>\n              </div>\n              <Select>\n                <SelectTrigger className=\"w-40 bg-surface-2 border-border text-white\">\n                  <SelectValue placeholder=\"Status\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Status</SelectItem>\n                  <SelectItem value=\"approved\">Approved</SelectItem>\n                  <SelectItem value=\"pending\">Pending</SelectItem>\n                  <SelectItem value=\"rejected\">Rejected</SelectItem>\n                </SelectContent>\n              </Select>\n              <Select>\n                <SelectTrigger className=\"w-40 bg-surface-2 border-border text-white\">\n                  <SelectValue placeholder=\"Category\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Categories</SelectItem>\n                  <SelectItem value=\"streaming\">Streaming</SelectItem>\n                  <SelectItem value=\"gaming\">Gaming</SelectItem>\n                  <SelectItem value=\"software\">Software</SelectItem>\n                </SelectContent>\n              </Select>\n              <Button variant=\"outline\" className=\"border-border hover:bg-surface-2\">\n                <Filter className=\"w-4 h-4 mr-2\" />\n                Filter\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Listings Table */}\n        <Card className=\"crypto-card\">\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <CardTitle className=\"text-white\">Product Listings</CardTitle>\n              <div className=\"flex items-center space-x-2\">\n                <Checkbox id=\"selectAll\" className=\"border-border\" />\n                <label htmlFor=\"selectAll\" className=\"text-sm text-gray-300\">Select All</label>\n              </div>\n            </div>\n          </CardHeader>\n          <CardContent className=\"p-0\">\n            <div className=\"overflow-x-auto\">\n              <table className=\"w-full\">\n                <thead className=\"bg-surface-2\">\n                  <tr>\n                    <th className=\"text-left p-4 text-sm font-medium text-gray-300 w-8\"></th>\n                    <th className=\"text-left p-4 text-sm font-medium text-gray-300\">Product</th>\n                    <th className=\"text-left p-4 text-sm font-medium text-gray-300\">Vendor</th>\n                    <th className=\"text-left p-4 text-sm font-medium text-gray-300\">Category</th>\n                    <th className=\"text-left p-4 text-sm font-medium text-gray-300\">Price</th>\n                    <th className=\"text-left p-4 text-sm font-medium text-gray-300\">Status</th>\n                    <th className=\"text-left p-4 text-sm font-medium text-gray-300\">Created</th>\n                    <th className=\"text-left p-4 text-sm font-medium text-gray-300\">Actions</th>\n                  </tr>\n                </thead>\n                <tbody className=\"divide-y divide-border\">\n                  {extendedListings.map((listing) => (\n                    <tr key={listing.id} className=\"hover:bg-surface-2/50\" data-testid={`listing-row-${listing.id}`}>\n                      <td className=\"p-4\">\n                        <Checkbox className=\"border-border\" />\n                      </td>\n                      <td className=\"p-4\">\n                        <div className=\"flex items-start\">\n                          <div className=\"w-12 h-12 bg-accent/20 rounded-lg flex items-center justify-center mr-3 flex-shrink-0\">\n                            <span className=\"text-accent text-sm font-medium\">{listing.title[0]}</span>\n                          </div>\n                          <div className=\"min-w-0\">\n                            <p className=\"font-medium text-white truncate\">{listing.title}</p>\n                            <p className=\"text-sm text-gray-400 line-clamp-2\">{listing.description}</p>\n                          </div>\n                        </div>\n                      </td>\n                      <td className=\"p-4 text-gray-300\">{listing.vendor}</td>\n                      <td className=\"p-4\">\n                        <Badge variant=\"outline\" className=\"text-gray-300\">\n                          {listing.category}\n                        </Badge>\n                      </td>\n                      <td className=\"p-4\">\n                        <div className=\"space-y-1\">\n                          <div className=\"text-white font-mono text-sm\">{listing.btcPrice} BTC</div>\n                          <div className=\"text-gray-400 font-mono text-xs\">{listing.xmrPrice} XMR</div>\n                        </div>\n                      </td>\n                      <td className=\"p-4\">\n                        <StatusBadge status={listing.status} type={listing.statusType} />\n                      </td>\n                      <td className=\"p-4 text-gray-300\">{listing.created}</td>\n                      <td className=\"p-4\">\n                        <div className=\"flex items-center space-x-2\">\n                          <Button \n                            variant=\"ghost\" \n                            size=\"sm\" \n                            className=\"text-gray-400 hover:text-white\" \n                            onClick={() => handleViewListing(listing)}\n                            data-testid={`view-listing-${listing.id}`}\n                          >\n                            <Eye className=\"w-4 h-4\" />\n                          </Button>\n                          {listing.status === \"Pending\" && (\n                            <>\n                              <Button \n                                variant=\"ghost\" \n                                size=\"sm\" \n                                className=\"text-success hover:text-green-400\" \n                                onClick={() => handleApproveListing(listing.id)}\n                                data-testid={`approve-listing-${listing.id}`}\n                              >\n                                <Check className=\"w-4 h-4\" />\n                              </Button>\n                              <Button \n                                variant=\"ghost\" \n                                size=\"sm\" \n                                className=\"text-danger hover:text-red-400\" \n                                onClick={() => handleRejectListing(listing.id)}\n                                data-testid={`reject-listing-${listing.id}`}\n                              >\n                                <X className=\"w-4 h-4\" />\n                              </Button>\n                            </>\n                          )}\n                          <Button \n                            variant=\"ghost\" \n                            size=\"sm\" \n                            className=\"text-gray-400 hover:text-white\" \n                            onClick={() => handleEditListing(listing)}\n                            data-testid={`edit-listing-${listing.id}`}\n                          >\n                            <Edit className=\"w-4 h-4\" />\n                          </Button>\n                          <Button \n                            variant=\"ghost\" \n                            size=\"sm\" \n                            className=\"text-danger hover:text-red-400\" \n                            onClick={() => handleDeleteListing(listing)}\n                            data-testid={`delete-listing-${listing.id}`}\n                          >\n                            <Trash2 className=\"w-4 h-4\" />\n                          </Button>\n                        </div>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          </CardContent>\n        </Card>\n        \n        {/* View Listing Modal */}\n        <Dialog open={viewListingModalOpen} onOpenChange={setViewListingModalOpen}>\n          <DialogContent className=\"sm:max-w-[600px] bg-card border border-border shadow-xl max-h-[90vh] overflow-hidden flex flex-col\">\n            <DialogHeader className=\"flex-shrink-0\">\n              <DialogTitle className=\"text-white\">Listing Details</DialogTitle>\n            </DialogHeader>\n            {selectedListing && (\n              <div className=\"space-y-6 overflow-y-auto flex-1 pr-2\">\n                {/* Listing Header */}\n                <div className=\"flex items-start gap-4\">\n                  <div className=\"w-16 h-16 bg-accent/20 rounded-lg flex items-center justify-center flex-shrink-0\">\n                    <span className=\"text-accent text-xl font-medium\">{selectedListing.title[0]}</span>\n                  </div>\n                  <div className=\"flex-1\">\n                    <h3 className=\"text-xl font-semibold text-white\">{selectedListing.title}</h3>\n                    <div className=\"flex items-center gap-4 mt-2\">\n                      <div className=\"flex items-center gap-1\">\n                        <Star className=\"w-4 h-4 text-yellow-400\" />\n                        <span className=\"text-white font-medium\">{selectedListing.rating || 'N/A'}</span>\n                        <span className=\"text-gray-400\">({selectedListing.reviews || 0} reviews)</span>\n                      </div>\n                      <StatusBadge status={selectedListing.status} type={selectedListing.statusType} />\n                    </div>\n                  </div>\n                </div>\n                \n                {/* Listing Info */}\n                <div className=\"grid grid-cols-2 gap-6\">\n                  <div>\n                    <Label className=\"text-gray-300 text-sm font-medium\">Vendor</Label>\n                    <p className=\"text-white mt-1\">{selectedListing.vendor}</p>\n                  </div>\n                  <div>\n                    <Label className=\"text-gray-300 text-sm font-medium\">Category</Label>\n                    <p className=\"text-white mt-1\">{selectedListing.category}</p>\n                  </div>\n                  <div>\n                    <Label className=\"text-gray-300 text-sm font-medium\">Created</Label>\n                    <div className=\"flex items-center gap-2 mt-1\">\n                      <Calendar className=\"w-4 h-4 text-gray-400\" />\n                      <span className=\"text-white\">{selectedListing.created}</span>\n                    </div>\n                  </div>\n                  <div>\n                    <Label className=\"text-gray-300 text-sm font-medium\">Last Updated</Label>\n                    <p className=\"text-white mt-1\">{selectedListing.lastUpdate}</p>\n                  </div>\n                </div>\n                \n                {/* Description */}\n                <div>\n                  <Label className=\"text-gray-300 text-sm font-medium\">Description</Label>\n                  <p className=\"text-gray-300 mt-2 leading-relaxed\">{selectedListing.description}</p>\n                </div>\n                \n                {/* Pricing */}\n                <div>\n                  <Label className=\"text-gray-300 text-sm font-medium\">Pricing</Label>\n                  <div className=\"bg-surface-2 rounded-lg p-4 mt-2\">\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div>\n                        <p className=\"text-sm text-gray-400\">Bitcoin Price</p>\n                        <p className=\"text-white font-mono text-lg\">{selectedListing.btcPrice} BTC</p>\n                      </div>\n                      <div>\n                        <p className=\"text-sm text-gray-400\">Monero Price</p>\n                        <p className=\"text-white font-mono text-lg\">{selectedListing.xmrPrice} XMR</p>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n                \n                {/* Delivery */}\n                <div>\n                  <Label className=\"text-gray-300 text-sm font-medium\">Delivery Method</Label>\n                  <div className=\"flex items-center gap-2 mt-2\">\n                    <MapPin className=\"w-4 h-4 text-gray-400\" />\n                    <Badge variant=\"outline\" className={`\n                      ${selectedListing.deliveryType === 'success' ? 'border-success text-success' : \n                        selectedListing.deliveryType === 'accent' ? 'border-accent text-accent' : \n                        'border-gray-400 text-gray-400'}\n                    `}>\n                      {selectedListing.delivery}\n                    </Badge>\n                  </div>\n                </div>\n                \n                {/* Actions */}\n                <div className=\"flex justify-end space-x-3 pt-4 border-t border-border\">\n                  <Button \n                    variant=\"outline\" \n                    onClick={() => setViewListingModalOpen(false)}\n                    className=\"border-border text-gray-300 hover:bg-surface-2\"\n                    data-testid=\"btn-close-listing-details\"\n                  >\n                    Close\n                  </Button>\n                  <Button \n                    onClick={() => {\n                      setViewListingModalOpen(false);\n                      handleEditListing(selectedListing);\n                    }}\n                    className=\"bg-accent text-bg hover:bg-accent-2\"\n                    data-testid=\"btn-edit-from-details\"\n                  >\n                    <Edit className=\"w-4 h-4 mr-2\" />\n                    Edit Listing\n                  </Button>\n                </div>\n              </div>\n            )}\n          </DialogContent>\n        </Dialog>\n        \n        {/* Edit Listing Modal */}\n        <Dialog open={editListingModalOpen} onOpenChange={setEditListingModalOpen}>\n          <DialogContent className=\"sm:max-w-[600px] bg-card border border-border shadow-xl max-h-[90vh] overflow-hidden flex flex-col\">\n            <DialogHeader className=\"flex-shrink-0\">\n              <DialogTitle className=\"text-white\">Edit Listing</DialogTitle>\n            </DialogHeader>\n            <Form {...editForm}>\n              <form onSubmit={editForm.handleSubmit(handleUpdateListing)} className=\"space-y-4 overflow-y-auto flex-1 pr-2\">\n                <FormField\n                  control={editForm.control}\n                  name=\"title\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-gray-300\">Product Title</FormLabel>\n                      <FormControl>\n                        <Input \n                          placeholder=\"Enter product title\" \n                          className=\"!bg-gray-800 !border-gray-600 !text-white placeholder:text-gray-400 focus:!bg-gray-800\"\n                          data-testid=\"edit-input-title\"\n                          {...field} \n                        />\n                      </FormControl>\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={editForm.control}\n                  name=\"description\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-gray-300\">Description</FormLabel>\n                      <FormControl>\n                        <Textarea \n                          placeholder=\"Enter product description\" \n                          className=\"!bg-gray-800 !border-gray-600 !text-white placeholder:text-gray-400 min-h-[100px] resize-none focus:!bg-gray-800\"\n                          data-testid=\"edit-textarea-description\"\n                          {...field} \n                        />\n                      </FormControl>\n                    </FormItem>\n                  )}\n                />\n                \n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={editForm.control}\n                    name=\"vendor\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel className=\"text-gray-300\">Vendor</FormLabel>\n                        <FormControl>\n                          <Input \n                            placeholder=\"Vendor name\" \n                            className=\"!bg-gray-800 !border-gray-600 !text-white placeholder:text-gray-400 focus:!bg-gray-800\"\n                            data-testid=\"edit-input-vendor\"\n                            {...field} \n                          />\n                        </FormControl>\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={editForm.control}\n                    name=\"category\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel className=\"text-gray-300\">Category</FormLabel>\n                        <Select onValueChange={field.onChange} value={field.value}>\n                          <FormControl>\n                            <SelectTrigger className=\"!bg-gray-800 !border-gray-600 !text-white focus:!bg-gray-800\" data-testid=\"edit-select-category\">\n                              <SelectValue placeholder=\"Select category\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            <SelectItem value=\"Streaming\">Streaming</SelectItem>\n                            <SelectItem value=\"Gaming\">Gaming</SelectItem>\n                            <SelectItem value=\"Software\">Software</SelectItem>\n                            <SelectItem value=\"Social Media\">Social Media</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </FormItem>\n                    )}\n                  />\n                </div>\n                \n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={editForm.control}\n                    name=\"btcPrice\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel className=\"text-gray-300\">Bitcoin Price</FormLabel>\n                        <FormControl>\n                          <Input \n                            placeholder=\"0.0000\" \n                            className=\"!bg-gray-800 !border-gray-600 !text-white placeholder:text-gray-400 font-mono focus:!bg-gray-800\"\n                            data-testid=\"edit-input-btc-price\"\n                            {...field} \n                          />\n                        </FormControl>\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={editForm.control}\n                    name=\"xmrPrice\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel className=\"text-gray-300\">Monero Price</FormLabel>\n                        <FormControl>\n                          <Input \n                            placeholder=\"0.00\" \n                            className=\"!bg-gray-800 !border-gray-600 !text-white placeholder:text-gray-400 font-mono focus:!bg-gray-800\"\n                            data-testid=\"edit-input-xmr-price\"\n                            {...field} \n                          />\n                        </FormControl>\n                      </FormItem>\n                    )}\n                  />\n                </div>\n                \n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={editForm.control}\n                    name=\"delivery\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel className=\"text-gray-300\">Delivery Method</FormLabel>\n                        <Select onValueChange={field.onChange} value={field.value}>\n                          <FormControl>\n                            <SelectTrigger className=\"!bg-gray-800 !border-gray-600 !text-white focus:!bg-gray-800\" data-testid=\"edit-select-delivery\">\n                              <SelectValue placeholder=\"Select delivery method\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            <SelectItem value=\"Instant Delivery\">Instant Delivery</SelectItem>\n                            <SelectItem value=\"Manual Delivery\">Manual Delivery</SelectItem>\n                            <SelectItem value=\"24h Delivery\">24h Delivery</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={editForm.control}\n                    name=\"status\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel className=\"text-gray-300\">Status</FormLabel>\n                        <Select onValueChange={field.onChange} value={field.value}>\n                          <FormControl>\n                            <SelectTrigger className=\"!bg-gray-800 !border-gray-600 !text-white focus:!bg-gray-800\" data-testid=\"edit-select-status\">\n                              <SelectValue placeholder=\"Select status\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            <SelectItem value=\"Approved\">Approved</SelectItem>\n                            <SelectItem value=\"Pending\">Pending</SelectItem>\n                            <SelectItem value=\"Rejected\">Rejected</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </FormItem>\n                    )}\n                  />\n                </div>\n                \n                <div className=\"flex justify-end space-x-3 pt-4 border-t border-border mt-6 flex-shrink-0\">\n                  <Button \n                    type=\"button\" \n                    variant=\"outline\" \n                    onClick={() => setEditListingModalOpen(false)}\n                    className=\"border-border text-gray-300 hover:bg-surface-2\"\n                    data-testid=\"btn-cancel-edit-listing\"\n                  >\n                    Cancel\n                  </Button>\n                  <Button \n                    type=\"submit\" \n                    className=\"bg-accent text-bg hover:bg-accent-2\"\n                    data-testid=\"btn-update-listing\"\n                  >\n                    Update Listing\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n        \n        {/* Delete Confirmation Dialog */}\n        <AlertDialog open={deleteConfirmOpen} onOpenChange={setDeleteConfirmOpen}>\n          <AlertDialogContent className=\"bg-card border-border\">\n            <AlertDialogHeader>\n              <AlertDialogTitle className=\"text-white\">Delete Listing</AlertDialogTitle>\n              <AlertDialogDescription className=\"text-gray-300\">\n                Are you sure you want to permanently delete the listing <strong className=\"text-white\">\"{selectedListing?.title}\"</strong>? \n                This action cannot be undone and will remove the listing from the marketplace.\n              </AlertDialogDescription>\n            </AlertDialogHeader>\n            <AlertDialogFooter>\n              <AlertDialogCancel \n                className=\"border-border text-gray-300 hover:bg-surface-2\"\n                data-testid=\"btn-cancel-delete-listing\"\n              >\n                Cancel\n              </AlertDialogCancel>\n              <AlertDialogAction \n                onClick={confirmDeleteListing}\n                className=\"bg-danger text-white hover:bg-red-600\"\n                data-testid=\"btn-confirm-delete-listing\"\n              >\n                Delete Listing\n              </AlertDialogAction>\n            </AlertDialogFooter>\n          </AlertDialogContent>\n        </AlertDialog>\n      </main>\n  );\n}","size_bytes":31990},"client/src/pages/admin/messages.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Search, Filter, MessageSquare, Ban, Lock, Flag, Plus, Trash2 } from \"lucide-react\";\n\nexport default function AdminMessages() {\n\n  const sampleMessages = [\n    {\n      id: 1,\n      conversation: \"crypto_buyer_89 ↔ CryptoAccountsPlus\",\n      lastMessage: \"Thank you for the quick delivery! Account works perfectly.\",\n      timestamp: \"5 min ago\",\n      status: \"Active\",\n      statusType: \"success\" as const,\n      flagged: false,\n      orderId: \"ORD-2847\"\n    },\n    {\n      id: 2,\n      conversation: \"privacy_first ↔ PremiumDigital\",\n      lastMessage: \"The account credentials you provided are not working...\",\n      timestamp: \"2 hours ago\",\n      status: \"Flagged\",\n      statusType: \"danger\" as const,\n      flagged: true,\n      orderId: \"ORD-2844\"\n    },\n    {\n      id: 3,\n      conversation: \"anon_user_423 ↔ DigitalVault\",\n      lastMessage: \"When will you deliver the Spotify account?\",\n      timestamp: \"4 hours ago\",\n      status: \"Active\",\n      statusType: \"success\" as const,\n      flagged: false,\n      orderId: \"ORD-2846\"\n    }\n  ];\n\n  const blockedKeywords = [\n    \"scam\", \"fraud\", \"fake\", \"illegal\", \"stolen\", \"hack\", \"cracked\", \"virus\", \"malware\", \"phishing\"\n  ];\n\n  return (\n    <main className=\"flex-1 overflow-y-auto bg-bg p-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between mb-6\">\n          <div>\n            <h1 className=\"text-2xl font-bold text-white\">Message Management</h1>\n            <p className=\"text-gray-300 mt-1\">Monitor conversations and manage content moderation</p>\n          </div>\n          <Button className=\"bg-accent text-bg hover:bg-accent-2\">\n            Export Messages\n          </Button>\n        </div>\n\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n          <Card className=\"crypto-card\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <MessageSquare className=\"w-8 h-8 text-accent mr-4\" />\n                <div>\n                  <p className=\"text-sm text-gray-400\">Total Conversations</p>\n                  <p className=\"text-2xl font-bold text-white\">2,847</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"crypto-card\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <Flag className=\"w-8 h-8 text-danger mr-4\" />\n                <div>\n                  <p className=\"text-sm text-gray-400\">Flagged Messages</p>\n                  <p className=\"text-2xl font-bold text-white\">12</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"crypto-card\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <Ban className=\"w-8 h-8 text-warning mr-4\" />\n                <div>\n                  <p className=\"text-sm text-gray-400\">Blocked Keywords</p>\n                  <p className=\"text-2xl font-bold text-white\">{blockedKeywords.length}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"crypto-card\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <Lock className=\"w-8 h-8 text-muted mr-4\" />\n                <div>\n                  <p className=\"text-sm text-gray-400\">Locked Conversations</p>\n                  <p className=\"text-2xl font-bold text-white\">3</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <Tabs defaultValue=\"conversations\" className=\"w-full\">\n          <TabsList className=\"bg-surface-2 mb-6\">\n            <TabsTrigger value=\"conversations\" className=\"text-gray-300 data-[state=active]:text-white\">\n              Conversations\n            </TabsTrigger>\n            <TabsTrigger value=\"moderation\" className=\"text-gray-300 data-[state=active]:text-white\">\n              Content Moderation\n            </TabsTrigger>\n            <TabsTrigger value=\"keywords\" className=\"text-gray-300 data-[state=active]:text-white\">\n              Blocked Keywords\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"conversations\">\n            {/* Filters */}\n            <Card className=\"crypto-card mb-6\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex flex-col md:flex-row gap-4\">\n                  <div className=\"flex-1\">\n                    <div className=\"relative\">\n                      <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n                      <Input \n                        placeholder=\"Search conversations by users or order ID...\" \n                        className=\"pl-10 bg-surface-2 border-border text-white\"\n                        data-testid=\"search-conversations\"\n                      />\n                    </div>\n                  </div>\n                  <Select>\n                    <SelectTrigger className=\"w-40 bg-surface-2 border-border text-white\">\n                      <SelectValue placeholder=\"Status\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All Status</SelectItem>\n                      <SelectItem value=\"active\">Active</SelectItem>\n                      <SelectItem value=\"flagged\">Flagged</SelectItem>\n                      <SelectItem value=\"locked\">Locked</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Conversations List */}\n            <Card className=\"crypto-card\">\n              <CardHeader>\n                <CardTitle className=\"text-white\">Recent Conversations</CardTitle>\n              </CardHeader>\n              <CardContent className=\"p-0\">\n                <div className=\"space-y-0\">\n                  {sampleMessages.map((message) => (\n                    <div \n                      key={message.id} \n                      className=\"border-b border-border p-6 hover:bg-surface-2/50 transition-colors\"\n                      data-testid={`conversation-${message.id}`}\n                    >\n                      <div className=\"flex items-start justify-between\">\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center space-x-3 mb-2\">\n                            <h3 className=\"font-medium text-white\">{message.conversation}</h3>\n                            <Badge \n                              variant={message.flagged ? \"destructive\" : \"secondary\"}\n                              className=\"text-xs\"\n                            >\n                              {message.status}\n                            </Badge>\n                            {message.flagged && (\n                              <Flag className=\"w-4 h-4 text-danger\" />\n                            )}\n                          </div>\n                          <p className=\"text-gray-300 mb-2\">{message.lastMessage}</p>\n                          <div className=\"flex items-center space-x-4 text-sm text-gray-400\">\n                            <span>{message.timestamp}</span>\n                            <span>•</span>\n                            <span>Order #{message.orderId}</span>\n                          </div>\n                        </div>\n                        \n                        <div className=\"flex items-center space-x-2 ml-6\">\n                          <Button variant=\"ghost\" size=\"sm\" className=\"text-gray-400 hover:text-white\" data-testid={`view-conversation-${message.id}`}>\n                            <MessageSquare className=\"w-4 h-4\" />\n                          </Button>\n                          <Button variant=\"ghost\" size=\"sm\" className=\"text-gray-400 hover:text-white\" data-testid={`lock-conversation-${message.id}`}>\n                            <Lock className=\"w-4 h-4\" />\n                          </Button>\n                          {message.flagged && (\n                            <Button variant=\"ghost\" size=\"sm\" className=\"text-danger hover:text-red-400\" data-testid={`ban-user-${message.id}`}>\n                              <Ban className=\"w-4 h-4\" />\n                            </Button>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"moderation\">\n            <Card className=\"crypto-card\">\n              <CardHeader>\n                <CardTitle className=\"text-white\">Content Moderation Settings</CardTitle>\n              </CardHeader>\n              <CardContent className=\"p-6\">\n                <div className=\"space-y-6\">\n                  <div>\n                    <h3 className=\"text-lg font-semibold text-white mb-4\">Auto-Moderation Rules</h3>\n                    <div className=\"space-y-4\">\n                      <div className=\"flex items-center justify-between p-4 bg-surface-2 rounded-lg\">\n                        <div>\n                          <p className=\"text-white font-medium\">Keyword Detection</p>\n                          <p className=\"text-sm text-gray-400\">Automatically flag messages containing blocked keywords</p>\n                        </div>\n                        <Button variant=\"outline\" className=\"border-border text-gray-300\">\n                          Enabled\n                        </Button>\n                      </div>\n                      \n                      <div className=\"flex items-center justify-between p-4 bg-surface-2 rounded-lg\">\n                        <div>\n                          <p className=\"text-white font-medium\">Spam Detection</p>\n                          <p className=\"text-sm text-gray-400\">Flag repeated messages and potential spam content</p>\n                        </div>\n                        <Button variant=\"outline\" className=\"border-border text-gray-300\">\n                          Enabled\n                        </Button>\n                      </div>\n                      \n                      <div className=\"flex items-center justify-between p-4 bg-surface-2 rounded-lg\">\n                        <div>\n                          <p className=\"text-white font-medium\">Link Blocking</p>\n                          <p className=\"text-sm text-gray-400\">Block external links in messages</p>\n                        </div>\n                        <Button variant=\"outline\" className=\"border-border text-gray-300\">\n                          Disabled\n                        </Button>\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div>\n                    <h3 className=\"text-lg font-semibold text-white mb-4\">Manual Review Queue</h3>\n                    <div className=\"text-center py-8 text-gray-400\">\n                      <Flag className=\"w-12 h-12 mx-auto mb-4\" />\n                      <p>No messages pending review</p>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"keywords\">\n            <Card className=\"crypto-card\">\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <CardTitle className=\"text-white\">Blocked Keywords Management</CardTitle>\n                  <Button className=\"bg-accent text-bg hover:bg-accent-2\">\n                    <Plus className=\"w-4 h-4 mr-2\" />\n                    Add Keyword\n                  </Button>\n                </div>\n              </CardHeader>\n              <CardContent className=\"p-6\">\n                <div className=\"space-y-4\">\n                  <div>\n                    <div className=\"flex space-x-4 mb-4\">\n                      <Input \n                        placeholder=\"Add new blocked keyword...\" \n                        className=\"bg-surface-2 border-border text-white\"\n                        data-testid=\"new-keyword-input\"\n                      />\n                      <Button className=\"bg-accent text-bg hover:bg-accent-2\" data-testid=\"add-keyword-button\">\n                        Add\n                      </Button>\n                    </div>\n                  </div>\n                  \n                  <div>\n                    <h3 className=\"text-lg font-semibold text-white mb-4\">Current Blocked Keywords</h3>\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3\">\n                      {blockedKeywords.map((keyword, index) => (\n                        <div \n                          key={index} \n                          className=\"flex items-center justify-between p-3 bg-surface-2 rounded-lg\"\n                          data-testid={`keyword-${index}`}\n                        >\n                          <span className=\"text-white\">{keyword}</span>\n                          <Button \n                            variant=\"ghost\" \n                            size=\"sm\" \n                            className=\"text-danger hover:text-red-400\"\n                            data-testid={`remove-keyword-${index}`}\n                          >\n                            <Trash2 className=\"w-4 h-4\" />\n                          </Button>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                  \n                  <div className=\"mt-6 p-4 bg-surface-2 rounded-lg\">\n                    <p className=\"text-sm text-gray-400\">\n                      <strong className=\"text-white\">Note:</strong> Messages containing these keywords will be automatically flagged for review. \n                      Keywords are case-insensitive and partial matches are detected.\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </main>\n  );\n}","size_bytes":14686},"client/src/pages/admin/orders.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { StatusBadge } from \"@/components/ui/status-badge\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Search, Filter, Eye, RefreshCw, DollarSign, Package, AlertTriangle, User, Calendar, CreditCard, Shield, Truck } from \"lucide-react\";\nimport { SAMPLE_ORDERS } from \"@/lib/constants\";\n\nexport default function AdminOrders() {\n  const [viewOrderModalOpen, setViewOrderModalOpen] = useState(false);\n  const [selectedOrder, setSelectedOrder] = useState<any>(null);\n  \n  const handleViewOrder = (order: any) => {\n    setSelectedOrder(order);\n    setViewOrderModalOpen(true);\n  };\n  \n  const handleReleaseEscrow = (orderId: string) => {\n    console.log(\"Releasing escrow for order:\", orderId);\n  };\n  \n  const handleResolveDispute = (orderId: string) => {\n    console.log(\"Resolving dispute for order:\", orderId);\n  };\n  \n  const handleRefundOrder = (orderId: string) => {\n    console.log(\"Refunding order:\", orderId);\n  };\n\n  const extendedOrders = [\n    ...SAMPLE_ORDERS,\n    {\n      id: \"ORD-2848\",\n      buyer: \"digital_user_94\",\n      vendor: \"StreamingPro\",\n      listing: \"Amazon Prime Video (1 Year)\",\n      amount: \"0.0009 BTC\",\n      status: \"Pending Payment\",\n      statusType: \"warning\" as const,\n      created: \"10 min ago\",\n      paymentStatus: \"Unpaid\",\n      escrowStatus: \"Waiting\",\n      deliveryStatus: \"Pending\"\n    },\n    {\n      id: \"ORD-2849\", \n      buyer: \"anonymous_buyer\",\n      vendor: \"TechAccounts\",\n      listing: \"GitHub Pro Account (6 Months)\",\n      amount: \"0.76 XMR\",\n      status: \"Refunded\",\n      statusType: \"muted\" as const,\n      created: \"1 day ago\",\n      paymentStatus: \"Refunded\",\n      escrowStatus: \"Released\",\n      deliveryStatus: \"Cancelled\"\n    }\n  ];\n\n  return (\n    <main className=\"flex-1 overflow-y-auto bg-bg p-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between mb-6\">\n          <div>\n            <h1 className=\"text-2xl font-bold text-white\">Order Management</h1>\n            <p className=\"text-gray-300 mt-1\">Monitor and manage all marketplace orders</p>\n          </div>\n          <div className=\"flex space-x-3\">\n            <Button variant=\"outline\" className=\"border-border text-gray-300 hover:bg-surface-2\">\n              Export Orders\n            </Button>\n            <Button className=\"bg-accent text-bg hover:bg-accent-2\">\n              <RefreshCw className=\"w-4 h-4 mr-2\" />\n              Refresh\n            </Button>\n          </div>\n        </div>\n\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n          <Card className=\"crypto-card\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <Package className=\"w-8 h-8 text-accent mr-4\" />\n                <div>\n                  <p className=\"text-sm text-gray-400\">Total Orders</p>\n                  <p className=\"text-2xl font-bold text-white\">12,847</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"crypto-card\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <div className=\"w-8 h-8 bg-success/20 rounded-lg flex items-center justify-center mr-4\">\n                  <Package className=\"w-5 h-5 text-success\" />\n                </div>\n                <div>\n                  <p className=\"text-sm text-gray-400\">Completed Today</p>\n                  <p className=\"text-2xl font-bold text-white\">89</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"crypto-card\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <DollarSign className=\"w-8 h-8 text-warning mr-4\" />\n                <div>\n                  <p className=\"text-sm text-gray-400\">In Escrow</p>\n                  <p className=\"text-2xl font-bold text-white\">847.2 BTC</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"crypto-card\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <AlertTriangle className=\"w-8 h-8 text-danger mr-4\" />\n                <div>\n                  <p className=\"text-sm text-gray-400\">Disputed</p>\n                  <p className=\"text-2xl font-bold text-white\">3</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Filters */}\n        <Card className=\"crypto-card mb-6\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex flex-col md:flex-row gap-4\">\n              <div className=\"flex-1\">\n                <div className=\"relative\">\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n                  <Input \n                    placeholder=\"Search by order ID, buyer, or vendor...\" \n                    className=\"pl-10 bg-surface-2 border-border text-white\"\n                    data-testid=\"search-orders\"\n                  />\n                </div>\n              </div>\n              <Select>\n                <SelectTrigger className=\"w-40 bg-surface-2 border-border text-white\">\n                  <SelectValue placeholder=\"Status\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Status</SelectItem>\n                  <SelectItem value=\"delivered\">Delivered</SelectItem>\n                  <SelectItem value=\"escrow\">In Escrow</SelectItem>\n                  <SelectItem value=\"confirming\">Confirming</SelectItem>\n                  <SelectItem value=\"disputed\">Disputed</SelectItem>\n                </SelectContent>\n              </Select>\n              <Select>\n                <SelectTrigger className=\"w-40 bg-surface-2 border-border text-white\">\n                  <SelectValue placeholder=\"Currency\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Currency</SelectItem>\n                  <SelectItem value=\"btc\">BTC</SelectItem>\n                  <SelectItem value=\"xmr\">XMR</SelectItem>\n                </SelectContent>\n              </Select>\n              <Button variant=\"outline\" className=\"border-border hover:bg-surface-2\">\n                <Filter className=\"w-4 h-4 mr-2\" />\n                Filter\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Orders Table */}\n        <Card className=\"crypto-card\">\n          <CardHeader>\n            <CardTitle className=\"text-white\">Recent Orders</CardTitle>\n          </CardHeader>\n          <CardContent className=\"p-0\">\n            <div className=\"overflow-x-auto\">\n              <table className=\"w-full\">\n                <thead className=\"bg-surface-2\">\n                  <tr>\n                    <th className=\"text-left p-4 text-sm font-medium text-gray-300\">Order ID</th>\n                    <th className=\"text-left p-4 text-sm font-medium text-gray-300\">Buyer</th>\n                    <th className=\"text-left p-4 text-sm font-medium text-gray-300\">Vendor</th>\n                    <th className=\"text-left p-4 text-sm font-medium text-gray-300\">Product</th>\n                    <th className=\"text-left p-4 text-sm font-medium text-gray-300\">Amount</th>\n                    <th className=\"text-left p-4 text-sm font-medium text-gray-300\">Status</th>\n                    <th className=\"text-left p-4 text-sm font-medium text-gray-300\">Payment</th>\n                    <th className=\"text-left p-4 text-sm font-medium text-gray-300\">Created</th>\n                    <th className=\"text-left p-4 text-sm font-medium text-gray-300\">Actions</th>\n                  </tr>\n                </thead>\n                <tbody className=\"divide-y divide-border\">\n                  {extendedOrders.map((order) => (\n                    <tr key={order.id} className=\"hover:bg-surface-2/50\" data-testid={`order-row-${order.id}`}>\n                      <td className=\"p-4\">\n                        <span className=\"font-mono text-accent\">{order.id}</span>\n                      </td>\n                      <td className=\"p-4\">\n                        <div className=\"flex items-center\">\n                          <div className=\"w-8 h-8 bg-accent/20 rounded-full flex items-center justify-center mr-3\">\n                            <span className=\"text-accent text-sm\">{order.buyer[0].toUpperCase()}</span>\n                          </div>\n                          <span className=\"text-white\">{order.buyer}</span>\n                        </div>\n                      </td>\n                      <td className=\"p-4 text-gray-300\">{order.vendor}</td>\n                      <td className=\"p-4\">\n                        <div className=\"max-w-xs\">\n                          <p className=\"text-white truncate\">{order.listing}</p>\n                        </div>\n                      </td>\n                      <td className=\"p-4\">\n                        <div className=\"font-mono text-white\">{order.amount}</div>\n                      </td>\n                      <td className=\"p-4\">\n                        <StatusBadge status={order.status} type={order.statusType} />\n                      </td>\n                      <td className=\"p-4\">\n                        <Badge \n                          variant={\n                            order.status === \"Delivered\" ? \"default\" :\n                            order.status === \"Disputed\" ? \"destructive\" :\n                            \"secondary\"\n                          }\n                          className=\"text-xs\"\n                        >\n                          {order.status === \"Delivered\" ? \"Confirmed\" :\n                           order.status === \"Disputed\" ? \"Hold\" :\n                           order.status === \"In Escrow\" ? \"Escrowed\" :\n                           \"Pending\"}\n                        </Badge>\n                      </td>\n                      <td className=\"p-4 text-gray-300\">{order.created}</td>\n                      <td className=\"p-4\">\n                        <div className=\"flex items-center space-x-2\">\n                          <Button \n                            variant=\"ghost\" \n                            size=\"sm\" \n                            className=\"text-gray-400 hover:text-white\" \n                            onClick={() => handleViewOrder(order)}\n                            data-testid={`view-order-${order.id}`}\n                          >\n                            <Eye className=\"w-4 h-4\" />\n                          </Button>\n                          {order.status === \"In Escrow\" && (\n                            <Button \n                              variant=\"ghost\" \n                              size=\"sm\" \n                              className=\"text-success hover:text-green-400\" \n                              onClick={() => handleReleaseEscrow(order.id)}\n                              data-testid={`release-escrow-${order.id}`}\n                            >\n                              Release\n                            </Button>\n                          )}\n                          {order.status === \"Disputed\" && (\n                            <Button \n                              variant=\"ghost\" \n                              size=\"sm\" \n                              className=\"text-warning hover:text-yellow-400\" \n                              onClick={() => handleResolveDispute(order.id)}\n                              data-testid={`resolve-dispute-${order.id}`}\n                            >\n                              Resolve\n                            </Button>\n                          )}\n                          {order.status === \"Confirming\" && (\n                            <Button \n                              variant=\"ghost\" \n                              size=\"sm\" \n                              className=\"text-danger hover:text-red-400\" \n                              onClick={() => handleRefundOrder(order.id)}\n                              data-testid={`refund-order-${order.id}`}\n                            >\n                              Refund\n                            </Button>\n                          )}\n                        </div>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          </CardContent>\n        </Card>\n        \n        {/* View Order Modal */}\n        <Dialog open={viewOrderModalOpen} onOpenChange={setViewOrderModalOpen}>\n          <DialogContent className=\"sm:max-w-[700px] bg-card border border-border shadow-xl max-h-[90vh] overflow-hidden flex flex-col\">\n            <DialogHeader className=\"flex-shrink-0\">\n              <DialogTitle className=\"text-white\">Order Details</DialogTitle>\n            </DialogHeader>\n            {selectedOrder && (\n              <div className=\"space-y-6 overflow-y-auto flex-1 pr-2\">\n                {/* Order Header */}\n                <div className=\"flex items-start justify-between\">\n                  <div>\n                    <h3 className=\"text-xl font-semibold text-white\">Order {selectedOrder.id}</h3>\n                    <div className=\"flex items-center gap-4 mt-2\">\n                      <StatusBadge status={selectedOrder.status} type={selectedOrder.statusType} />\n                      <div className=\"flex items-center gap-2\">\n                        <Calendar className=\"w-4 h-4 text-gray-400\" />\n                        <span className=\"text-gray-300\">{selectedOrder.created}</span>\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"text-sm text-gray-400\">Total Amount</p>\n                    <p className=\"text-xl font-bold text-white font-mono\">{selectedOrder.amount}</p>\n                  </div>\n                </div>\n                \n                {/* Order Participants */}\n                <div className=\"grid grid-cols-2 gap-6\">\n                  <div className=\"bg-surface-2 rounded-lg p-4\">\n                    <div className=\"flex items-center gap-3 mb-3\">\n                      <User className=\"w-5 h-5 text-accent\" />\n                      <h4 className=\"font-medium text-white\">Buyer</h4>\n                    </div>\n                    <div className=\"flex items-center gap-3\">\n                      <div className=\"w-10 h-10 bg-accent/20 rounded-full flex items-center justify-center\">\n                        <span className=\"text-accent font-medium\">{selectedOrder.buyer[0].toUpperCase()}</span>\n                      </div>\n                      <div>\n                        <p className=\"text-white font-medium\">{selectedOrder.buyer}</p>\n                        <p className=\"text-gray-400 text-sm\">Buyer Account</p>\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"bg-surface-2 rounded-lg p-4\">\n                    <div className=\"flex items-center gap-3 mb-3\">\n                      <Package className=\"w-5 h-5 text-accent\" />\n                      <h4 className=\"font-medium text-white\">Vendor</h4>\n                    </div>\n                    <div>\n                      <p className=\"text-white font-medium\">{selectedOrder.vendor}</p>\n                      <p className=\"text-gray-400 text-sm\">Marketplace Vendor</p>\n                    </div>\n                  </div>\n                </div>\n                \n                {/* Product Details */}\n                <div>\n                  <Label className=\"text-gray-300 text-sm font-medium\">Product</Label>\n                  <div className=\"bg-surface-2 rounded-lg p-4 mt-2\">\n                    <p className=\"text-white font-medium\">{selectedOrder.listing}</p>\n                    <p className=\"text-gray-400 text-sm mt-1\">Digital product delivery</p>\n                  </div>\n                </div>\n                \n                {/* Order Status Details */}\n                <div className=\"grid grid-cols-3 gap-4\">\n                  <div>\n                    <Label className=\"text-gray-300 text-sm font-medium\">Payment Status</Label>\n                    <div className=\"flex items-center gap-2 mt-2\">\n                      <CreditCard className=\"w-4 h-4 text-gray-400\" />\n                      <Badge \n                        variant={selectedOrder.status === \"Delivered\" ? \"default\" : selectedOrder.status === \"Disputed\" ? \"destructive\" : \"secondary\"}\n                        className=\"text-xs\"\n                      >\n                        {selectedOrder.status === \"Delivered\" ? \"Confirmed\" :\n                         selectedOrder.status === \"Disputed\" ? \"Hold\" :\n                         selectedOrder.status === \"In Escrow\" ? \"Escrowed\" :\n                         selectedOrder.status === \"Refunded\" ? \"Refunded\" :\n                         \"Pending\"}\n                      </Badge>\n                    </div>\n                  </div>\n                  \n                  <div>\n                    <Label className=\"text-gray-300 text-sm font-medium\">Escrow Status</Label>\n                    <div className=\"flex items-center gap-2 mt-2\">\n                      <Shield className=\"w-4 h-4 text-gray-400\" />\n                      <span className=\"text-white text-sm\">\n                        {selectedOrder.status === \"In Escrow\" ? \"Protected\" :\n                         selectedOrder.status === \"Delivered\" ? \"Released\" :\n                         selectedOrder.status === \"Disputed\" ? \"Frozen\" :\n                         selectedOrder.status === \"Refunded\" ? \"Returned\" :\n                         \"N/A\"}\n                      </span>\n                    </div>\n                  </div>\n                  \n                  <div>\n                    <Label className=\"text-gray-300 text-sm font-medium\">Delivery Status</Label>\n                    <div className=\"flex items-center gap-2 mt-2\">\n                      <Truck className=\"w-4 h-4 text-gray-400\" />\n                      <span className=\"text-white text-sm\">\n                        {selectedOrder.status === \"Delivered\" ? \"Completed\" :\n                         selectedOrder.status === \"In Escrow\" ? \"Processing\" :\n                         selectedOrder.status === \"Disputed\" ? \"On Hold\" :\n                         selectedOrder.status === \"Refunded\" ? \"Cancelled\" :\n                         \"Pending\"}\n                      </span>\n                    </div>\n                  </div>\n                </div>\n                \n                {/* Order Timeline */}\n                <div>\n                  <Label className=\"text-gray-300 text-sm font-medium\">Order Timeline</Label>\n                  <div className=\"bg-surface-2 rounded-lg p-4 mt-2\">\n                    <div className=\"space-y-3\">\n                      <div className=\"flex items-center gap-3\">\n                        <div className=\"w-2 h-2 bg-accent rounded-full\"></div>\n                        <div className=\"flex-1\">\n                          <p className=\"text-white text-sm\">Order created</p>\n                          <p className=\"text-gray-400 text-xs\">{selectedOrder.created}</p>\n                        </div>\n                      </div>\n                      {selectedOrder.status !== \"Pending Payment\" && (\n                        <div className=\"flex items-center gap-3\">\n                          <div className=\"w-2 h-2 bg-success rounded-full\"></div>\n                          <div className=\"flex-1\">\n                            <p className=\"text-white text-sm\">Payment confirmed</p>\n                            <p className=\"text-gray-400 text-xs\">Payment processed successfully</p>\n                          </div>\n                        </div>\n                      )}\n                      {selectedOrder.status === \"Delivered\" && (\n                        <div className=\"flex items-center gap-3\">\n                          <div className=\"w-2 h-2 bg-success rounded-full\"></div>\n                          <div className=\"flex-1\">\n                            <p className=\"text-white text-sm\">Order delivered</p>\n                            <p className=\"text-gray-400 text-xs\">Product delivered to buyer</p>\n                          </div>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                </div>\n                \n                {/* Actions */}\n                <div className=\"flex justify-end space-x-3 pt-4 border-t border-border mt-6 flex-shrink-0\">\n                  <Button \n                    variant=\"outline\" \n                    onClick={() => setViewOrderModalOpen(false)}\n                    className=\"border-border text-gray-300 hover:bg-surface-2\"\n                    data-testid=\"btn-close-order-details\"\n                  >\n                    Close\n                  </Button>\n                  {selectedOrder.status === \"In Escrow\" && (\n                    <Button \n                      onClick={() => {\n                        handleReleaseEscrow(selectedOrder.id);\n                        setViewOrderModalOpen(false);\n                      }}\n                      className=\"bg-success text-white hover:bg-green-600\"\n                      data-testid=\"btn-release-escrow-details\"\n                    >\n                      <Shield className=\"w-4 h-4 mr-2\" />\n                      Release Escrow\n                    </Button>\n                  )}\n                  {selectedOrder.status === \"Disputed\" && (\n                    <Button \n                      onClick={() => {\n                        handleResolveDispute(selectedOrder.id);\n                        setViewOrderModalOpen(false);\n                      }}\n                      className=\"bg-warning text-black hover:bg-yellow-500\"\n                      data-testid=\"btn-resolve-dispute-details\"\n                    >\n                      Resolve Dispute\n                    </Button>\n                  )}\n                </div>\n              </div>\n            )}\n          </DialogContent>\n        </Dialog>\n      </main>\n  );\n}","size_bytes":22694},"client/src/pages/admin/payouts.tsx":{"content":"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { StatusBadge } from \"@/components/ui/status-badge\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Search, DollarSign, Wallet, RefreshCw, Check, X, Clock, Download } from \"lucide-react\";\n\nexport default function AdminPayouts() {\n\n  const samplePayouts = [\n    {\n      id: 1,\n      vendor: \"CryptoAccountsPlus\",\n      amount: \"2.4567 BTC\",\n      usdValue: \"$108,432\",\n      commission: \"0.1234 BTC\",\n      status: \"Pending\",\n      statusType: \"warning\" as const,\n      method: \"Bitcoin Address\",\n      requestDate: \"2 hours ago\",\n      lastSale: \"1 hour ago\",\n      totalSales: \"12.8 BTC\"\n    },\n    {\n      id: 2,\n      vendor: \"PremiumSoft\",\n      amount: \"1.8943 BTC\",\n      usdValue: \"$83,567\",\n      commission: \"0.0947 BTC\",\n      status: \"Processing\",\n      statusType: \"accent\" as const,\n      method: \"Bitcoin Address\",\n      requestDate: \"6 hours ago\",\n      lastSale: \"3 hours ago\",\n      totalSales: \"8.4 BTC\"\n    },\n    {\n      id: 3,\n      vendor: \"DigitalVault\",\n      amount: \"0.5612 XMR\",\n      usdValue: \"$89,230\",\n      commission: \"0.0281 XMR\",\n      status: \"Completed\",\n      statusType: \"success\" as const,\n      method: \"Monero Address\",\n      requestDate: \"1 day ago\",\n      lastSale: \"2 days ago\",\n      totalSales: \"4.2 XMR\"\n    }\n  ];\n\n  const sampleRefunds = [\n    {\n      id: 1,\n      orderId: \"ORD-2844\",\n      buyer: \"privacy_first\",\n      vendor: \"PremiumDigital\",\n      amount: \"0.0015 BTC\",\n      reason: \"Account credentials not working\",\n      status: \"Pending\",\n      statusType: \"warning\" as const,\n      requestDate: \"1 hour ago\",\n      escrowReleased: false\n    },\n    {\n      id: 2,\n      orderId: \"ORD-2831\",\n      buyer: \"crypto_buyer_89\",\n      vendor: \"StreamAccounts\",\n      amount: \"0.0008 BTC\",\n      reason: \"Wrong account type delivered\",\n      status: \"Approved\",\n      statusType: \"success\" as const,\n      requestDate: \"4 hours ago\",\n      escrowReleased: true\n    },\n    {\n      id: 3,\n      orderId: \"ORD-2823\",\n      buyer: \"anon_user_423\",\n      vendor: \"DigitalServices\",\n      amount: \"0.0012 BTC\",\n      reason: \"Vendor not responding\",\n      status: \"Processing\",\n      statusType: \"accent\" as const,\n      requestDate: \"1 day ago\",\n      escrowReleased: false\n    }\n  ];\n\n  return (\n    \n      <main className=\"flex-1 overflow-y-auto bg-bg p-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between mb-6\">\n          <div>\n            <h1 className=\"text-2xl font-bold text-white\">Payouts & Refunds</h1>\n            <p className=\"text-gray-300 mt-1\">Manage vendor payouts and customer refund requests</p>\n          </div>\n          <div className=\"flex space-x-3\">\n            <Button variant=\"outline\" className=\"border-border text-gray-300 hover:bg-surface-2\">\n              <Download className=\"w-4 h-4 mr-2\" />\n              Export Report\n            </Button>\n            <Button className=\"bg-accent text-bg hover:bg-accent-2\">\n              Process All\n            </Button>\n          </div>\n        </div>\n\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n          <Card className=\"crypto-card\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <DollarSign className=\"w-8 h-8 text-accent mr-4\" />\n                <div>\n                  <p className=\"text-sm text-gray-400\">Pending Payouts</p>\n                  <p className=\"text-2xl font-bold text-white\">23</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"crypto-card\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <Wallet className=\"w-8 h-8 text-warning mr-4\" />\n                <div>\n                  <p className=\"text-sm text-gray-400\">Total Pending</p>\n                  <p className=\"text-2xl font-bold text-white\">45.2 BTC</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"crypto-card\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <RefreshCw className=\"w-8 h-8 text-danger mr-4\" />\n                <div>\n                  <p className=\"text-sm text-gray-400\">Refund Requests</p>\n                  <p className=\"text-2xl font-bold text-white\">8</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"crypto-card\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <Check className=\"w-8 h-8 text-success mr-4\" />\n                <div>\n                  <p className=\"text-sm text-gray-400\">Processed Today</p>\n                  <p className=\"text-2xl font-bold text-white\">12</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <Tabs defaultValue=\"payouts\" className=\"w-full\">\n          <TabsList className=\"bg-surface-2 mb-6\">\n            <TabsTrigger value=\"payouts\" className=\"text-gray-300 data-[state=active]:text-white\">\n              Vendor Payouts\n            </TabsTrigger>\n            <TabsTrigger value=\"refunds\" className=\"text-gray-300 data-[state=active]:text-white\">\n              Customer Refunds\n            </TabsTrigger>\n            <TabsTrigger value=\"history\" className=\"text-gray-300 data-[state=active]:text-white\">\n              Transaction History\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"payouts\">\n            {/* Filters */}\n            <Card className=\"crypto-card mb-6\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex flex-col md:flex-row gap-4\">\n                  <div className=\"flex-1\">\n                    <div className=\"relative\">\n                      <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n                      <Input \n                        placeholder=\"Search by vendor name...\" \n                        className=\"pl-10 bg-surface-2 border-border text-white\"\n                        data-testid=\"search-payouts\"\n                      />\n                    </div>\n                  </div>\n                  <Select>\n                    <SelectTrigger className=\"w-40 bg-surface-2 border-border text-white\">\n                      <SelectValue placeholder=\"Status\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All Status</SelectItem>\n                      <SelectItem value=\"pending\">Pending</SelectItem>\n                      <SelectItem value=\"processing\">Processing</SelectItem>\n                      <SelectItem value=\"completed\">Completed</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  <Select>\n                    <SelectTrigger className=\"w-40 bg-surface-2 border-border text-white\">\n                      <SelectValue placeholder=\"Currency\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All Currency</SelectItem>\n                      <SelectItem value=\"btc\">BTC</SelectItem>\n                      <SelectItem value=\"xmr\">XMR</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Payouts Table */}\n            <Card className=\"crypto-card\">\n              <CardHeader>\n                <CardTitle className=\"text-white\">Vendor Payout Requests</CardTitle>\n              </CardHeader>\n              <CardContent className=\"p-0\">\n                <div className=\"overflow-x-auto\">\n                  <table className=\"w-full\">\n                    <thead className=\"bg-surface-2\">\n                      <tr>\n                        <th className=\"text-left p-4 text-sm font-medium text-gray-300\">Vendor</th>\n                        <th className=\"text-left p-4 text-sm font-medium text-gray-300\">Payout Amount</th>\n                        <th className=\"text-left p-4 text-sm font-medium text-gray-300\">Commission</th>\n                        <th className=\"text-left p-4 text-sm font-medium text-gray-300\">Status</th>\n                        <th className=\"text-left p-4 text-sm font-medium text-gray-300\">Method</th>\n                        <th className=\"text-left p-4 text-sm font-medium text-gray-300\">Requested</th>\n                        <th className=\"text-left p-4 text-sm font-medium text-gray-300\">Actions</th>\n                      </tr>\n                    </thead>\n                    <tbody className=\"divide-y divide-border\">\n                      {samplePayouts.map((payout) => (\n                        <tr key={payout.id} className=\"hover:bg-surface-2/50\" data-testid={`payout-row-${payout.id}`}>\n                          <td className=\"p-4\">\n                            <div>\n                              <p className=\"font-medium text-white\">{payout.vendor}</p>\n                              <p className=\"text-sm text-gray-400\">Total Sales: {payout.totalSales}</p>\n                            </div>\n                          </td>\n                          <td className=\"p-4\">\n                            <div>\n                              <p className=\"font-mono text-white\">{payout.amount}</p>\n                              <p className=\"text-sm text-gray-400\">{payout.usdValue}</p>\n                            </div>\n                          </td>\n                          <td className=\"p-4\">\n                            <span className=\"font-mono text-accent\">{payout.commission}</span>\n                          </td>\n                          <td className=\"p-4\">\n                            <StatusBadge status={payout.status} type={payout.statusType} />\n                          </td>\n                          <td className=\"p-4\">\n                            <Badge variant=\"outline\" className=\"text-gray-300\">\n                              {payout.method}\n                            </Badge>\n                          </td>\n                          <td className=\"p-4 text-gray-300\">{payout.requestDate}</td>\n                          <td className=\"p-4\">\n                            <div className=\"flex items-center space-x-2\">\n                              {payout.status === \"Pending\" && (\n                                <>\n                                  <Button variant=\"ghost\" size=\"sm\" className=\"text-success hover:text-green-400\" data-testid={`approve-payout-${payout.id}`}>\n                                    <Check className=\"w-4 h-4\" />\n                                  </Button>\n                                  <Button variant=\"ghost\" size=\"sm\" className=\"text-danger hover:text-red-400\" data-testid={`reject-payout-${payout.id}`}>\n                                    <X className=\"w-4 h-4\" />\n                                  </Button>\n                                </>\n                              )}\n                              <Button variant=\"ghost\" size=\"sm\" className=\"text-gray-400 hover:text-white\" data-testid={`view-payout-${payout.id}`}>\n                                View\n                              </Button>\n                            </div>\n                          </td>\n                        </tr>\n                      ))}\n                    </tbody>\n                  </table>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"refunds\">\n            {/* Refunds Table */}\n            <Card className=\"crypto-card\">\n              <CardHeader>\n                <CardTitle className=\"text-white\">Customer Refund Requests</CardTitle>\n              </CardHeader>\n              <CardContent className=\"p-0\">\n                <div className=\"overflow-x-auto\">\n                  <table className=\"w-full\">\n                    <thead className=\"bg-surface-2\">\n                      <tr>\n                        <th className=\"text-left p-4 text-sm font-medium text-gray-300\">Order ID</th>\n                        <th className=\"text-left p-4 text-sm font-medium text-gray-300\">Buyer</th>\n                        <th className=\"text-left p-4 text-sm font-medium text-gray-300\">Vendor</th>\n                        <th className=\"text-left p-4 text-sm font-medium text-gray-300\">Amount</th>\n                        <th className=\"text-left p-4 text-sm font-medium text-gray-300\">Reason</th>\n                        <th className=\"text-left p-4 text-sm font-medium text-gray-300\">Status</th>\n                        <th className=\"text-left p-4 text-sm font-medium text-gray-300\">Requested</th>\n                        <th className=\"text-left p-4 text-sm font-medium text-gray-300\">Actions</th>\n                      </tr>\n                    </thead>\n                    <tbody className=\"divide-y divide-border\">\n                      {sampleRefunds.map((refund) => (\n                        <tr key={refund.id} className=\"hover:bg-surface-2/50\" data-testid={`refund-row-${refund.id}`}>\n                          <td className=\"p-4\">\n                            <span className=\"font-mono text-accent\">{refund.orderId}</span>\n                          </td>\n                          <td className=\"p-4 text-white\">{refund.buyer}</td>\n                          <td className=\"p-4 text-gray-300\">{refund.vendor}</td>\n                          <td className=\"p-4\">\n                            <span className=\"font-mono text-white\">{refund.amount}</span>\n                          </td>\n                          <td className=\"p-4\">\n                            <div className=\"max-w-xs\">\n                              <p className=\"text-gray-300 truncate\">{refund.reason}</p>\n                            </div>\n                          </td>\n                          <td className=\"p-4\">\n                            <StatusBadge status={refund.status} type={refund.statusType} />\n                          </td>\n                          <td className=\"p-4 text-gray-300\">{refund.requestDate}</td>\n                          <td className=\"p-4\">\n                            <div className=\"flex items-center space-x-2\">\n                              {refund.status === \"Pending\" && (\n                                <>\n                                  <Button variant=\"ghost\" size=\"sm\" className=\"text-success hover:text-green-400\" data-testid={`approve-refund-${refund.id}`}>\n                                    <Check className=\"w-4 h-4\" />\n                                  </Button>\n                                  <Button variant=\"ghost\" size=\"sm\" className=\"text-danger hover:text-red-400\" data-testid={`reject-refund-${refund.id}`}>\n                                    <X className=\"w-4 h-4\" />\n                                  </Button>\n                                </>\n                              )}\n                              <Button variant=\"ghost\" size=\"sm\" className=\"text-gray-400 hover:text-white\" data-testid={`view-refund-${refund.id}`}>\n                                View Order\n                              </Button>\n                            </div>\n                          </td>\n                        </tr>\n                      ))}\n                    </tbody>\n                  </table>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"history\">\n            <Card className=\"crypto-card\">\n              <CardContent className=\"p-6\">\n                <div className=\"text-center py-12\">\n                  <Clock className=\"w-12 h-12 text-gray-500 mx-auto mb-4\" />\n                  <p className=\"text-gray-400\">Transaction history will appear here</p>\n                  <p className=\"text-sm text-gray-500 mt-2\">Complete payment records and audit trails</p>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </main>\n    \n  );\n}","size_bytes":16498},"client/src/pages/admin/roles.tsx":{"content":"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Shield, Users, Plus, Edit, Trash2, Key, Lock } from \"lucide-react\";\n\nexport default function AdminRoles() {\n\n  const systemRoles = [\n    {\n      id: 1,\n      name: \"Super Administrator\",\n      description: \"Full system access with all permissions\",\n      userCount: 2,\n      color: \"danger\",\n      permissions: [\n        \"user_management\", \"vendor_management\", \"order_management\", \"dispute_resolution\",\n        \"financial_management\", \"system_configuration\", \"security_management\", \"audit_logs\"\n      ]\n    },\n    {\n      id: 2,\n      name: \"Administrator\",\n      description: \"General admin access without system configuration\",\n      userCount: 5,\n      color: \"warning\",\n      permissions: [\n        \"user_management\", \"vendor_management\", \"order_management\", \"dispute_resolution\",\n        \"financial_management\"\n      ]\n    },\n    {\n      id: 3,\n      name: \"Moderator\",\n      description: \"Content moderation and basic user management\",\n      userCount: 12,\n      color: \"accent\",\n      permissions: [\n        \"user_management\", \"content_moderation\", \"message_management\", \"basic_reports\"\n      ]\n    },\n    {\n      id: 4,\n      name: \"Support Agent\",\n      description: \"Customer support and ticket management\",\n      userCount: 8,\n      color: \"success\",\n      permissions: [\n        \"ticket_management\", \"basic_user_view\", \"message_management\", \"support_reports\"\n      ]\n    },\n    {\n      id: 5,\n      name: \"Financial Manager\",\n      description: \"Financial operations and payout management\",\n      userCount: 3,\n      color: \"warning\",\n      permissions: [\n        \"financial_management\", \"payout_management\", \"commission_management\", \"financial_reports\"\n      ]\n    }\n  ];\n\n  const allPermissions = [\n    {\n      category: \"User Management\",\n      permissions: [\n        { id: \"user_view\", name: \"View Users\", description: \"View user profiles and basic information\" },\n        { id: \"user_management\", name: \"Manage Users\", description: \"Create, edit, ban/unban users\" },\n        { id: \"user_impersonate\", name: \"Impersonate Users\", description: \"Log in as another user\" }\n      ]\n    },\n    {\n      category: \"Vendor Management\",\n      permissions: [\n        { id: \"vendor_view\", name: \"View Vendors\", description: \"View vendor profiles and shops\" },\n        { id: \"vendor_management\", name: \"Manage Vendors\", description: \"Approve/reject vendor applications\" },\n        { id: \"vendor_settings\", name: \"Vendor Settings\", description: \"Modify vendor commission rates and settings\" }\n      ]\n    },\n    {\n      category: \"Order Management\",\n      permissions: [\n        { id: \"order_view\", name: \"View Orders\", description: \"View order details and history\" },\n        { id: \"order_management\", name: \"Manage Orders\", description: \"Update order status and process refunds\" },\n        { id: \"escrow_management\", name: \"Escrow Management\", description: \"Release escrow funds and manage disputes\" }\n      ]\n    },\n    {\n      category: \"Financial Management\",\n      permissions: [\n        { id: \"financial_view\", name: \"View Finances\", description: \"View financial reports and balances\" },\n        { id: \"financial_management\", name: \"Manage Finances\", description: \"Process payouts and manage wallets\" },\n        { id: \"commission_management\", name: \"Commission Management\", description: \"Set and modify commission rates\" }\n      ]\n    },\n    {\n      category: \"Content & Communication\",\n      permissions: [\n        { id: \"content_moderation\", name: \"Content Moderation\", description: \"Moderate listings and messages\" },\n        { id: \"message_management\", name: \"Message Management\", description: \"View and manage user messages\" },\n        { id: \"ticket_management\", name: \"Ticket Management\", description: \"Handle support tickets\" }\n      ]\n    },\n    {\n      category: \"System Administration\",\n      permissions: [\n        { id: \"system_configuration\", name: \"System Configuration\", description: \"Modify system settings and configuration\" },\n        { id: \"security_management\", name: \"Security Management\", description: \"Manage security settings and access controls\" },\n        { id: \"audit_logs\", name: \"Audit Logs\", description: \"Access system audit logs and activity history\" }\n      ]\n    }\n  ];\n\n  return (\n    \n      <main className=\"flex-1 overflow-y-auto bg-bg p-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between mb-6\">\n          <div>\n            <h1 className=\"text-2xl font-bold text-white\">Roles & Permissions</h1>\n            <p className=\"text-gray-300 mt-1\">Manage user roles and access permissions</p>\n          </div>\n          <Button className=\"bg-accent text-bg hover:bg-accent-2\">\n            <Plus className=\"w-4 h-4 mr-2\" />\n            Create Role\n          </Button>\n        </div>\n\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n          <Card className=\"crypto-card\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <Shield className=\"w-8 h-8 text-accent mr-4\" />\n                <div>\n                  <p className=\"text-sm text-gray-400\">Total Roles</p>\n                  <p className=\"text-2xl font-bold text-white\">{systemRoles.length}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"crypto-card\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <Users className=\"w-8 h-8 text-success mr-4\" />\n                <div>\n                  <p className=\"text-sm text-gray-400\">Total Users</p>\n                  <p className=\"text-2xl font-bold text-white\">{systemRoles.reduce((sum, role) => sum + role.userCount, 0)}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"crypto-card\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <Key className=\"w-8 h-8 text-warning mr-4\" />\n                <div>\n                  <p className=\"text-sm text-gray-400\">Unique Permissions</p>\n                  <p className=\"text-2xl font-bold text-white\">{allPermissions.reduce((sum, cat) => sum + cat.permissions.length, 0)}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"crypto-card\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <Lock className=\"w-8 h-8 text-danger mr-4\" />\n                <div>\n                  <p className=\"text-sm text-gray-400\">Super Admins</p>\n                  <p className=\"text-2xl font-bold text-white\">2</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <Tabs defaultValue=\"roles\" className=\"w-full\">\n          <TabsList className=\"bg-surface-2 mb-6\">\n            <TabsTrigger value=\"roles\" className=\"text-gray-300 data-[state=active]:text-white\">\n              System Roles\n            </TabsTrigger>\n            <TabsTrigger value=\"permissions\" className=\"text-gray-300 data-[state=active]:text-white\">\n              Permission Matrix\n            </TabsTrigger>\n            <TabsTrigger value=\"create\" className=\"text-gray-300 data-[state=active]:text-white\">\n              Create Role\n            </TabsTrigger>\n            <TabsTrigger value=\"audit\" className=\"text-gray-300 data-[state=active]:text-white\">\n              Access Audit\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"roles\">\n            <div className=\"space-y-6\">\n              {systemRoles.map((role) => (\n                <Card key={role.id} className=\"crypto-card\" data-testid={`role-${role.id}`}>\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center space-x-3 mb-3\">\n                          <Shield className=\"w-6 h-6 text-accent\" />\n                          <h3 className=\"text-lg font-semibold text-white\">{role.name}</h3>\n                          <Badge \n                            variant={\n                              role.color === \"danger\" ? \"destructive\" :\n                              role.color === \"warning\" ? \"secondary\" :\n                              role.color === \"success\" ? \"default\" :\n                              \"outline\"\n                            }\n                          >\n                            {role.userCount} users\n                          </Badge>\n                        </div>\n                        \n                        <p className=\"text-gray-300 mb-4\">{role.description}</p>\n                        \n                        <div>\n                          <h4 className=\"text-sm font-medium text-gray-400 mb-2\">Permissions ({role.permissions.length})</h4>\n                          <div className=\"flex flex-wrap gap-2\">\n                            {role.permissions.slice(0, 5).map((permission) => (\n                              <Badge key={permission} variant=\"outline\" className=\"text-xs text-gray-300\">\n                                {permission.replace(/_/g, \" \")}\n                              </Badge>\n                            ))}\n                            {role.permissions.length > 5 && (\n                              <Badge variant=\"outline\" className=\"text-xs text-gray-400\">\n                                +{role.permissions.length - 5} more\n                              </Badge>\n                            )}\n                          </div>\n                        </div>\n                      </div>\n                      \n                      <div className=\"flex items-center space-x-2 ml-6\">\n                        <Button variant=\"outline\" size=\"sm\" className=\"border-border text-gray-300 hover:bg-surface-2\" data-testid={`view-role-${role.id}`}>\n                          View Users\n                        </Button>\n                        <Button variant=\"ghost\" size=\"sm\" className=\"text-gray-400 hover:text-white\" data-testid={`edit-role-${role.id}`}>\n                          <Edit className=\"w-4 h-4\" />\n                        </Button>\n                        {role.name !== \"Super Administrator\" && (\n                          <Button variant=\"ghost\" size=\"sm\" className=\"text-danger hover:text-red-400\" data-testid={`delete-role-${role.id}`}>\n                            <Trash2 className=\"w-4 h-4\" />\n                          </Button>\n                        )}\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"permissions\">\n            <Card className=\"crypto-card\">\n              <CardHeader>\n                <CardTitle className=\"text-white\">Permission Matrix</CardTitle>\n              </CardHeader>\n              <CardContent className=\"p-6\">\n                <div className=\"space-y-8\">\n                  {allPermissions.map((category) => (\n                    <div key={category.category}>\n                      <h3 className=\"text-lg font-semibold text-white mb-4\">{category.category}</h3>\n                      <div className=\"space-y-3\">\n                        {category.permissions.map((permission) => (\n                          <div key={permission.id} className=\"border border-border rounded-lg p-4\" data-testid={`permission-${permission.id}`}>\n                            <div className=\"flex items-start justify-between\">\n                              <div className=\"flex-1\">\n                                <h4 className=\"font-medium text-white\">{permission.name}</h4>\n                                <p className=\"text-sm text-gray-400 mt-1\">{permission.description}</p>\n                              </div>\n                              <div className=\"flex items-center space-x-4 ml-6\">\n                                {systemRoles.map((role) => (\n                                  <div key={role.id} className=\"text-center\">\n                                    <p className=\"text-xs text-gray-400 mb-1\">{role.name}</p>\n                                    <div className={`w-4 h-4 rounded border-2 ${\n                                      role.permissions.includes(permission.id) \n                                        ? \"bg-accent border-accent\" \n                                        : \"border-border\"\n                                    }`}>\n                                      {role.permissions.includes(permission.id) && (\n                                        <svg className=\"w-3 h-3 text-white\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                                          <path fillRule=\"evenodd\" d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\" clipRule=\"evenodd\" />\n                                        </svg>\n                                      )}\n                                    </div>\n                                  </div>\n                                ))}\n                              </div>\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"create\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              <Card className=\"crypto-card\">\n                <CardHeader>\n                  <CardTitle className=\"text-white\">Role Details</CardTitle>\n                </CardHeader>\n                <CardContent className=\"p-6\">\n                  <div className=\"space-y-6\">\n                    <div>\n                      <Label htmlFor=\"roleName\" className=\"text-white\">Role Name</Label>\n                      <Input \n                        id=\"roleName\"\n                        placeholder=\"Enter role name...\"\n                        className=\"mt-2 bg-surface-2 border-border text-white\"\n                        data-testid=\"role-name-input\"\n                      />\n                    </div>\n                    \n                    <div>\n                      <Label htmlFor=\"roleDescription\" className=\"text-white\">Description</Label>\n                      <Textarea \n                        id=\"roleDescription\"\n                        placeholder=\"Describe this role and its purpose...\"\n                        className=\"mt-2 bg-surface-2 border-border text-white\"\n                        rows={4}\n                        data-testid=\"role-description-input\"\n                      />\n                    </div>\n                    \n                    <div>\n                      <Label htmlFor=\"roleColor\" className=\"text-white\">Role Color</Label>\n                      <select \n                        id=\"roleColor\"\n                        className=\"mt-2 w-full bg-surface-2 border border-border rounded-md px-3 py-2 text-white\"\n                        data-testid=\"role-color-select\"\n                      >\n                        <option value=\"accent\">Blue (Default)</option>\n                        <option value=\"success\">Green</option>\n                        <option value=\"warning\">Yellow</option>\n                        <option value=\"danger\">Red</option>\n                      </select>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"crypto-card\">\n                <CardHeader>\n                  <CardTitle className=\"text-white\">Assign Permissions</CardTitle>\n                </CardHeader>\n                <CardContent className=\"p-6\">\n                  <div className=\"space-y-6\">\n                    {allPermissions.map((category) => (\n                      <div key={category.category}>\n                        <h4 className=\"text-white font-medium mb-3\">{category.category}</h4>\n                        <div className=\"space-y-2\">\n                          {category.permissions.map((permission) => (\n                            <div key={permission.id} className=\"flex items-center space-x-2\">\n                              <Checkbox \n                                id={permission.id} \n                                className=\"border-border\"\n                                data-testid={`permission-checkbox-${permission.id}`}\n                              />\n                              <Label htmlFor={permission.id} className=\"text-gray-300 text-sm\">\n                                {permission.name}\n                              </Label>\n                            </div>\n                          ))}\n                        </div>\n                      </div>\n                    ))}\n                    \n                    <div className=\"pt-4\">\n                      <Button className=\"w-full bg-accent text-bg hover:bg-accent-2\" data-testid=\"create-role-button\">\n                        Create Role\n                      </Button>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"audit\">\n            <Card className=\"crypto-card\">\n              <CardHeader>\n                <CardTitle className=\"text-white\">Access Audit Log</CardTitle>\n              </CardHeader>\n              <CardContent className=\"p-6\">\n                <div className=\"space-y-4\">\n                  <div className=\"p-4 bg-surface-2 rounded-lg\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"text-white font-medium\">Role Created: Financial Manager</p>\n                        <p className=\"text-sm text-gray-400\">Created by admin_user_1</p>\n                      </div>\n                      <span className=\"text-xs text-gray-400\">2 hours ago</span>\n                    </div>\n                  </div>\n                  \n                  <div className=\"p-4 bg-surface-2 rounded-lg\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"text-white font-medium\">Permission Modified: Support Agent</p>\n                        <p className=\"text-sm text-gray-400\">Added ticket_management permission</p>\n                      </div>\n                      <span className=\"text-xs text-gray-400\">1 day ago</span>\n                    </div>\n                  </div>\n                  \n                  <div className=\"p-4 bg-surface-2 rounded-lg\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"text-white font-medium\">User Role Changed</p>\n                        <p className=\"text-sm text-gray-400\">support_agent_3 promoted to Moderator</p>\n                      </div>\n                      <span className=\"text-xs text-gray-400\">3 days ago</span>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </main>\n    \n  );\n}","size_bytes":19859},"client/src/pages/admin/security.tsx":{"content":"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { StatusBadge } from \"@/components/ui/status-badge\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Shield, Lock, AlertTriangle, Users, Eye, Ban, Key, Smartphone } from \"lucide-react\";\n\nexport default function AdminSecurity() {\n\n  const securityLogs = [\n    {\n      id: 1,\n      type: \"Failed Login\",\n      user: \"unknown_user\",\n      ip: \"192.168.1.45\",\n      timestamp: \"5 min ago\",\n      status: \"Blocked\",\n      statusType: \"danger\" as const,\n      attempts: 5,\n      location: \"Unknown\"\n    },\n    {\n      id: 2,\n      type: \"Successful Login\",\n      user: \"admin_user_1\", \n      ip: \"10.0.0.15\",\n      timestamp: \"1 hour ago\",\n      status: \"Success\",\n      statusType: \"success\" as const,\n      attempts: 1,\n      location: \"Office Network\"\n    },\n    {\n      id: 3,\n      type: \"Password Change\",\n      user: \"vendor_alpha\",\n      ip: \"203.45.67.89\",\n      timestamp: \"3 hours ago\",\n      status: \"Success\",\n      statusType: \"success\" as const,\n      attempts: 1,\n      location: \"VPN Connection\"\n    },\n    {\n      id: 4,\n      type: \"Failed Login\",\n      user: \"support_agent_2\",\n      ip: \"172.16.0.5\",\n      timestamp: \"6 hours ago\",\n      status: \"Locked\",\n      statusType: \"warning\" as const,\n      attempts: 3,\n      location: \"Office Network\"\n    }\n  ];\n\n  const twoFactorUsers = [\n    {\n      id: 1,\n      username: \"admin_user_1\",\n      role: \"Super Administrator\",\n      twoFAEnabled: true,\n      lastLogin: \"1 hour ago\",\n      backupCodes: 8,\n      deviceTrust: \"Trusted\"\n    },\n    {\n      id: 2,\n      username: \"admin_user_2\",\n      role: \"Administrator\", \n      twoFAEnabled: true,\n      lastLogin: \"2 days ago\",\n      backupCodes: 10,\n      deviceTrust: \"Trusted\"\n    },\n    {\n      id: 3,\n      username: \"vendor_alpha\",\n      role: \"Vendor\",\n      twoFAEnabled: false,\n      lastLogin: \"3 hours ago\",\n      backupCodes: 0,\n      deviceTrust: \"Unknown\"\n    },\n    {\n      id: 4,\n      username: \"support_agent_1\",\n      role: \"Support Agent\",\n      twoFAEnabled: true,\n      lastLogin: \"30 min ago\",\n      backupCodes: 6,\n      deviceTrust: \"Trusted\"\n    }\n  ];\n\n  const securitySettings = [\n    {\n      id: 1,\n      name: \"Two-Factor Authentication\",\n      description: \"Require 2FA for admin accounts\",\n      enabled: true,\n      category: \"Authentication\"\n    },\n    {\n      id: 2,\n      name: \"Failed Login Protection\",\n      description: \"Lock accounts after failed attempts\",\n      enabled: true,\n      category: \"Authentication\"\n    },\n    {\n      id: 3,\n      name: \"IP Whitelist\",\n      description: \"Restrict admin access by IP address\",\n      enabled: false,\n      category: \"Access Control\"\n    },\n    {\n      id: 4,\n      name: \"Session Timeout\",\n      description: \"Auto-logout after inactivity\",\n      enabled: true,\n      category: \"Sessions\"\n    },\n    {\n      id: 5,\n      name: \"Audit Logging\",\n      description: \"Log all administrative actions\",\n      enabled: true,\n      category: \"Monitoring\"\n    },\n    {\n      id: 6,\n      name: \"Password Complexity\",\n      description: \"Enforce strong password requirements\",\n      enabled: true,\n      category: \"Authentication\"\n    }\n  ];\n\n  return (\n    \n      <main className=\"flex-1 overflow-y-auto bg-bg p-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between mb-6\">\n          <div>\n            <h1 className=\"text-2xl font-bold text-white\">Security Management</h1>\n            <p className=\"text-gray-300 mt-1\">Monitor security events and configure access controls</p>\n          </div>\n          <Button className=\"bg-accent text-bg hover:bg-accent-2\">\n            <Shield className=\"w-4 h-4 mr-2\" />\n            Security Report\n          </Button>\n        </div>\n\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n          <Card className=\"crypto-card\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <AlertTriangle className=\"w-8 h-8 text-danger mr-4\" />\n                <div>\n                  <p className=\"text-sm text-gray-400\">Failed Logins (24h)</p>\n                  <p className=\"text-2xl font-bold text-white\">23</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"crypto-card\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <Users className=\"w-8 h-8 text-success mr-4\" />\n                <div>\n                  <p className=\"text-sm text-gray-400\">Active Sessions</p>\n                  <p className=\"text-2xl font-bold text-white\">12</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"crypto-card\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <Smartphone className=\"w-8 h-8 text-accent mr-4\" />\n                <div>\n                  <p className=\"text-sm text-gray-400\">2FA Enabled</p>\n                  <p className=\"text-2xl font-bold text-white\">8/12</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"crypto-card\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <Ban className=\"w-8 h-8 text-warning mr-4\" />\n                <div>\n                  <p className=\"text-sm text-gray-400\">Blocked IPs</p>\n                  <p className=\"text-2xl font-bold text-white\">156</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <Tabs defaultValue=\"logs\" className=\"w-full\">\n          <TabsList className=\"bg-surface-2 mb-6\">\n            <TabsTrigger value=\"logs\" className=\"text-gray-300 data-[state=active]:text-white\">\n              Security Logs\n            </TabsTrigger>\n            <TabsTrigger value=\"2fa\" className=\"text-gray-300 data-[state=active]:text-white\">\n              Two-Factor Auth\n            </TabsTrigger>\n            <TabsTrigger value=\"settings\" className=\"text-gray-300 data-[state=active]:text-white\">\n              Security Settings\n            </TabsTrigger>\n            <TabsTrigger value=\"access\" className=\"text-gray-300 data-[state=active]:text-white\">\n              Access Control\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"logs\">\n            <Card className=\"crypto-card\">\n              <CardHeader>\n                <CardTitle className=\"text-white\">Recent Security Events</CardTitle>\n              </CardHeader>\n              <CardContent className=\"p-0\">\n                <div className=\"overflow-x-auto\">\n                  <table className=\"w-full\">\n                    <thead className=\"bg-surface-2\">\n                      <tr>\n                        <th className=\"text-left p-4 text-sm font-medium text-gray-300\">Event Type</th>\n                        <th className=\"text-left p-4 text-sm font-medium text-gray-300\">User</th>\n                        <th className=\"text-left p-4 text-sm font-medium text-gray-300\">IP Address</th>\n                        <th className=\"text-left p-4 text-sm font-medium text-gray-300\">Location</th>\n                        <th className=\"text-left p-4 text-sm font-medium text-gray-300\">Status</th>\n                        <th className=\"text-left p-4 text-sm font-medium text-gray-300\">Attempts</th>\n                        <th className=\"text-left p-4 text-sm font-medium text-gray-300\">Time</th>\n                        <th className=\"text-left p-4 text-sm font-medium text-gray-300\">Actions</th>\n                      </tr>\n                    </thead>\n                    <tbody className=\"divide-y divide-border\">\n                      {securityLogs.map((log) => (\n                        <tr key={log.id} className=\"hover:bg-surface-2/50\" data-testid={`security-log-${log.id}`}>\n                          <td className=\"p-4\">\n                            <div className=\"flex items-center\">\n                              {log.type === \"Failed Login\" && <AlertTriangle className=\"w-4 h-4 text-danger mr-2\" />}\n                              {log.type === \"Successful Login\" && <Users className=\"w-4 h-4 text-success mr-2\" />}\n                              {log.type === \"Password Change\" && <Key className=\"w-4 h-4 text-accent mr-2\" />}\n                              <span className=\"text-white\">{log.type}</span>\n                            </div>\n                          </td>\n                          <td className=\"p-4\">\n                            <div className=\"flex items-center\">\n                              <div className=\"w-8 h-8 bg-accent/20 rounded-full flex items-center justify-center mr-3\">\n                                <span className=\"text-accent text-sm\">{log.user[0].toUpperCase()}</span>\n                              </div>\n                              <span className=\"text-white\">{log.user}</span>\n                            </div>\n                          </td>\n                          <td className=\"p-4\">\n                            <span className=\"font-mono text-gray-300\">{log.ip}</span>\n                          </td>\n                          <td className=\"p-4 text-gray-300\">{log.location}</td>\n                          <td className=\"p-4\">\n                            <StatusBadge status={log.status} type={log.statusType} />\n                          </td>\n                          <td className=\"p-4\">\n                            <Badge \n                              variant={log.attempts > 3 ? \"destructive\" : log.attempts > 1 ? \"secondary\" : \"outline\"}\n                              className=\"text-xs\"\n                            >\n                              {log.attempts}\n                            </Badge>\n                          </td>\n                          <td className=\"p-4 text-gray-300\">{log.timestamp}</td>\n                          <td className=\"p-4\">\n                            <div className=\"flex items-center space-x-2\">\n                              <Button variant=\"ghost\" size=\"sm\" className=\"text-gray-400 hover:text-white\" data-testid={`view-log-${log.id}`}>\n                                <Eye className=\"w-4 h-4\" />\n                              </Button>\n                              {log.status === \"Blocked\" && (\n                                <Button variant=\"ghost\" size=\"sm\" className=\"text-danger hover:text-red-400\" data-testid={`ban-ip-${log.id}`}>\n                                  <Ban className=\"w-4 h-4\" />\n                                </Button>\n                              )}\n                            </div>\n                          </td>\n                        </tr>\n                      ))}\n                    </tbody>\n                  </table>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"2fa\">\n            <div className=\"space-y-6\">\n              <Card className=\"crypto-card\">\n                <CardHeader>\n                  <CardTitle className=\"text-white\">Two-Factor Authentication Status</CardTitle>\n                </CardHeader>\n                <CardContent className=\"p-0\">\n                  <div className=\"overflow-x-auto\">\n                    <table className=\"w-full\">\n                      <thead className=\"bg-surface-2\">\n                        <tr>\n                          <th className=\"text-left p-4 text-sm font-medium text-gray-300\">User</th>\n                          <th className=\"text-left p-4 text-sm font-medium text-gray-300\">Role</th>\n                          <th className=\"text-left p-4 text-sm font-medium text-gray-300\">2FA Status</th>\n                          <th className=\"text-left p-4 text-sm font-medium text-gray-300\">Backup Codes</th>\n                          <th className=\"text-left p-4 text-sm font-medium text-gray-300\">Device Trust</th>\n                          <th className=\"text-left p-4 text-sm font-medium text-gray-300\">Last Login</th>\n                          <th className=\"text-left p-4 text-sm font-medium text-gray-300\">Actions</th>\n                        </tr>\n                      </thead>\n                      <tbody className=\"divide-y divide-border\">\n                        {twoFactorUsers.map((user) => (\n                          <tr key={user.id} className=\"hover:bg-surface-2/50\" data-testid={`2fa-user-${user.id}`}>\n                            <td className=\"p-4\">\n                              <div className=\"flex items-center\">\n                                <div className=\"w-8 h-8 bg-accent/20 rounded-full flex items-center justify-center mr-3\">\n                                  <span className=\"text-accent text-sm\">{user.username[0].toUpperCase()}</span>\n                                </div>\n                                <span className=\"text-white\">{user.username}</span>\n                              </div>\n                            </td>\n                            <td className=\"p-4\">\n                              <Badge variant=\"outline\" className=\"text-gray-300\">\n                                {user.role}\n                              </Badge>\n                            </td>\n                            <td className=\"p-4\">\n                              <StatusBadge \n                                status={user.twoFAEnabled ? \"Enabled\" : \"Disabled\"} \n                                type={user.twoFAEnabled ? \"success\" : \"danger\"} \n                              />\n                            </td>\n                            <td className=\"p-4\">\n                              <span className=\"text-white\">{user.backupCodes}/10</span>\n                            </td>\n                            <td className=\"p-4\">\n                              <Badge \n                                variant={user.deviceTrust === \"Trusted\" ? \"default\" : \"secondary\"}\n                                className=\"text-xs\"\n                              >\n                                {user.deviceTrust}\n                              </Badge>\n                            </td>\n                            <td className=\"p-4 text-gray-300\">{user.lastLogin}</td>\n                            <td className=\"p-4\">\n                              <div className=\"flex items-center space-x-2\">\n                                {!user.twoFAEnabled && (\n                                  <Button variant=\"ghost\" size=\"sm\" className=\"text-accent hover:text-blue-400\" data-testid={`enable-2fa-${user.id}`}>\n                                    <Smartphone className=\"w-4 h-4\" />\n                                  </Button>\n                                )}\n                                <Button variant=\"ghost\" size=\"sm\" className=\"text-gray-400 hover:text-white\" data-testid={`reset-codes-${user.id}`}>\n                                  <Key className=\"w-4 h-4\" />\n                                </Button>\n                                <Button variant=\"ghost\" size=\"sm\" className=\"text-gray-400 hover:text-white\" data-testid={`view-devices-${user.id}`}>\n                                  <Eye className=\"w-4 h-4\" />\n                                </Button>\n                              </div>\n                            </td>\n                          </tr>\n                        ))}\n                      </tbody>\n                    </table>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"crypto-card\">\n                <CardHeader>\n                  <CardTitle className=\"text-white\">2FA Configuration</CardTitle>\n                </CardHeader>\n                <CardContent className=\"p-6\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                    <div>\n                      <Label htmlFor=\"backupCodeLength\" className=\"text-white\">Backup Code Length</Label>\n                      <Input \n                        id=\"backupCodeLength\"\n                        type=\"number\"\n                        defaultValue=\"10\"\n                        className=\"mt-2 bg-surface-2 border-border text-white\"\n                        data-testid=\"backup-code-length\"\n                      />\n                    </div>\n                    \n                    <div>\n                      <Label htmlFor=\"codeExpiry\" className=\"text-white\">Code Expiry (seconds)</Label>\n                      <Input \n                        id=\"codeExpiry\"\n                        type=\"number\"\n                        defaultValue=\"30\"\n                        className=\"mt-2 bg-surface-2 border-border text-white\"\n                        data-testid=\"code-expiry\"\n                      />\n                    </div>\n                    \n                    <div className=\"md:col-span-2\">\n                      <div className=\"flex items-center justify-between p-4 bg-surface-2 rounded-lg\">\n                        <div>\n                          <p className=\"text-white font-medium\">Enforce 2FA for Admins</p>\n                          <p className=\"text-sm text-gray-400\">Require all admin accounts to use 2FA</p>\n                        </div>\n                        <Switch defaultChecked data-testid=\"enforce-2fa-toggle\" />\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"settings\">\n            <Card className=\"crypto-card\">\n              <CardHeader>\n                <CardTitle className=\"text-white\">Security Configuration</CardTitle>\n              </CardHeader>\n              <CardContent className=\"p-6\">\n                <div className=\"space-y-6\">\n                  {securitySettings.map((setting) => (\n                    <div key={setting.id} className=\"border border-border rounded-lg p-4\" data-testid={`security-setting-${setting.id}`}>\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center space-x-3 mb-2\">\n                            <h3 className=\"text-lg font-medium text-white\">{setting.name}</h3>\n                            <Badge variant=\"outline\" className=\"text-gray-300 text-xs\">\n                              {setting.category}\n                            </Badge>\n                          </div>\n                          <p className=\"text-gray-300\">{setting.description}</p>\n                        </div>\n                        <div className=\"ml-6\">\n                          <Switch \n                            defaultChecked={setting.enabled}\n                            data-testid={`toggle-setting-${setting.id}`}\n                          />\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n                \n                <div className=\"mt-8 grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <div>\n                    <Label htmlFor=\"sessionTimeout\" className=\"text-white\">Session Timeout (minutes)</Label>\n                    <Input \n                      id=\"sessionTimeout\"\n                      type=\"number\"\n                      defaultValue=\"60\"\n                      className=\"mt-2 bg-surface-2 border-border text-white\"\n                      data-testid=\"session-timeout\"\n                    />\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"maxLoginAttempts\" className=\"text-white\">Max Failed Login Attempts</Label>\n                    <Input \n                      id=\"maxLoginAttempts\"\n                      type=\"number\"\n                      defaultValue=\"5\"\n                      className=\"mt-2 bg-surface-2 border-border text-white\"\n                      data-testid=\"max-login-attempts\"\n                    />\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"lockoutDuration\" className=\"text-white\">Account Lockout Duration (minutes)</Label>\n                    <Input \n                      id=\"lockoutDuration\"\n                      type=\"number\"\n                      defaultValue=\"30\"\n                      className=\"mt-2 bg-surface-2 border-border text-white\"\n                      data-testid=\"lockout-duration\"\n                    />\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"passwordExpiry\" className=\"text-white\">Password Expiry (days)</Label>\n                    <Input \n                      id=\"passwordExpiry\"\n                      type=\"number\"\n                      defaultValue=\"90\"\n                      className=\"mt-2 bg-surface-2 border-border text-white\"\n                      data-testid=\"password-expiry\"\n                    />\n                  </div>\n                </div>\n                \n                <div className=\"mt-6\">\n                  <Button className=\"bg-accent text-bg hover:bg-accent-2\" data-testid=\"save-security-settings\">\n                    Save Security Settings\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"access\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              <Card className=\"crypto-card\">\n                <CardHeader>\n                  <CardTitle className=\"text-white\">IP Whitelist</CardTitle>\n                </CardHeader>\n                <CardContent className=\"p-6\">\n                  <div className=\"space-y-4\">\n                    <div className=\"flex space-x-2\">\n                      <Input \n                        placeholder=\"192.168.1.0/24\"\n                        className=\"bg-surface-2 border-border text-white\"\n                        data-testid=\"ip-whitelist-input\"\n                      />\n                      <Button className=\"bg-accent text-bg hover:bg-accent-2\" data-testid=\"add-ip-button\">\n                        Add\n                      </Button>\n                    </div>\n                    \n                    <div className=\"space-y-2\">\n                      <div className=\"flex items-center justify-between p-3 bg-surface-2 rounded-lg\">\n                        <span className=\"font-mono text-white\">10.0.0.0/8</span>\n                        <div className=\"flex items-center space-x-2\">\n                          <Badge variant=\"default\" className=\"text-xs\">Office Network</Badge>\n                          <Button variant=\"ghost\" size=\"sm\" className=\"text-danger hover:text-red-400 h-6 w-6 p-0\" data-testid=\"remove-ip-1\">\n                            <Ban className=\"w-3 h-3\" />\n                          </Button>\n                        </div>\n                      </div>\n                      \n                      <div className=\"flex items-center justify-between p-3 bg-surface-2 rounded-lg\">\n                        <span className=\"font-mono text-white\">192.168.1.0/24</span>\n                        <div className=\"flex items-center space-x-2\">\n                          <Badge variant=\"outline\" className=\"text-xs\">Local Network</Badge>\n                          <Button variant=\"ghost\" size=\"sm\" className=\"text-danger hover:text-red-400 h-6 w-6 p-0\" data-testid=\"remove-ip-2\">\n                            <Ban className=\"w-3 h-3\" />\n                          </Button>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"crypto-card\">\n                <CardHeader>\n                  <CardTitle className=\"text-white\">Blocked IPs</CardTitle>\n                </CardHeader>\n                <CardContent className=\"p-6\">\n                  <div className=\"space-y-2\">\n                    <div className=\"flex items-center justify-between p-3 bg-surface-2 rounded-lg\">\n                      <span className=\"font-mono text-white\">45.67.89.12</span>\n                      <div className=\"flex items-center space-x-2\">\n                        <Badge variant=\"destructive\" className=\"text-xs\">Brute Force</Badge>\n                        <Button variant=\"ghost\" size=\"sm\" className=\"text-success hover:text-green-400 h-6 w-6 p-0\" data-testid=\"unblock-ip-1\">\n                          <Lock className=\"w-3 h-3\" />\n                        </Button>\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex items-center justify-between p-3 bg-surface-2 rounded-lg\">\n                      <span className=\"font-mono text-white\">123.45.67.89</span>\n                      <div className=\"flex items-center space-x-2\">\n                        <Badge variant=\"destructive\" className=\"text-xs\">Suspicious Activity</Badge>\n                        <Button variant=\"ghost\" size=\"sm\" className=\"text-success hover:text-green-400 h-6 w-6 p-0\" data-testid=\"unblock-ip-2\">\n                          <Lock className=\"w-3 h-3\" />\n                        </Button>\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex items-center justify-between p-3 bg-surface-2 rounded-lg\">\n                      <span className=\"font-mono text-white\">98.76.54.32</span>\n                      <div className=\"flex items-center space-x-2\">\n                        <Badge variant=\"destructive\" className=\"text-xs\">Failed Login</Badge>\n                        <Button variant=\"ghost\" size=\"sm\" className=\"text-success hover:text-green-400 h-6 w-6 p-0\" data-testid=\"unblock-ip-3\">\n                          <Lock className=\"w-3 h-3\" />\n                        </Button>\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"mt-4\">\n                    <Button variant=\"outline\" className=\"w-full border-border text-gray-300 hover:bg-surface-2\" data-testid=\"clear-blocked-ips\">\n                      Clear All Blocked IPs\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n        </Tabs>\n      </main>\n    \n  );\n}","size_bytes":26684},"client/src/pages/admin/tickets.tsx":{"content":"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { StatusBadge } from \"@/components/ui/status-badge\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Search, Filter, Eye, MessageSquare, Clock, User, Ticket as TicketIcon } from \"lucide-react\";\nimport { SAMPLE_TICKETS } from \"@/lib/constants\";\n\nexport default function AdminTickets() {\n\n  return (\n    \n      <main className=\"flex-1 overflow-y-auto bg-bg p-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between mb-6\">\n          <div>\n            <h1 className=\"text-2xl font-bold text-white\">Support Tickets</h1>\n            <p className=\"text-gray-300 mt-1\">Manage customer support requests and inquiries</p>\n          </div>\n          <Button className=\"bg-accent text-bg hover:bg-accent-2\">\n            Create Ticket\n          </Button>\n        </div>\n\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n          <Card className=\"crypto-card\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <TicketIcon className=\"w-8 h-8 text-danger mr-4\" />\n                <div>\n                  <p className=\"text-sm text-gray-400\">Open Tickets</p>\n                  <p className=\"text-2xl font-bold text-white\">12</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"crypto-card\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <Clock className=\"w-8 h-8 text-warning mr-4\" />\n                <div>\n                  <p className=\"text-sm text-gray-400\">In Progress</p>\n                  <p className=\"text-2xl font-bold text-white\">5</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"crypto-card\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <div className=\"w-8 h-8 bg-success/20 rounded-lg flex items-center justify-center mr-4\">\n                  <TicketIcon className=\"w-5 h-5 text-success\" />\n                </div>\n                <div>\n                  <p className=\"text-sm text-gray-400\">Resolved Today</p>\n                  <p className=\"text-2xl font-bold text-white\">23</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"crypto-card\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <User className=\"w-8 h-8 text-accent mr-4\" />\n                <div>\n                  <p className=\"text-sm text-gray-400\">Avg Response Time</p>\n                  <p className=\"text-2xl font-bold text-white\">2.3h</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Filters */}\n        <Card className=\"crypto-card mb-6\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex flex-col md:flex-row gap-4\">\n              <div className=\"flex-1\">\n                <div className=\"relative\">\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n                  <Input \n                    placeholder=\"Search tickets by ID, user, or subject...\" \n                    className=\"pl-10 bg-surface-2 border-border text-white\"\n                    data-testid=\"search-tickets\"\n                  />\n                </div>\n              </div>\n              <Select>\n                <SelectTrigger className=\"w-40 bg-surface-2 border-border text-white\">\n                  <SelectValue placeholder=\"Status\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Status</SelectItem>\n                  <SelectItem value=\"open\">Open</SelectItem>\n                  <SelectItem value=\"progress\">In Progress</SelectItem>\n                  <SelectItem value=\"closed\">Closed</SelectItem>\n                </SelectContent>\n              </Select>\n              <Select>\n                <SelectTrigger className=\"w-40 bg-surface-2 border-border text-white\">\n                  <SelectValue placeholder=\"Priority\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Priority</SelectItem>\n                  <SelectItem value=\"high\">High</SelectItem>\n                  <SelectItem value=\"medium\">Medium</SelectItem>\n                  <SelectItem value=\"low\">Low</SelectItem>\n                </SelectContent>\n              </Select>\n              <Select>\n                <SelectTrigger className=\"w-40 bg-surface-2 border-border text-white\">\n                  <SelectValue placeholder=\"Assigned\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Agents</SelectItem>\n                  <SelectItem value=\"agent1\">support_agent_1</SelectItem>\n                  <SelectItem value=\"agent2\">support_agent_2</SelectItem>\n                  <SelectItem value=\"unassigned\">Unassigned</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Tickets Table */}\n        <Card className=\"crypto-card\">\n          <CardHeader>\n            <CardTitle className=\"text-white\">Support Tickets</CardTitle>\n          </CardHeader>\n          <CardContent className=\"p-0\">\n            <div className=\"overflow-x-auto\">\n              <table className=\"w-full\">\n                <thead className=\"bg-surface-2\">\n                  <tr>\n                    <th className=\"text-left p-4 text-sm font-medium text-gray-300\">Ticket ID</th>\n                    <th className=\"text-left p-4 text-sm font-medium text-gray-300\">User</th>\n                    <th className=\"text-left p-4 text-sm font-medium text-gray-300\">Subject</th>\n                    <th className=\"text-left p-4 text-sm font-medium text-gray-300\">Status</th>\n                    <th className=\"text-left p-4 text-sm font-medium text-gray-300\">Priority</th>\n                    <th className=\"text-left p-4 text-sm font-medium text-gray-300\">Assigned To</th>\n                    <th className=\"text-left p-4 text-sm font-medium text-gray-300\">Created</th>\n                    <th className=\"text-left p-4 text-sm font-medium text-gray-300\">Actions</th>\n                  </tr>\n                </thead>\n                <tbody className=\"divide-y divide-border\">\n                  {SAMPLE_TICKETS.map((ticket) => (\n                    <tr key={ticket.id} className=\"hover:bg-surface-2/50\" data-testid={`ticket-row-${ticket.id}`}>\n                      <td className=\"p-4\">\n                        <span className=\"font-mono text-accent\">{ticket.ticketId}</span>\n                      </td>\n                      <td className=\"p-4\">\n                        <div className=\"flex items-center\">\n                          <div className=\"w-8 h-8 bg-accent/20 rounded-full flex items-center justify-center mr-3\">\n                            <span className=\"text-accent text-sm\">{ticket.user[0].toUpperCase()}</span>\n                          </div>\n                          <span className=\"text-white\">{ticket.user}</span>\n                        </div>\n                      </td>\n                      <td className=\"p-4\">\n                        <div className=\"max-w-xs\">\n                          <p className=\"text-white truncate\">{ticket.subject}</p>\n                        </div>\n                      </td>\n                      <td className=\"p-4\">\n                        <StatusBadge status={ticket.status} type={ticket.statusType} />\n                      </td>\n                      <td className=\"p-4\">\n                        <Badge \n                          variant={\n                            ticket.priority === \"High\" ? \"destructive\" :\n                            ticket.priority === \"Medium\" ? \"secondary\" :\n                            \"outline\"\n                          }\n                          className=\"text-xs\"\n                        >\n                          {ticket.priority}\n                        </Badge>\n                      </td>\n                      <td className=\"p-4 text-gray-300\">{ticket.assignedTo}</td>\n                      <td className=\"p-4 text-gray-300\">{ticket.created}</td>\n                      <td className=\"p-4\">\n                        <div className=\"flex items-center space-x-2\">\n                          <Button variant=\"ghost\" size=\"sm\" className=\"text-gray-400 hover:text-white\" data-testid={`view-ticket-${ticket.id}`}>\n                            <Eye className=\"w-4 h-4\" />\n                          </Button>\n                          <Button variant=\"ghost\" size=\"sm\" className=\"text-gray-400 hover:text-white\" data-testid={`reply-ticket-${ticket.id}`}>\n                            <MessageSquare className=\"w-4 h-4\" />\n                          </Button>\n                          {ticket.status === \"Open\" && (\n                            <Button variant=\"ghost\" size=\"sm\" className=\"text-accent hover:text-blue-400\" data-testid={`assign-ticket-${ticket.id}`}>\n                              Assign\n                            </Button>\n                          )}\n                          {ticket.status !== \"Closed\" && (\n                            <Button variant=\"ghost\" size=\"sm\" className=\"text-success hover:text-green-400\" data-testid={`close-ticket-${ticket.id}`}>\n                              Close\n                            </Button>\n                          )}\n                        </div>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Quick Reply Templates */}\n        <Card className=\"crypto-card mt-6\">\n          <CardHeader>\n            <CardTitle className=\"text-white\">Quick Reply Templates</CardTitle>\n          </CardHeader>\n          <CardContent className=\"p-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div className=\"p-4 bg-surface-2 rounded-lg\">\n                <h4 className=\"text-white font-medium mb-2\">Account Recovery</h4>\n                <p className=\"text-sm text-gray-400 mb-3\">Thank you for contacting support. To help you recover your account, please provide your recovery phrase...</p>\n                <Button variant=\"outline\" size=\"sm\" className=\"border-border text-gray-300 hover:bg-surface\" data-testid=\"use-template-recovery\">\n                  Use Template\n                </Button>\n              </div>\n              \n              <div className=\"p-4 bg-surface-2 rounded-lg\">\n                <h4 className=\"text-white font-medium mb-2\">Order Issue</h4>\n                <p className=\"text-sm text-gray-400 mb-3\">We apologize for the issue with your order. Please provide your order ID and we'll investigate immediately...</p>\n                <Button variant=\"outline\" size=\"sm\" className=\"border-border text-gray-300 hover:bg-surface\" data-testid=\"use-template-order\">\n                  Use Template\n                </Button>\n              </div>\n              \n              <div className=\"p-4 bg-surface-2 rounded-lg\">\n                <h4 className=\"text-white font-medium mb-2\">General Inquiry</h4>\n                <p className=\"text-sm text-gray-400 mb-3\">Thank you for reaching out. We've received your inquiry and will respond within 24 hours...</p>\n                <Button variant=\"outline\" size=\"sm\" className=\"border-border text-gray-300 hover:bg-surface\" data-testid=\"use-template-general\">\n                  Use Template\n                </Button>\n              </div>\n              \n              <div className=\"p-4 bg-surface-2 rounded-lg\">\n                <h4 className=\"text-white font-medium mb-2\">Vendor Application</h4>\n                <p className=\"text-sm text-gray-400 mb-3\">Thank you for your vendor application. We'll review your submission and respond within 3-5 business days...</p>\n                <Button variant=\"outline\" size=\"sm\" className=\"border-border text-gray-300 hover:bg-surface\" data-testid=\"use-template-vendor\">\n                  Use Template\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </main>\n    \n  );\n}","size_bytes":12762},"client/src/pages/admin/users.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { StatusBadge } from \"@/components/ui/status-badge\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from \"@/components/ui/alert-dialog\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuSeparator, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport { Form, FormControl, FormField, FormItem, FormLabel } from \"@/components/ui/form\";\nimport { useForm } from \"react-hook-form\";\nimport { Search, Filter, MoreHorizontal, Ban, Unlock, Eye, LogIn, Edit, Trash2, Plus, Phone, Mail, Calendar, User, UserCheck, Shield, Settings } from \"lucide-react\";\nimport { SAMPLE_USERS } from \"@/lib/constants\";\n\nexport default function AdminUsers() {\n  const [addUserModalOpen, setAddUserModalOpen] = useState(false);\n  const [editUserModalOpen, setEditUserModalOpen] = useState(false);\n  const [userDetailsModalOpen, setUserDetailsModalOpen] = useState(false);\n  const [banConfirmOpen, setBanConfirmOpen] = useState(false);\n  const [deleteConfirmOpen, setDeleteConfirmOpen] = useState(false);\n  const [selectedUser, setSelectedUser] = useState<any>(null);\n  const [actionUser, setActionUser] = useState<any>(null);\n  \n  const form = useForm({\n    defaultValues: {\n      fullName: \"\",\n      username: \"\",\n      email: \"\",\n      password: \"\",\n      confirmPassword: \"\",\n      role: \"Viewer / Normal User\",\n      status: \"Active\",\n      phoneNumber: \"\",\n      profilePicture: null\n    }\n  });\n  \n  const editForm = useForm({\n    defaultValues: {\n      fullName: \"\",\n      username: \"\",\n      email: \"\",\n      role: \"Viewer / Normal User\",\n      status: \"Active\",\n      phoneNumber: \"\"\n    }\n  });\n  \n  const handleCreateUser = (data: any) => {\n    console.log(\"Creating user:\", data);\n    setAddUserModalOpen(false);\n    form.reset();\n  };\n  \n  const handleViewUser = (user: any) => {\n    setSelectedUser(user);\n    setUserDetailsModalOpen(true);\n  };\n  \n  const handleLoginAsUser = (userId: number) => {\n    console.log(\"Login as user:\", userId);\n  };\n  \n  const handleEditUser = (user: any) => {\n    setSelectedUser(user);\n    editForm.reset({\n      fullName: user.username, // Using username as fullName since we don't have fullName in sample data\n      username: user.username,\n      email: user.email,\n      role: user.role,\n      status: user.status,\n      phoneNumber: \"\"\n    });\n    setEditUserModalOpen(true);\n  };\n  \n  const handleUpdateUser = (data: any) => {\n    console.log(\"Updating user:\", selectedUser?.id, data);\n    setEditUserModalOpen(false);\n  };\n  \n  const handleBanUser = (user: any) => {\n    setActionUser(user);\n    setBanConfirmOpen(true);\n  };\n  \n  const handleUnbanUser = (user: any) => {\n    setActionUser(user);\n    console.log(\"Unbanning user:\", user.id);\n  };\n  \n  const handleDeleteUser = (user: any) => {\n    setActionUser(user);\n    setDeleteConfirmOpen(true);\n  };\n  \n  const confirmBanUser = () => {\n    console.log(\"Confirmed banning user:\", actionUser?.id);\n    setBanConfirmOpen(false);\n    setActionUser(null);\n  };\n  \n  const confirmDeleteUser = () => {\n    console.log(\"Confirmed deleting user:\", actionUser?.id);\n    setDeleteConfirmOpen(false);\n    setActionUser(null);\n  };\n\n  return (\n    <main className=\"flex-1 overflow-y-auto bg-bg p-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between mb-6\">\n          <div>\n            <h1 className=\"text-2xl font-bold text-white\">User Management</h1>\n            <p className=\"text-gray-300 mt-1\">Manage platform users, vendors, and administrators</p>\n          </div>\n          <Dialog open={addUserModalOpen} onOpenChange={setAddUserModalOpen}>\n            <DialogTrigger asChild>\n              <Button className=\"bg-accent text-bg hover:bg-accent-2\" data-testid=\"add-new-user-btn\">\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Add New User\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"sm:max-w-[600px] bg-card border border-border shadow-xl\">\n              <DialogHeader>\n                <DialogTitle className=\"text-white\">Add New User</DialogTitle>\n              </DialogHeader>\n              <Form {...form}>\n                <form onSubmit={form.handleSubmit(handleCreateUser)} className=\"space-y-4\">\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"fullName\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel className=\"text-gray-300\">Full Name</FormLabel>\n                          <FormControl>\n                            <Input \n                              placeholder=\"Enter full name\" \n                              className=\"!bg-gray-800 !border-gray-600 !text-white placeholder:text-gray-400 focus:!bg-gray-800\"\n                              data-testid=\"input-full-name\"\n                              {...field} \n                            />\n                          </FormControl>\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={form.control}\n                      name=\"username\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel className=\"text-gray-300\">Username</FormLabel>\n                          <FormControl>\n                            <Input \n                              placeholder=\"Enter username\" \n                              className=\"!bg-gray-800 !border-gray-600 !text-white placeholder:text-gray-400 focus:!bg-gray-800\"\n                              data-testid=\"input-username\"\n                              {...field} \n                            />\n                          </FormControl>\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n                  \n                  <FormField\n                    control={form.control}\n                    name=\"email\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel className=\"text-gray-300\">Email Address</FormLabel>\n                        <FormControl>\n                          <Input \n                            type=\"email\" \n                            placeholder=\"Enter email address\" \n                            className=\"!bg-gray-800 !border-gray-600 !text-white placeholder:text-gray-400 focus:!bg-gray-800\"\n                            data-testid=\"input-email\"\n                            {...field} \n                          />\n                        </FormControl>\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"password\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel className=\"text-gray-300\">Password</FormLabel>\n                          <FormControl>\n                            <Input \n                              type=\"password\" \n                              placeholder=\"Enter password\" \n                              className=\"!bg-gray-800 !border-gray-600 !text-white placeholder:text-gray-400 focus:!bg-gray-800\"\n                              data-testid=\"input-password\"\n                              {...field} \n                            />\n                          </FormControl>\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={form.control}\n                      name=\"confirmPassword\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel className=\"text-gray-300\">Confirm Password</FormLabel>\n                          <FormControl>\n                            <Input \n                              type=\"password\" \n                              placeholder=\"Confirm password\" \n                              className=\"!bg-gray-800 !border-gray-600 !text-white placeholder:text-gray-400 focus:!bg-gray-800\"\n                              data-testid=\"input-confirm-password\"\n                              {...field} \n                            />\n                          </FormControl>\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n                  \n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"role\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel className=\"text-gray-300\">Role / User Type</FormLabel>\n                          <Select onValueChange={field.onChange} defaultValue={field.value}>\n                            <FormControl>\n                              <SelectTrigger className=\"!bg-gray-800 !border-gray-600 !text-white placeholder:text-gray-400 focus:!bg-gray-800\" data-testid=\"select-role\">\n                                <SelectValue />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              <SelectItem value=\"Admin\">Admin</SelectItem>\n                              <SelectItem value=\"Editor / Manager\">Editor / Manager</SelectItem>\n                              <SelectItem value=\"Viewer / Normal User\">Viewer / Normal User</SelectItem>\n                            </SelectContent>\n                          </Select>\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={form.control}\n                      name=\"status\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel className=\"text-gray-300\">Status</FormLabel>\n                          <Select onValueChange={field.onChange} defaultValue={field.value}>\n                            <FormControl>\n                              <SelectTrigger className=\"!bg-gray-800 !border-gray-600 !text-white placeholder:text-gray-400 focus:!bg-gray-800\" data-testid=\"select-status\">\n                                <SelectValue />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              <SelectItem value=\"Active\">Active</SelectItem>\n                              <SelectItem value=\"Inactive\">Inactive</SelectItem>\n                            </SelectContent>\n                          </Select>\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n                  \n                  <FormField\n                    control={form.control}\n                    name=\"phoneNumber\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel className=\"text-gray-300\">Phone Number (Optional)</FormLabel>\n                        <FormControl>\n                          <Input \n                            placeholder=\"Enter phone number\" \n                            className=\"!bg-gray-800 !border-gray-600 !text-white placeholder:text-gray-400 focus:!bg-gray-800\"\n                            data-testid=\"input-phone\"\n                            {...field} \n                          />\n                        </FormControl>\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <FormField\n                    control={form.control}\n                    name=\"profilePicture\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel className=\"text-gray-300\">Profile Picture (Optional)</FormLabel>\n                        <FormControl>\n                          <Input \n                            type=\"file\" \n                            accept=\"image/*\"\n                            className=\"!bg-gray-800 !border-gray-600 !text-white placeholder:text-gray-400 focus:!bg-gray-800\"\n                            data-testid=\"input-profile-picture\"\n                            onChange={(e) => field.onChange(e.target.files?.[0] || null)}\n                          />\n                        </FormControl>\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <div className=\"flex justify-end space-x-3 pt-4\">\n                    <Button \n                      type=\"button\" \n                      variant=\"outline\" \n                      onClick={() => setAddUserModalOpen(false)}\n                      className=\"border-border text-gray-300 hover:bg-surface-2\"\n                      data-testid=\"btn-cancel\"\n                    >\n                      Cancel\n                    </Button>\n                    <Button \n                      type=\"submit\" \n                      className=\"bg-accent text-bg hover:bg-accent-2\"\n                      data-testid=\"btn-create-user\"\n                    >\n                      Create User\n                    </Button>\n                  </div>\n                </form>\n              </Form>\n            </DialogContent>\n          </Dialog>\n        </div>\n\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n          <Card className=\"crypto-card\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <div className=\"p-2 bg-accent/20 rounded-lg\">\n                  <div className=\"w-6 h-6 bg-accent rounded\"></div>\n                </div>\n                <div className=\"ml-4\">\n                  <p className=\"text-sm text-gray-400\">Total Users</p>\n                  <p className=\"text-2xl font-bold text-white\">2,847</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"crypto-card\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <div className=\"p-2 bg-success/20 rounded-lg\">\n                  <div className=\"w-6 h-6 bg-success rounded\"></div>\n                </div>\n                <div className=\"ml-4\">\n                  <p className=\"text-sm text-gray-400\">Active Users</p>\n                  <p className=\"text-2xl font-bold text-white\">2,734</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"crypto-card\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <div className=\"p-2 bg-warning/20 rounded-lg\">\n                  <div className=\"w-6 h-6 bg-warning rounded\"></div>\n                </div>\n                <div className=\"ml-4\">\n                  <p className=\"text-sm text-gray-400\">Vendors</p>\n                  <p className=\"text-2xl font-bold text-white\">127</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"crypto-card\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <div className=\"p-2 bg-danger/20 rounded-lg\">\n                  <div className=\"w-6 h-6 bg-danger rounded\"></div>\n                </div>\n                <div className=\"ml-4\">\n                  <p className=\"text-sm text-gray-400\">Banned</p>\n                  <p className=\"text-2xl font-bold text-white\">23</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Filters */}\n        <Card className=\"crypto-card mb-6\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex flex-col md:flex-row gap-4\">\n              <div className=\"flex-1\">\n                <div className=\"relative\">\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n                  <Input \n                    placeholder=\"Search users by username or email...\" \n                    className=\"pl-10 !bg-gray-800 !border-gray-600 !text-white placeholder:text-gray-400 focus:!bg-gray-800\"\n                    data-testid=\"search-users\"\n                  />\n                </div>\n              </div>\n              <Select>\n                <SelectTrigger className=\"w-40 !bg-gray-800 !border-gray-600 !text-white placeholder:text-gray-400 focus:!bg-gray-800\">\n                  <SelectValue placeholder=\"Status\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Status</SelectItem>\n                  <SelectItem value=\"active\">Active</SelectItem>\n                  <SelectItem value=\"banned\">Banned</SelectItem>\n                  <SelectItem value=\"pending\">Pending</SelectItem>\n                </SelectContent>\n              </Select>\n              <Select>\n                <SelectTrigger className=\"w-40 !bg-gray-800 !border-gray-600 !text-white placeholder:text-gray-400 focus:!bg-gray-800\">\n                  <SelectValue placeholder=\"Role\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Roles</SelectItem>\n                  <SelectItem value=\"customer\">Customer</SelectItem>\n                  <SelectItem value=\"vendor\">Vendor</SelectItem>\n                  <SelectItem value=\"admin\">Admin</SelectItem>\n                </SelectContent>\n              </Select>\n              <Button variant=\"outline\" className=\"border-border hover:bg-surface-2\">\n                <Filter className=\"w-4 h-4 mr-2\" />\n                Filter\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Users Table */}\n        <Card className=\"crypto-card\">\n          <CardHeader>\n            <CardTitle className=\"text-white\">Users List</CardTitle>\n          </CardHeader>\n          <CardContent className=\"p-0\">\n            <div className=\"overflow-x-auto\">\n              <table className=\"w-full\">\n                <thead className=\"bg-surface-2\">\n                  <tr>\n                    <th className=\"text-left p-4 text-sm font-medium text-gray-300\">Username</th>\n                    <th className=\"text-left p-4 text-sm font-medium text-gray-300\">Email</th>\n                    <th className=\"text-left p-4 text-sm font-medium text-gray-300\">Role</th>\n                    <th className=\"text-left p-4 text-sm font-medium text-gray-300\">Status</th>\n                    <th className=\"text-left p-4 text-sm font-medium text-gray-300\">Join Date</th>\n                    <th className=\"text-left p-4 text-sm font-medium text-gray-300\">Last Login</th>\n                    <th className=\"text-left p-4 text-sm font-medium text-gray-300\">Orders</th>\n                    <th className=\"text-left p-4 text-sm font-medium text-gray-300\">Actions</th>\n                  </tr>\n                </thead>\n                <tbody className=\"divide-y divide-border\">\n                  {SAMPLE_USERS.map((user) => (\n                    <tr key={user.id} className=\"hover:bg-surface-2/50\" data-testid={`user-row-${user.id}`}>\n                      <td className=\"p-4\">\n                        <div className=\"flex items-center\">\n                          <div className=\"w-8 h-8 bg-accent/20 rounded-full flex items-center justify-center mr-3\">\n                            <span className=\"text-accent text-sm font-medium\">{user.username[0].toUpperCase()}</span>\n                          </div>\n                          <span className=\"font-medium text-white\">{user.username}</span>\n                        </div>\n                      </td>\n                      <td className=\"p-4 text-gray-300\">{user.email}</td>\n                      <td className=\"p-4\">\n                        <Badge \n                          variant={user.role === \"Vendor\" ? \"secondary\" : \"outline\"}\n                          className=\"text-gray-300\"\n                        >\n                          {user.role}\n                        </Badge>\n                      </td>\n                      <td className=\"p-4\">\n                        <StatusBadge status={user.status} type={user.statusType} />\n                      </td>\n                      <td className=\"p-4 text-gray-300\">{user.joinDate}</td>\n                      <td className=\"p-4 text-gray-300\">{user.lastLogin}</td>\n                      <td className=\"p-4 text-gray-300\">{user.orders}</td>\n                      <td className=\"p-4\">\n                        <div className=\"flex items-center space-x-2\">\n                          <Button \n                            variant=\"ghost\" \n                            size=\"sm\" \n                            className=\"text-gray-400 hover:text-white\" \n                            onClick={() => handleViewUser(user)}\n                            data-testid={`view-user-${user.id}`}\n                          >\n                            <Eye className=\"w-4 h-4\" />\n                          </Button>\n                          <Button \n                            variant=\"ghost\" \n                            size=\"sm\" \n                            className=\"text-gray-400 hover:text-white\" \n                            onClick={() => handleEditUser(user)}\n                            data-testid={`edit-user-${user.id}`}\n                          >\n                            <Edit className=\"w-4 h-4\" />\n                          </Button>\n                          <Button \n                            variant=\"ghost\" \n                            size=\"sm\" \n                            className=\"text-gray-400 hover:text-white\" \n                            onClick={() => handleLoginAsUser(user.id)}\n                            data-testid={`login-as-${user.id}`}\n                          >\n                            <LogIn className=\"w-4 h-4\" />\n                          </Button>\n                          {user.status === \"Active\" ? (\n                            <Button \n                              variant=\"ghost\" \n                              size=\"sm\" \n                              className=\"text-danger hover:text-red-400\" \n                              onClick={() => handleBanUser(user)}\n                              data-testid={`ban-user-${user.id}`}\n                            >\n                              <Ban className=\"w-4 h-4\" />\n                            </Button>\n                          ) : (\n                            <Button \n                              variant=\"ghost\" \n                              size=\"sm\" \n                              className=\"text-success hover:text-green-400\" \n                              onClick={() => handleUnbanUser(user)}\n                              data-testid={`unban-user-${user.id}`}\n                            >\n                              <Unlock className=\"w-4 h-4\" />\n                            </Button>\n                          )}\n                          <DropdownMenu>\n                            <DropdownMenuTrigger asChild>\n                              <Button \n                                variant=\"ghost\" \n                                size=\"sm\" \n                                className=\"text-gray-400 hover:text-white\"\n                                data-testid={`more-actions-${user.id}`}\n                              >\n                                <MoreHorizontal className=\"w-4 h-4\" />\n                              </Button>\n                            </DropdownMenuTrigger>\n                            <DropdownMenuContent align=\"end\" className=\"bg-card border-border\">\n                              <DropdownMenuItem \n                                className=\"text-gray-300 hover:bg-surface-2 hover:text-white cursor-pointer\"\n                                onClick={() => handleEditUser(user)}\n                              >\n                                <Edit className=\"w-4 h-4 mr-2\" />\n                                Edit User\n                              </DropdownMenuItem>\n                              <DropdownMenuItem \n                                className=\"text-gray-300 hover:bg-surface-2 hover:text-white cursor-pointer\"\n                                onClick={() => console.log('View activity:', user.id)}\n                              >\n                                <UserCheck className=\"w-4 h-4 mr-2\" />\n                                View Activity\n                              </DropdownMenuItem>\n                              <DropdownMenuItem \n                                className=\"text-gray-300 hover:bg-surface-2 hover:text-white cursor-pointer\"\n                                onClick={() => console.log('Reset password:', user.id)}\n                              >\n                                <Shield className=\"w-4 h-4 mr-2\" />\n                                Reset Password\n                              </DropdownMenuItem>\n                              <DropdownMenuSeparator className=\"bg-border\" />\n                              <DropdownMenuItem \n                                className=\"text-danger hover:bg-danger/10 hover:text-red-400 cursor-pointer\"\n                                onClick={() => handleDeleteUser(user)}\n                              >\n                                <Trash2 className=\"w-4 h-4 mr-2\" />\n                                Delete User\n                              </DropdownMenuItem>\n                            </DropdownMenuContent>\n                          </DropdownMenu>\n                        </div>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          </CardContent>\n        </Card>\n        \n        {/* User Details Modal */}\n        <Dialog open={userDetailsModalOpen} onOpenChange={setUserDetailsModalOpen}>\n          <DialogContent className=\"sm:max-w-[500px] bg-card border border-border shadow-xl\">\n            <DialogHeader>\n              <DialogTitle className=\"text-white\">User Details</DialogTitle>\n            </DialogHeader>\n            {selectedUser && (\n              <div className=\"space-y-6\">\n                {/* Profile Section */}\n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"w-16 h-16 bg-accent/20 rounded-full flex items-center justify-center\">\n                    <span className=\"text-accent text-xl font-semibold\">\n                      {selectedUser.username[0].toUpperCase()}\n                    </span>\n                  </div>\n                  <div>\n                    <h3 className=\"text-lg font-semibold text-white\">{selectedUser.username}</h3>\n                    <p className=\"text-gray-400\">{selectedUser.email}</p>\n                    <StatusBadge status={selectedUser.status} type={selectedUser.statusType} className=\"mt-1\" />\n                  </div>\n                </div>\n                \n                {/* Details Grid */}\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-4\">\n                    <div>\n                      <Label className=\"text-gray-400 text-sm\">Role</Label>\n                      <div className=\"flex items-center mt-1\">\n                        <User className=\"w-4 h-4 text-accent mr-2\" />\n                        <span className=\"text-white\">{selectedUser.role}</span>\n                      </div>\n                    </div>\n                    \n                    <div>\n                      <Label className=\"text-gray-400 text-sm\">Join Date</Label>\n                      <div className=\"flex items-center mt-1\">\n                        <Calendar className=\"w-4 h-4 text-accent mr-2\" />\n                        <span className=\"text-white\">{selectedUser.joinDate}</span>\n                      </div>\n                    </div>\n                    \n                    <div>\n                      <Label className=\"text-gray-400 text-sm\">Total Orders</Label>\n                      <div className=\"flex items-center mt-1\">\n                        <span className=\"text-white text-lg font-semibold\">{selectedUser.orders}</span>\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"space-y-4\">\n                    <div>\n                      <Label className=\"text-gray-400 text-sm\">Email</Label>\n                      <div className=\"flex items-center mt-1\">\n                        <Mail className=\"w-4 h-4 text-accent mr-2\" />\n                        <span className=\"text-white text-sm\">{selectedUser.email}</span>\n                      </div>\n                    </div>\n                    \n                    <div>\n                      <Label className=\"text-gray-400 text-sm\">Last Login</Label>\n                      <div className=\"flex items-center mt-1\">\n                        <span className=\"text-white\">{selectedUser.lastLogin}</span>\n                      </div>\n                    </div>\n                    \n                    <div>\n                      <Label className=\"text-gray-400 text-sm\">Total Spent</Label>\n                      <div className=\"flex items-center mt-1\">\n                        <span className=\"text-accent font-mono font-semibold\">{selectedUser.totalSpent}</span>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n                \n                {/* Action Buttons */}\n                <div className=\"flex justify-end space-x-3 pt-4 border-t border-border\">\n                  <Button \n                    variant=\"outline\" \n                    size=\"sm\"\n                    className=\"border-border text-gray-300 hover:bg-surface-2\"\n                    onClick={() => {\n                      setUserDetailsModalOpen(false);\n                      handleEditUser(selectedUser);\n                    }}\n                    data-testid=\"btn-edit-user-details\"\n                  >\n                    <Edit className=\"w-4 h-4 mr-2\" />\n                    Edit User\n                  </Button>\n                  <Button \n                    variant=\"outline\" \n                    size=\"sm\"\n                    className=\"border-border text-gray-300 hover:bg-surface-2\"\n                    onClick={() => handleLoginAsUser(selectedUser.id)}\n                    data-testid=\"btn-login-as-user-details\"\n                  >\n                    <LogIn className=\"w-4 h-4 mr-2\" />\n                    Login As User\n                  </Button>\n                  {selectedUser.status === \"Active\" ? (\n                    <Button \n                      variant=\"outline\" \n                      size=\"sm\"\n                      className=\"border-danger text-danger hover:bg-danger/10\"\n                      onClick={() => {\n                        setUserDetailsModalOpen(false);\n                        handleBanUser(selectedUser);\n                      }}\n                      data-testid=\"btn-ban-user-details\"\n                    >\n                      <Ban className=\"w-4 h-4 mr-2\" />\n                      Ban User\n                    </Button>\n                  ) : (\n                    <Button \n                      variant=\"outline\" \n                      size=\"sm\"\n                      className=\"border-success text-success hover:bg-success/10\"\n                      onClick={() => {\n                        setUserDetailsModalOpen(false);\n                        handleUnbanUser(selectedUser);\n                      }}\n                      data-testid=\"btn-unban-user-details\"\n                    >\n                      <Unlock className=\"w-4 h-4 mr-2\" />\n                      Unban User\n                    </Button>\n                  )}\n                </div>\n              </div>\n            )}\n          </DialogContent>\n        </Dialog>\n        \n        {/* Edit User Modal */}\n        <Dialog open={editUserModalOpen} onOpenChange={setEditUserModalOpen}>\n          <DialogContent className=\"sm:max-w-[500px] bg-card border border-border shadow-xl\">\n            <DialogHeader>\n              <DialogTitle className=\"text-white\">Edit User</DialogTitle>\n            </DialogHeader>\n            <Form {...editForm}>\n              <form onSubmit={editForm.handleSubmit(handleUpdateUser)} className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={editForm.control}\n                    name=\"fullName\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel className=\"text-gray-300\">Full Name</FormLabel>\n                        <FormControl>\n                          <Input \n                            placeholder=\"Enter full name\" \n                            className=\"!bg-gray-800 !border-gray-600 !text-white placeholder:text-gray-400 focus:!bg-gray-800\"\n                            data-testid=\"edit-input-full-name\"\n                            {...field} \n                          />\n                        </FormControl>\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={editForm.control}\n                    name=\"username\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel className=\"text-gray-300\">Username</FormLabel>\n                        <FormControl>\n                          <Input \n                            placeholder=\"Enter username\" \n                            className=\"!bg-gray-800 !border-gray-600 !text-white placeholder:text-gray-400 focus:!bg-gray-800\"\n                            data-testid=\"edit-input-username\"\n                            {...field} \n                          />\n                        </FormControl>\n                      </FormItem>\n                    )}\n                  />\n                </div>\n                \n                <FormField\n                  control={editForm.control}\n                  name=\"email\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-gray-300\">Email Address</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"email\" \n                          placeholder=\"Enter email address\" \n                          className=\"!bg-gray-800 !border-gray-600 !text-white placeholder:text-gray-400 focus:!bg-gray-800\"\n                          data-testid=\"edit-input-email\"\n                          {...field} \n                        />\n                      </FormControl>\n                    </FormItem>\n                  )}\n                />\n                \n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={editForm.control}\n                    name=\"role\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel className=\"text-gray-300\">Role / User Type</FormLabel>\n                        <Select onValueChange={field.onChange} value={field.value}>\n                          <FormControl>\n                            <SelectTrigger className=\"!bg-gray-800 !border-gray-600 !text-white placeholder:text-gray-400 focus:!bg-gray-800\" data-testid=\"edit-select-role\">\n                              <SelectValue />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            <SelectItem value=\"Admin\">Admin</SelectItem>\n                            <SelectItem value=\"Editor / Manager\">Editor / Manager</SelectItem>\n                            <SelectItem value=\"Viewer / Normal User\">Viewer / Normal User</SelectItem>\n                            <SelectItem value=\"Customer\">Customer</SelectItem>\n                            <SelectItem value=\"Vendor\">Vendor</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={editForm.control}\n                    name=\"status\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel className=\"text-gray-300\">Status</FormLabel>\n                        <Select onValueChange={field.onChange} value={field.value}>\n                          <FormControl>\n                            <SelectTrigger className=\"!bg-gray-800 !border-gray-600 !text-white placeholder:text-gray-400 focus:!bg-gray-800\" data-testid=\"edit-select-status\">\n                              <SelectValue />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            <SelectItem value=\"Active\">Active</SelectItem>\n                            <SelectItem value=\"Banned\">Banned</SelectItem>\n                            <SelectItem value=\"Inactive\">Inactive</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </FormItem>\n                    )}\n                  />\n                </div>\n                \n                <FormField\n                  control={editForm.control}\n                  name=\"phoneNumber\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-gray-300\">Phone Number</FormLabel>\n                      <FormControl>\n                        <Input \n                          placeholder=\"Enter phone number\" \n                          className=\"!bg-gray-800 !border-gray-600 !text-white placeholder:text-gray-400 focus:!bg-gray-800\"\n                          data-testid=\"edit-input-phone\"\n                          {...field} \n                        />\n                      </FormControl>\n                    </FormItem>\n                  )}\n                />\n                \n                <div className=\"flex justify-end space-x-3 pt-4\">\n                  <Button \n                    type=\"button\" \n                    variant=\"outline\" \n                    onClick={() => setEditUserModalOpen(false)}\n                    className=\"border-border text-gray-300 hover:bg-surface-2\"\n                    data-testid=\"btn-cancel-edit\"\n                  >\n                    Cancel\n                  </Button>\n                  <Button \n                    type=\"submit\" \n                    className=\"bg-accent text-bg hover:bg-accent-2\"\n                    data-testid=\"btn-update-user\"\n                  >\n                    Update User\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n        \n        {/* Ban Confirmation Dialog */}\n        <AlertDialog open={banConfirmOpen} onOpenChange={setBanConfirmOpen}>\n          <AlertDialogContent className=\"bg-card border-border\">\n            <AlertDialogHeader>\n              <AlertDialogTitle className=\"text-white\">Ban User</AlertDialogTitle>\n              <AlertDialogDescription className=\"text-gray-300\">\n                Are you sure you want to ban user <strong className=\"text-white\">{actionUser?.username}</strong>? \n                This action will prevent them from accessing the platform.\n              </AlertDialogDescription>\n            </AlertDialogHeader>\n            <AlertDialogFooter>\n              <AlertDialogCancel \n                className=\"border-border text-gray-300 hover:bg-surface-2\"\n                data-testid=\"btn-cancel-ban\"\n              >\n                Cancel\n              </AlertDialogCancel>\n              <AlertDialogAction \n                onClick={confirmBanUser}\n                className=\"bg-danger text-white hover:bg-red-600\"\n                data-testid=\"btn-confirm-ban\"\n              >\n                Ban User\n              </AlertDialogAction>\n            </AlertDialogFooter>\n          </AlertDialogContent>\n        </AlertDialog>\n        \n        {/* Delete Confirmation Dialog */}\n        <AlertDialog open={deleteConfirmOpen} onOpenChange={setDeleteConfirmOpen}>\n          <AlertDialogContent className=\"bg-card border-border\">\n            <AlertDialogHeader>\n              <AlertDialogTitle className=\"text-white\">Delete User</AlertDialogTitle>\n              <AlertDialogDescription className=\"text-gray-300\">\n                Are you sure you want to permanently delete user <strong className=\"text-white\">{actionUser?.username}</strong>? \n                This action cannot be undone and will remove all user data.\n              </AlertDialogDescription>\n            </AlertDialogHeader>\n            <AlertDialogFooter>\n              <AlertDialogCancel \n                className=\"border-border text-gray-300 hover:bg-surface-2\"\n                data-testid=\"btn-cancel-delete\"\n              >\n                Cancel\n              </AlertDialogCancel>\n              <AlertDialogAction \n                onClick={confirmDeleteUser}\n                className=\"bg-danger text-white hover:bg-red-600\"\n                data-testid=\"btn-confirm-delete\"\n              >\n                Delete User\n              </AlertDialogAction>\n            </AlertDialogFooter>\n          </AlertDialogContent>\n        </AlertDialog>\n      </main>\n  );\n}","size_bytes":42407},"client/src/pages/admin/vendors.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { StatusBadge } from \"@/components/ui/status-badge\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Search, Star, Store, DollarSign, ShoppingCart, Check, X, Clock } from \"lucide-react\";\nimport { SAMPLE_VENDORS } from \"@/lib/constants\";\n\nexport default function AdminVendors() {\n\n  return (\n    <main className=\"flex-1 overflow-y-auto bg-bg p-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between mb-6\">\n          <div>\n            <h1 className=\"text-2xl font-bold text-white\">Vendor Management</h1>\n            <p className=\"text-gray-300 mt-1\">Manage vendor applications and shop settings</p>\n          </div>\n          <Button className=\"bg-accent text-bg hover:bg-accent-2\">\n            Invite Vendor\n          </Button>\n        </div>\n\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n          <Card className=\"crypto-card\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <Store className=\"w-8 h-8 text-accent mr-4\" />\n                <div>\n                  <p className=\"text-sm text-gray-400\">Total Vendors</p>\n                  <p className=\"text-2xl font-bold text-white\">127</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"crypto-card\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <Clock className=\"w-8 h-8 text-warning mr-4\" />\n                <div>\n                  <p className=\"text-sm text-gray-400\">Pending Applications</p>\n                  <p className=\"text-2xl font-bold text-white\">7</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"crypto-card\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <ShoppingCart className=\"w-8 h-8 text-success mr-4\" />\n                <div>\n                  <p className=\"text-sm text-gray-400\">Active Listings</p>\n                  <p className=\"text-2xl font-bold text-white\">1,432</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"crypto-card\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <DollarSign className=\"w-8 h-8 text-accent mr-4\" />\n                <div>\n                  <p className=\"text-sm text-gray-400\">Commission Earned</p>\n                  <p className=\"text-2xl font-bold text-white\">23.4 BTC</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <Tabs defaultValue=\"approved\" className=\"w-full\">\n          <TabsList className=\"bg-surface-2 mb-6\">\n            <TabsTrigger value=\"approved\" className=\"text-gray-300 data-[state=active]:text-white\">\n              Approved Vendors\n            </TabsTrigger>\n            <TabsTrigger value=\"pending\" className=\"text-gray-300 data-[state=active]:text-white\">\n              Pending Applications\n            </TabsTrigger>\n            <TabsTrigger value=\"rejected\" className=\"text-gray-300 data-[state=active]:text-white\">\n              Rejected\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"approved\">\n            {/* Search and Filters */}\n            <Card className=\"crypto-card mb-6\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex flex-col md:flex-row gap-4\">\n                  <div className=\"flex-1\">\n                    <div className=\"relative\">\n                      <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n                      <Input \n                        placeholder=\"Search vendors by shop name...\" \n                        className=\"pl-10 bg-surface-2 border-border text-white\"\n                        data-testid=\"search-vendors\"\n                      />\n                    </div>\n                  </div>\n                  <Select>\n                    <SelectTrigger className=\"w-40 bg-surface-2 border-border text-white\">\n                      <SelectValue placeholder=\"Category\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All Categories</SelectItem>\n                      <SelectItem value=\"streaming\">Streaming Services</SelectItem>\n                      <SelectItem value=\"software\">Software & Tools</SelectItem>\n                      <SelectItem value=\"gaming\">Gaming</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Vendors Table */}\n            <Card className=\"crypto-card\">\n              <CardHeader>\n                <CardTitle className=\"text-white\">Approved Vendors</CardTitle>\n              </CardHeader>\n              <CardContent className=\"p-0\">\n                <div className=\"overflow-x-auto\">\n                  <table className=\"w-full\">\n                    <thead className=\"bg-surface-2\">\n                      <tr>\n                        <th className=\"text-left p-4 text-sm font-medium text-gray-300\">Shop Name</th>\n                        <th className=\"text-left p-4 text-sm font-medium text-gray-300\">Owner</th>\n                        <th className=\"text-left p-4 text-sm font-medium text-gray-300\">Category</th>\n                        <th className=\"text-left p-4 text-sm font-medium text-gray-300\">Listings</th>\n                        <th className=\"text-left p-4 text-sm font-medium text-gray-300\">Sales</th>\n                        <th className=\"text-left p-4 text-sm font-medium text-gray-300\">Rating</th>\n                        <th className=\"text-left p-4 text-sm font-medium text-gray-300\">Commission</th>\n                        <th className=\"text-left p-4 text-sm font-medium text-gray-300\">Actions</th>\n                      </tr>\n                    </thead>\n                    <tbody className=\"divide-y divide-border\">\n                      {SAMPLE_VENDORS.filter(v => v.status === \"Approved\").map((vendor) => (\n                        <tr key={vendor.id} className=\"hover:bg-surface-2/50\" data-testid={`vendor-row-${vendor.id}`}>\n                          <td className=\"p-4\">\n                            <div className=\"flex items-center\">\n                              <div className=\"w-10 h-10 bg-accent/20 rounded-lg flex items-center justify-center mr-3\">\n                                <Store className=\"w-5 h-5 text-accent\" />\n                              </div>\n                              <div>\n                                <p className=\"font-medium text-white\">{vendor.shopName}</p>\n                                <p className=\"text-sm text-gray-400\">Since {vendor.joinDate}</p>\n                              </div>\n                            </div>\n                          </td>\n                          <td className=\"p-4 text-gray-300\">{vendor.owner}</td>\n                          <td className=\"p-4\">\n                            <Badge variant=\"outline\" className=\"text-gray-300\">\n                              {vendor.category}\n                            </Badge>\n                          </td>\n                          <td className=\"p-4 text-white font-mono\">{vendor.listings}</td>\n                          <td className=\"p-4 text-white font-mono\">{vendor.totalSales}</td>\n                          <td className=\"p-4\">\n                            <div className=\"flex items-center\">\n                              <Star className=\"w-4 h-4 text-warning fill-current mr-1\" />\n                              <span className=\"text-white\">{vendor.rating}</span>\n                              <span className=\"text-gray-400 ml-1\">({vendor.reviews})</span>\n                            </div>\n                          </td>\n                          <td className=\"p-4 text-white\">{vendor.commission}</td>\n                          <td className=\"p-4\">\n                            <div className=\"flex items-center space-x-2\">\n                              <Button variant=\"outline\" size=\"sm\" className=\"border-border hover:bg-surface-2 text-gray-300\" data-testid={`view-vendor-${vendor.id}`}>\n                                View Shop\n                              </Button>\n                              <Button variant=\"outline\" size=\"sm\" className=\"border-border hover:bg-surface-2 text-gray-300\" data-testid={`edit-vendor-${vendor.id}`}>\n                                Settings\n                              </Button>\n                            </div>\n                          </td>\n                        </tr>\n                      ))}\n                    </tbody>\n                  </table>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"pending\">\n            <Card className=\"crypto-card\">\n              <CardHeader>\n                <CardTitle className=\"text-white\">Pending Vendor Applications</CardTitle>\n              </CardHeader>\n              <CardContent className=\"p-6\">\n                <div className=\"space-y-6\">\n                  {SAMPLE_VENDORS.filter(v => v.status === \"Pending\").map((vendor) => (\n                    <div key={vendor.id} className=\"border border-border rounded-lg p-6\" data-testid={`pending-vendor-${vendor.id}`}>\n                      <div className=\"flex items-start justify-between\">\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center mb-4\">\n                            <div className=\"w-12 h-12 bg-accent/20 rounded-lg flex items-center justify-center mr-4\">\n                              <Store className=\"w-6 h-6 text-accent\" />\n                            </div>\n                            <div>\n                              <h3 className=\"text-lg font-semibold text-white\">{vendor.shopName}</h3>\n                              <p className=\"text-gray-300\">Owner: {vendor.owner}</p>\n                              <p className=\"text-sm text-gray-400\">Applied {vendor.joinDate}</p>\n                            </div>\n                          </div>\n                          \n                          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-4\">\n                            <div>\n                              <p className=\"text-sm text-gray-400\">Category</p>\n                              <p className=\"text-white\">{vendor.category}</p>\n                            </div>\n                            <div>\n                              <p className=\"text-sm text-gray-400\">Commission Rate</p>\n                              <p className=\"text-white\">{vendor.commission}</p>\n                            </div>\n                          </div>\n                          \n                          <div className=\"mb-4\">\n                            <p className=\"text-sm text-gray-400 mb-2\">Business Description</p>\n                            <p className=\"text-gray-300\">We provide premium digital accounts with instant delivery and 24/7 support. All accounts are sourced legally and come with warranty protection.</p>\n                          </div>\n                        </div>\n                        \n                        <div className=\"flex flex-col space-y-2 ml-6\">\n                          <Button className=\"bg-success text-white hover:bg-green-600\" data-testid={`approve-vendor-${vendor.id}`}>\n                            <Check className=\"w-4 h-4 mr-2\" />\n                            Approve\n                          </Button>\n                          <Button variant=\"outline\" className=\"border-danger text-danger hover:bg-danger hover:text-white\" data-testid={`reject-vendor-${vendor.id}`}>\n                            <X className=\"w-4 h-4 mr-2\" />\n                            Reject\n                          </Button>\n                          <Button variant=\"outline\" className=\"border-border text-gray-300 hover:bg-surface-2\" data-testid={`review-vendor-${vendor.id}`}>\n                            Review\n                          </Button>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                  \n                  {SAMPLE_VENDORS.filter(v => v.status === \"Pending\").length === 0 && (\n                    <div className=\"text-center py-12\">\n                      <Store className=\"w-12 h-12 text-gray-500 mx-auto mb-4\" />\n                      <p className=\"text-gray-400\">No pending applications</p>\n                    </div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"rejected\">\n            <Card className=\"crypto-card\">\n              <CardContent className=\"p-6\">\n                <div className=\"text-center py-12\">\n                  <X className=\"w-12 h-12 text-gray-500 mx-auto mb-4\" />\n                  <p className=\"text-gray-400\">No rejected applications</p>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </main>\n  );\n}","size_bytes":13670},"client/src/pages/buyer/buyer-dashboard.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport BuyerHome from \"./home\";\nimport BuyerListings from \"./listings\";\nimport BuyerOrders from \"./orders\";\nimport BuyerMessages from \"./messages\";\nimport BuyerWishlist from \"./wishlist\";\nimport BuyerSettings from \"./settings\";\nimport BuyerSupport from \"./support\";\n\nexport default function BuyerDashboard() {\n  return (\n    <Switch>\n      <Route path=\"/buyer\" component={BuyerHome} />\n      <Route path=\"/buyer/listings\" component={BuyerListings} />\n      <Route path=\"/buyer/orders\" component={BuyerOrders} />\n      <Route path=\"/buyer/messages\" component={BuyerMessages} />\n      <Route path=\"/buyer/wishlist\" component={BuyerWishlist} />\n      <Route path=\"/buyer/settings\" component={BuyerSettings} />\n      <Route path=\"/buyer/support\" component={BuyerSupport} />\n    </Switch>\n  );\n}","size_bytes":830},"client/src/pages/buyer/home.tsx":{"content":"import { BuyerLayout } from \"@/components/buyer/BuyerLayout\";\nimport { ProductCard } from \"@/components/buyer/ProductCard\";\nimport { OrdersTable } from \"@/components/buyer/OrdersTable\";\nimport { MessagesPanel } from \"@/components/buyer/MessagesPanel\";\nimport { RecommendationsSection } from \"@/components/buyer/RecommendationsSection\";\n\n// Sample data for featured listings\nconst featuredListings = [\n  {\n    id: 1,\n    title: \"Netflix Premium Account (1 Year)\",\n    vendor: \"CryptoAccountsPlus\",\n    price: \"0.0012 BTC\",\n    image: \"https://images.unsplash.com/photo-1522869635100-9f4c5e86aa37?w=400\",\n    rating: 4.9,\n    inStock: true\n  },\n  {\n    id: 2,\n    title: \"Spotify Premium (6 Months)\",\n    vendor: \"DigitalVault\",\n    price: \"0.0008 BTC\", \n    image: \"https://images.unsplash.com/photo-1493225457124-a3eb161ffa5f?w=400\",\n    rating: 4.7,\n    inStock: true\n  },\n  {\n    id: 3,\n    title: \"Adobe Creative Cloud (1 Year)\",\n    vendor: \"PremiumSoft\",\n    price: \"0.0034 BTC\",\n    image: \"https://images.unsplash.com/photo-1551650975-87deedd944c3?w=400\", \n    rating: 4.8,\n    inStock: false\n  }\n];\n\nexport default function BuyerHome() {\n  return (\n    <BuyerLayout>\n      <div className=\"space-y-8\">\n        {/* Welcome Section */}\n        <div className=\"bg-gradient-to-r from-gray-800 to-gray-700 rounded-xl p-8 text-white border border-gray-700\">\n          <h1 className=\"text-3xl font-bold mb-2\">Welcome back, crypto_buyer!</h1>\n          <p className=\"text-gray-300\">Discover amazing deals from trusted vendors in our marketplace</p>\n        </div>\n\n        {/* Featured Listings */}\n        <section>\n          <div className=\"flex items-center justify-between mb-6\">\n            <h2 className=\"text-2xl font-bold text-white\">Featured Listings</h2>\n            <a href=\"/buyer/listings\" className=\"text-blue-400 hover:text-blue-300 font-medium\">\n              View all →\n            </a>\n          </div>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {featuredListings.map((listing) => (\n              <ProductCard key={listing.id} product={listing} />\n            ))}\n          </div>\n        </section>\n\n        {/* Recent Orders */}\n        <section>\n          <div className=\"flex items-center justify-between mb-6\">\n            <h2 className=\"text-2xl font-bold text-white\">Recent Orders</h2>\n            <a href=\"/buyer/orders\" className=\"text-blue-400 hover:text-blue-300 font-medium\">\n              View all →\n            </a>\n          </div>\n          <OrdersTable compact={true} />\n        </section>\n\n        {/* Messages */}\n        <section>\n          <div className=\"flex items-center justify-between mb-6\">\n            <h2 className=\"text-2xl font-bold text-white\">Recent Messages</h2>\n            <a href=\"/buyer/messages\" className=\"text-blue-400 hover:text-blue-300 font-medium\">\n              View all →\n            </a>\n          </div>\n          <MessagesPanel compact={true} />\n        </section>\n\n        {/* Recommendations */}\n        <RecommendationsSection />\n      </div>\n    </BuyerLayout>\n  );\n}","size_bytes":3094},"client/src/pages/buyer/listings.tsx":{"content":"import { useState } from \"react\";\nimport { Search, Filter, Grid, List as ListIcon, ChevronDown } from \"lucide-react\";\nimport { BuyerLayout } from \"@/components/buyer/BuyerLayout\";\nimport { ProductCard } from \"@/components/buyer/ProductCard\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\n\nconst categories = [\n  { id: \"all\", name: \"All Categories\", count: 1432 },\n  { id: \"streaming\", name: \"Streaming Services\", count: 247 },\n  { id: \"gaming\", name: \"Gaming Accounts\", count: 189 },\n  { id: \"software\", name: \"Software & Tools\", count: 156 },\n  { id: \"vpn\", name: \"VPN & Security\", count: 98 }\n];\n\nconst listings = [\n  {\n    id: 1,\n    title: \"Netflix Premium Account (1 Year)\",\n    vendor: \"CryptoAccountsPlus\",\n    price: \"0.0012 BTC\",\n    image: \"https://images.unsplash.com/photo-1522869635100-9f4c5e86aa37?w=400\",\n    rating: 4.9,\n    inStock: true\n  },\n  {\n    id: 2,\n    title: \"Spotify Premium (6 Months)\",\n    vendor: \"DigitalVault\",\n    price: \"0.0008 BTC\", \n    image: \"https://images.unsplash.com/photo-1493225457124-a3eb161ffa5f?w=400\",\n    rating: 4.7,\n    inStock: true\n  },\n  {\n    id: 3,\n    title: \"Adobe Creative Cloud (1 Year)\",\n    vendor: \"PremiumSoft\",\n    price: \"0.0034 BTC\",\n    image: \"https://images.unsplash.com/photo-1551650975-87deedd944c3?w=400\", \n    rating: 4.8,\n    inStock: false\n  },\n  {\n    id: 4,\n    title: \"Discord Nitro (1 Year)\",\n    vendor: \"GamersVault\",\n    price: \"0.0009 BTC\",\n    image: \"https://images.unsplash.com/photo-1611224923853-80b023f02d71?w=400\",\n    rating: 4.6,\n    inStock: true\n  },\n  {\n    id: 5,\n    title: \"YouTube Premium (6 Months)\",\n    vendor: \"StreamingPro\",\n    price: \"0.0007 BTC\",\n    image: \"https://images.unsplash.com/photo-1611162617474-5b21e879e113?w=400\",\n    rating: 4.5,\n    inStock: true\n  },\n  {\n    id: 6,\n    title: \"Microsoft Office 365\",\n    vendor: \"SoftwareHub\",\n    price: \"0.0025 BTC\",\n    image: \"https://images.unsplash.com/photo-1633356122544-f134324a6cee?w=400\",\n    rating: 4.7,\n    inStock: true\n  }\n];\n\nexport default function BuyerListings() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [selectedCategory, setSelectedCategory] = useState(\"all\");\n  const [sortBy, setSortBy] = useState(\"popular\");\n  const [viewMode, setViewMode] = useState(\"grid\");\n\n  const filteredListings = listings.filter(listing => \n    listing.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    listing.vendor.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  return (\n    <BuyerLayout>\n      <div className=\"space-y-6\">\n        {/* Header */}\n        <div className=\"bg-gradient-to-r from-gray-800 to-gray-700 rounded-xl p-6 text-white border border-gray-700\">\n          <h1 className=\"text-2xl font-bold mb-2\">Browse Listings</h1>\n          <p className=\"text-gray-300\">Discover products from trusted vendors</p>\n        </div>\n\n        {/* Search and Filters */}\n        <div className=\"bg-gray-900 rounded-xl p-6 border border-gray-700\">\n          <div className=\"flex flex-col lg:flex-row lg:items-center gap-4\">\n            {/* Search */}\n            <div className=\"flex-1 relative\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n              <Input\n                placeholder=\"Search products, vendors...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"pl-10\"\n              />\n            </div>\n\n            {/* Sort */}\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button variant=\"outline\" className=\"min-w-32\">\n                  Sort by: {sortBy === \"popular\" ? \"Popular\" : sortBy === \"price-low\" ? \"Price: Low\" : \"Price: High\"}\n                  <ChevronDown className=\"w-4 h-4 ml-2\" />\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent>\n                <DropdownMenuItem onClick={() => setSortBy(\"popular\")}>\n                  Most Popular\n                </DropdownMenuItem>\n                <DropdownMenuItem onClick={() => setSortBy(\"price-low\")}>\n                  Price: Low to High\n                </DropdownMenuItem>\n                <DropdownMenuItem onClick={() => setSortBy(\"price-high\")}>\n                  Price: High to Low\n                </DropdownMenuItem>\n                <DropdownMenuItem onClick={() => setSortBy(\"rating\")}>\n                  Highest Rated\n                </DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n\n            {/* View Mode */}\n            <div className=\"flex border rounded-lg\">\n              <Button\n                variant={viewMode === \"grid\" ? \"default\" : \"ghost\"}\n                size=\"sm\"\n                onClick={() => setViewMode(\"grid\")}\n                className=\"rounded-r-none\"\n              >\n                <Grid className=\"w-4 h-4\" />\n              </Button>\n              <Button\n                variant={viewMode === \"list\" ? \"default\" : \"ghost\"}\n                size=\"sm\"\n                onClick={() => setViewMode(\"list\")}\n                className=\"rounded-l-none\"\n              >\n                <ListIcon className=\"w-4 h-4\" />\n              </Button>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n          {/* Categories Sidebar */}\n          <div className=\"lg:col-span-1\">\n            <div className=\"bg-gray-900 rounded-xl p-6 border border-gray-700 sticky top-6\">\n              <h3 className=\"font-semibold text-white mb-4\">Categories</h3>\n              <div className=\"space-y-2\">\n                {categories.map((category) => (\n                  <button\n                    key={category.id}\n                    onClick={() => setSelectedCategory(category.id)}\n                    className={`w-full flex items-center justify-between p-3 rounded-lg transition-colors text-left ${\n                      selectedCategory === category.id\n                        ? \"bg-blue-900/30 text-blue-400\"\n                        : \"hover:bg-gray-800 text-gray-300\"\n                    }`}\n                  >\n                    <span className=\"font-medium\">{category.name}</span>\n                    <Badge variant=\"secondary\" className=\"text-xs\">\n                      {category.count}\n                    </Badge>\n                  </button>\n                ))}\n              </div>\n            </div>\n          </div>\n\n          {/* Listings Grid */}\n          <div className=\"lg:col-span-3\">\n            <div className=\"flex items-center justify-between mb-6\">\n              <p className=\"text-gray-400\">\n                Showing {filteredListings.length} of {listings.length} results\n              </p>\n            </div>\n\n            {viewMode === \"grid\" ? (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6\">\n                {filteredListings.map((listing) => (\n                  <ProductCard key={listing.id} product={listing} />\n                ))}\n              </div>\n            ) : (\n              <div className=\"space-y-4\">\n                {filteredListings.map((listing) => (\n                  <div key={listing.id} className=\"bg-gray-900 rounded-xl p-6 border border-gray-700 flex items-center space-x-6\">\n                    <img\n                      src={listing.image}\n                      alt={listing.title}\n                      className=\"w-20 h-20 rounded-lg object-cover\"\n                    />\n                    <div className=\"flex-1\">\n                      <h3 className=\"font-semibold text-white\">{listing.title}</h3>\n                      <p className=\"text-gray-400\">{listing.vendor}</p>\n                      <div className=\"flex items-center space-x-2 mt-2\">\n                        <span className=\"text-lg font-bold text-blue-400\">{listing.price}</span>\n                        <Badge variant={listing.inStock ? \"default\" : \"destructive\"}>\n                          {listing.inStock ? \"In Stock\" : \"Out of Stock\"}\n                        </Badge>\n                      </div>\n                    </div>\n                    <div className=\"flex space-x-2\">\n                      <Button variant=\"outline\">View</Button>\n                      <Button disabled={!listing.inStock}>Order Now</Button>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </BuyerLayout>\n  );\n}","size_bytes":8708},"client/src/pages/buyer/messages.tsx":{"content":"import { BuyerLayout } from \"@/components/buyer/BuyerLayout\";\nimport { MessagesPanel } from \"@/components/buyer/MessagesPanel\";\nimport { MessageSquare, Users, Clock } from \"lucide-react\";\n\nconst messageStats = [\n  { label: \"Total Conversations\", value: \"12\", color: \"from-blue-500 to-purple-600\" },\n  { label: \"Unread Messages\", value: \"5\", color: \"from-red-500 to-pink-600\" },\n  { label: \"Active Vendors\", value: \"8\", color: \"from-green-500 to-emerald-600\" },\n  { label: \"Avg Response Time\", value: \"2h\", color: \"from-yellow-500 to-orange-600\" }\n];\n\nexport default function BuyerMessages() {\n  return (\n    <BuyerLayout>\n      <div className=\"space-y-6\">\n        {/* Header */}\n        <div className=\"bg-gradient-to-r from-gray-800 to-gray-700 rounded-xl p-6 text-white border border-gray-700\">\n          <div className=\"flex items-center space-x-3\">\n            <MessageSquare className=\"w-8 h-8\" />\n            <div>\n              <h1 className=\"text-2xl font-bold\">Messages</h1>\n              <p className=\"text-gray-300\">Chat with vendors and get support</p>\n            </div>\n          </div>\n        </div>\n\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n          {messageStats.map((stat, index) => {\n            const icons = [MessageSquare, MessageSquare, Users, Clock];\n            const Icon = icons[index];\n            \n            return (\n              <div \n                key={stat.label}\n                className=\"bg-gray-900 rounded-xl p-6 border border-gray-700 hover:shadow-xl transition-shadow\"\n              >\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm text-gray-400 mb-1\">{stat.label}</p>\n                    <p className=\"text-2xl font-bold text-white\">{stat.value}</p>\n                  </div>\n                  <div className={`w-12 h-12 rounded-xl bg-gradient-to-br ${stat.color} flex items-center justify-center`}>\n                    <Icon className=\"w-6 h-6 text-white\" />\n                  </div>\n                </div>\n              </div>\n            );\n          })}\n        </div>\n\n        {/* Messages Panel */}\n        <MessagesPanel />\n\n        {/* Quick Actions */}\n        <div className=\"bg-gray-900 rounded-xl p-6 border border-gray-700\">\n          <h3 className=\"font-semibold text-white mb-4\">Quick Actions</h3>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <button className=\"p-4 bg-blue-50 dark:bg-blue-900/20 rounded-lg hover:bg-blue-100 dark:hover:bg-blue-900/30 transition-colors text-left\">\n              <h4 className=\"font-medium text-blue-600 dark:text-blue-400 mb-2\">Contact Support</h4>\n              <p className=\"text-sm text-gray-400\">Get help with orders or account issues</p>\n            </button>\n            \n            <button className=\"p-4 bg-green-50 dark:bg-green-900/20 rounded-lg hover:bg-green-100 dark:hover:bg-green-900/30 transition-colors text-left\">\n              <h4 className=\"font-medium text-green-600 dark:text-green-400 mb-2\">Report Issue</h4>\n              <p className=\"text-sm text-gray-400\">Report a problem with a vendor or order</p>\n            </button>\n            \n            <button className=\"p-4 bg-purple-50 dark:bg-purple-900/20 rounded-lg hover:bg-purple-100 dark:hover:bg-purple-900/30 transition-colors text-left\">\n              <h4 className=\"font-medium text-purple-600 dark:text-purple-400 mb-2\">Message Settings</h4>\n              <p className=\"text-sm text-gray-400\">Configure notification preferences</p>\n            </button>\n          </div>\n        </div>\n      </div>\n    </BuyerLayout>\n  );\n}","size_bytes":3676},"client/src/pages/buyer/orders.tsx":{"content":"import { useState } from \"react\";\nimport { Package, Filter, Calendar, Download } from \"lucide-react\";\nimport { BuyerLayout } from \"@/components/buyer/BuyerLayout\";\nimport { OrdersTable } from \"@/components/buyer/OrdersTable\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\n\nconst orderStats = [\n  { label: \"Total Orders\", value: \"24\", color: \"from-blue-500 to-purple-600\" },\n  { label: \"Delivered\", value: \"18\", color: \"from-green-500 to-emerald-600\" },\n  { label: \"In Progress\", value: \"3\", color: \"from-yellow-500 to-orange-600\" },\n  { label: \"Cancelled\", value: \"3\", color: \"from-red-500 to-pink-600\" }\n];\n\nexport default function BuyerOrders() {\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [dateFilter, setDateFilter] = useState(\"all\");\n\n  return (\n    <BuyerLayout>\n      <div className=\"space-y-6\">\n        {/* Header */}\n        <div className=\"bg-gradient-to-r from-gray-800 to-gray-700 rounded-xl p-6 text-white border border-gray-700\">\n          <div className=\"flex items-center space-x-3\">\n            <Package className=\"w-8 h-8\" />\n            <div>\n              <h1 className=\"text-2xl font-bold\">Your Orders</h1>\n              <p className=\"text-gray-300\">Track and manage your purchases</p>\n            </div>\n          </div>\n        </div>\n\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n          {orderStats.map((stat, index) => (\n            <div \n              key={stat.label}\n              className=\"bg-gray-900 rounded-xl p-6 border border-gray-700 hover:shadow-xl transition-shadow\"\n            >\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-gray-400 mb-1\">{stat.label}</p>\n                  <p className=\"text-2xl font-bold text-white\">{stat.value}</p>\n                </div>\n                <div className={`w-12 h-12 rounded-xl bg-gradient-to-br ${stat.color} flex items-center justify-center`}>\n                  <Package className=\"w-6 h-6 text-white\" />\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n\n        {/* Filters */}\n        <div className=\"bg-gray-900 rounded-xl p-6 border border-gray-700\">\n          <div className=\"flex flex-col md:flex-row md:items-center gap-4\">\n            <h3 className=\"font-semibold text-white\">Filter Orders</h3>\n            \n            <div className=\"flex flex-wrap gap-3\">\n              {/* Status Filter */}\n              <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                  <Button variant=\"outline\" size=\"sm\">\n                    <Filter className=\"w-4 h-4 mr-2\" />\n                    Status: {statusFilter === \"all\" ? \"All\" : statusFilter}\n                  </Button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent>\n                  <DropdownMenuItem onClick={() => setStatusFilter(\"all\")}>\n                    All Orders\n                  </DropdownMenuItem>\n                  <DropdownMenuItem onClick={() => setStatusFilter(\"delivered\")}>\n                    Delivered\n                  </DropdownMenuItem>\n                  <DropdownMenuItem onClick={() => setStatusFilter(\"processing\")}>\n                    Processing\n                  </DropdownMenuItem>\n                  <DropdownMenuItem onClick={() => setStatusFilter(\"cancelled\")}>\n                    Cancelled\n                  </DropdownMenuItem>\n                </DropdownMenuContent>\n              </DropdownMenu>\n\n              {/* Date Filter */}\n              <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                  <Button variant=\"outline\" size=\"sm\">\n                    <Calendar className=\"w-4 h-4 mr-2\" />\n                    {dateFilter === \"all\" ? \"All Time\" : dateFilter}\n                  </Button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent>\n                  <DropdownMenuItem onClick={() => setDateFilter(\"all\")}>\n                    All Time\n                  </DropdownMenuItem>\n                  <DropdownMenuItem onClick={() => setDateFilter(\"Last 7 days\")}>\n                    Last 7 days\n                  </DropdownMenuItem>\n                  <DropdownMenuItem onClick={() => setDateFilter(\"Last 30 days\")}>\n                    Last 30 days\n                  </DropdownMenuItem>\n                  <DropdownMenuItem onClick={() => setDateFilter(\"Last 3 months\")}>\n                    Last 3 months\n                  </DropdownMenuItem>\n                </DropdownMenuContent>\n              </DropdownMenu>\n\n              {/* Export */}\n              <Button variant=\"outline\" size=\"sm\">\n                <Download className=\"w-4 h-4 mr-2\" />\n                Export\n              </Button>\n            </div>\n          </div>\n        </div>\n\n        {/* Orders Table */}\n        <OrdersTable />\n\n        {/* Order Summary */}\n        <div className=\"bg-gray-900 rounded-xl p-6 border border-gray-700\">\n          <h3 className=\"font-semibold text-white mb-4\">Recent Activity</h3>\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center space-x-4 p-4 bg-gray-800 rounded-lg\">\n              <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n              <div className=\"flex-1\">\n                <p className=\"font-medium text-white\">Order delivered</p>\n                <p className=\"text-sm text-gray-400\">Netflix Premium Account • 2 hours ago</p>\n              </div>\n              <Badge className=\"bg-green-100 text-green-800\">Completed</Badge>\n            </div>\n            \n            <div className=\"flex items-center space-x-4 p-4 bg-gray-800 rounded-lg\">\n              <div className=\"w-2 h-2 bg-blue-500 rounded-full\"></div>\n              <div className=\"flex-1\">\n                <p className=\"font-medium text-white\">Order confirmed</p>\n                <p className=\"text-sm text-gray-400\">Spotify Premium • 4 hours ago</p>\n              </div>\n              <Badge className=\"bg-blue-100 text-blue-800\">Processing</Badge>\n            </div>\n            \n            <div className=\"flex items-center space-x-4 p-4 bg-gray-800 rounded-lg\">\n              <div className=\"w-2 h-2 bg-yellow-500 rounded-full\"></div>\n              <div className=\"flex-1\">\n                <p className=\"font-medium text-white\">Payment verified</p>\n                <p className=\"text-sm text-gray-400\">Adobe Creative Cloud • 6 hours ago</p>\n              </div>\n              <Badge className=\"bg-yellow-100 text-yellow-800\">Pending</Badge>\n            </div>\n          </div>\n        </div>\n      </div>\n    </BuyerLayout>\n  );\n}","size_bytes":6820},"client/src/pages/buyer/settings.tsx":{"content":"import { useState } from \"react\";\nimport { Settings as SettingsIcon, User, Lock, Bell, CreditCard, Shield, Palette } from \"lucide-react\";\nimport { BuyerLayout } from \"@/components/buyer/BuyerLayout\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\n\nexport default function BuyerSettings() {\n  const [profileData, setProfileData] = useState({\n    username: \"crypto_buyer\",\n    email: \"crypto_buyer@example.com\",\n    phone: \"+1 (555) 123-4567\",\n    preferredCurrency: \"BTC\"\n  });\n\n  const [notifications, setNotifications] = useState({\n    orderUpdates: true,\n    priceAlerts: true,\n    marketingEmails: false,\n    securityAlerts: true,\n    vendorMessages: true\n  });\n\n  const [security, setSecurity] = useState({\n    twoFactorEnabled: false,\n    loginAlerts: true,\n    sessionTimeout: \"24h\"\n  });\n\n  return (\n    <BuyerLayout>\n      <div className=\"space-y-6\">\n        {/* Header */}\n        <div className=\"bg-gradient-to-r from-gray-800 to-gray-700 rounded-xl p-6 text-white border border-gray-700\">\n          <div className=\"flex items-center space-x-3\">\n            <SettingsIcon className=\"w-8 h-8\" />\n            <div>\n              <h1 className=\"text-2xl font-bold\">Account Settings</h1>\n              <p className=\"text-gray-300\">Manage your account preferences and security</p>\n            </div>\n          </div>\n        </div>\n\n        {/* Settings Tabs */}\n        <Tabs defaultValue=\"profile\" className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-3 lg:grid-cols-6 bg-gray-900 rounded-xl p-1 border border-gray-700\">\n            <TabsTrigger value=\"profile\" className=\"flex items-center space-x-2\">\n              <User className=\"w-4 h-4\" />\n              <span className=\"hidden sm:inline\">Profile</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"security\" className=\"flex items-center space-x-2\">\n              <Lock className=\"w-4 h-4\" />\n              <span className=\"hidden sm:inline\">Security</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"notifications\" className=\"flex items-center space-x-2\">\n              <Bell className=\"w-4 h-4\" />\n              <span className=\"hidden sm:inline\">Notifications</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"payments\" className=\"flex items-center space-x-2\">\n              <CreditCard className=\"w-4 h-4\" />\n              <span className=\"hidden sm:inline\">Payments</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"privacy\" className=\"flex items-center space-x-2\">\n              <Shield className=\"w-4 h-4\" />\n              <span className=\"hidden sm:inline\">Privacy</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"appearance\" className=\"flex items-center space-x-2\">\n              <Palette className=\"w-4 h-4\" />\n              <span className=\"hidden sm:inline\">Theme</span>\n            </TabsTrigger>\n          </TabsList>\n\n          {/* Profile Settings */}\n          <TabsContent value=\"profile\">\n            <Card className=\"border border-gray-700 bg-gray-900\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <User className=\"w-5 h-5\" />\n                  <span>Profile Information</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                {/* Avatar Section */}\n                <div className=\"flex items-center space-x-6\">\n                  <Avatar className=\"w-20 h-20 bg-gray-700\">\n                    <AvatarFallback className=\"text-white font-bold text-lg\">CB</AvatarFallback>\n                  </Avatar>\n                  <div>\n                    <Button variant=\"outline\">Change Avatar</Button>\n                    <p className=\"text-sm text-gray-400 mt-2\">JPG, PNG up to 2MB</p>\n                  </div>\n                </div>\n\n                {/* Profile Form */}\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"username\">Username</Label>\n                    <Input\n                      id=\"username\"\n                      value={profileData.username}\n                      onChange={(e) => setProfileData({...profileData, username: e.target.value})}\n                    />\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"email\">Email</Label>\n                    <Input\n                      id=\"email\"\n                      type=\"email\"\n                      value={profileData.email}\n                      onChange={(e) => setProfileData({...profileData, email: e.target.value})}\n                    />\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"phone\">Phone Number</Label>\n                    <Input\n                      id=\"phone\"\n                      value={profileData.phone}\n                      onChange={(e) => setProfileData({...profileData, phone: e.target.value})}\n                    />\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"currency\">Preferred Currency</Label>\n                    <Input\n                      id=\"currency\"\n                      value={profileData.preferredCurrency}\n                      onChange={(e) => setProfileData({...profileData, preferredCurrency: e.target.value})}\n                    />\n                  </div>\n                </div>\n\n                <div className=\"flex justify-end space-x-3\">\n                  <Button variant=\"outline\">Cancel</Button>\n                  <Button className=\"bg-gradient-to-r from-blue-500 to-purple-600\">Save Changes</Button>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Security Settings */}\n          <TabsContent value=\"security\">\n            <div className=\"space-y-6\">\n              <Card className=\"border border-gray-700 bg-gray-900\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-2\">\n                    <Lock className=\"w-5 h-5\" />\n                    <span>Password & Authentication</span>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-6\">\n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-center justify-between p-4 bg-gray-800 rounded-lg\">\n                      <div>\n                        <h4 className=\"font-medium\">Change Password</h4>\n                        <p className=\"text-sm text-gray-400\">Update your account password</p>\n                      </div>\n                      <Button variant=\"outline\">Change</Button>\n                    </div>\n                    \n                    <div className=\"flex items-center justify-between p-4 bg-gray-800 rounded-lg\">\n                      <div>\n                        <h4 className=\"font-medium\">Two-Factor Authentication</h4>\n                        <p className=\"text-sm text-gray-400\">Add an extra layer of security</p>\n                      </div>\n                      <Switch\n                        checked={security.twoFactorEnabled}\n                        onCheckedChange={(checked) => setSecurity({...security, twoFactorEnabled: checked})}\n                      />\n                    </div>\n                    \n                    <div className=\"flex items-center justify-between p-4 bg-gray-800 rounded-lg\">\n                      <div>\n                        <h4 className=\"font-medium\">Login Alerts</h4>\n                        <p className=\"text-sm text-gray-400\">Get notified of new login attempts</p>\n                      </div>\n                      <Switch\n                        checked={security.loginAlerts}\n                        onCheckedChange={(checked) => setSecurity({...security, loginAlerts: checked})}\n                      />\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"border border-gray-700 bg-gray-900\">\n                <CardHeader>\n                  <CardTitle>Active Sessions</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-center justify-between p-4 bg-green-50 dark:bg-green-900/20 rounded-lg border border-green-200 dark:border-green-800\">\n                      <div>\n                        <h4 className=\"font-medium text-green-800 dark:text-green-400\">Current Session</h4>\n                        <p className=\"text-sm text-green-600 dark:text-green-500\">Chrome on Windows • Current location</p>\n                      </div>\n                      <span className=\"text-xs text-green-600 dark:text-green-400 font-medium\">Active</span>\n                    </div>\n                    \n                    <div className=\"flex items-center justify-between p-4 bg-gray-800 rounded-lg\">\n                      <div>\n                        <h4 className=\"font-medium\">Mobile App</h4>\n                        <p className=\"text-sm text-gray-400\">iPhone • Last active 2 hours ago</p>\n                      </div>\n                      <Button variant=\"outline\" size=\"sm\">End Session</Button>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          {/* Notification Settings */}\n          <TabsContent value=\"notifications\">\n            <Card className=\"border border-gray-700 bg-gray-900\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Bell className=\"w-5 h-5\" />\n                  <span>Notification Preferences</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between p-4 bg-gray-800 rounded-lg\">\n                    <div>\n                      <h4 className=\"font-medium\">Order Updates</h4>\n                      <p className=\"text-sm text-gray-400\">Notifications about order status changes</p>\n                    </div>\n                    <Switch\n                      checked={notifications.orderUpdates}\n                      onCheckedChange={(checked) => setNotifications({...notifications, orderUpdates: checked})}\n                    />\n                  </div>\n                  \n                  <div className=\"flex items-center justify-between p-4 bg-gray-800 rounded-lg\">\n                    <div>\n                      <h4 className=\"font-medium\">Price Alerts</h4>\n                      <p className=\"text-sm text-gray-400\">Get notified when wishlist items go on sale</p>\n                    </div>\n                    <Switch\n                      checked={notifications.priceAlerts}\n                      onCheckedChange={(checked) => setNotifications({...notifications, priceAlerts: checked})}\n                    />\n                  </div>\n                  \n                  <div className=\"flex items-center justify-between p-4 bg-gray-800 rounded-lg\">\n                    <div>\n                      <h4 className=\"font-medium\">Vendor Messages</h4>\n                      <p className=\"text-sm text-gray-400\">Notifications for new vendor messages</p>\n                    </div>\n                    <Switch\n                      checked={notifications.vendorMessages}\n                      onCheckedChange={(checked) => setNotifications({...notifications, vendorMessages: checked})}\n                    />\n                  </div>\n                  \n                  <div className=\"flex items-center justify-between p-4 bg-gray-800 rounded-lg\">\n                    <div>\n                      <h4 className=\"font-medium\">Security Alerts</h4>\n                      <p className=\"text-sm text-gray-400\">Important security notifications</p>\n                    </div>\n                    <Switch\n                      checked={notifications.securityAlerts}\n                      onCheckedChange={(checked) => setNotifications({...notifications, securityAlerts: checked})}\n                    />\n                  </div>\n                  \n                  <div className=\"flex items-center justify-between p-4 bg-gray-800 rounded-lg\">\n                    <div>\n                      <h4 className=\"font-medium\">Marketing Emails</h4>\n                      <p className=\"text-sm text-gray-400\">Promotional offers and product updates</p>\n                    </div>\n                    <Switch\n                      checked={notifications.marketingEmails}\n                      onCheckedChange={(checked) => setNotifications({...notifications, marketingEmails: checked})}\n                    />\n                  </div>\n                </div>\n                \n                <div className=\"flex justify-end\">\n                  <Button className=\"bg-gradient-to-r from-blue-500 to-purple-600\">Save Preferences</Button>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Payment Settings */}\n          <TabsContent value=\"payments\">\n            <Card className=\"border border-gray-700 bg-gray-900\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <CreditCard className=\"w-5 h-5\" />\n                  <span>Payment Methods</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"space-y-4\">\n                  <div className=\"p-4 bg-gray-800 rounded-lg\">\n                    <h4 className=\"font-medium mb-2\">Bitcoin (BTC)</h4>\n                    <p className=\"text-sm text-gray-400 mb-3\">bc1qxy2kgdygjrsqtzq2n0yrf2493p83kkfjhx0wlh</p>\n                    <Button variant=\"outline\" size=\"sm\">Update Address</Button>\n                  </div>\n                  \n                  <div className=\"p-4 bg-gray-800 rounded-lg\">\n                    <h4 className=\"font-medium mb-2\">Monero (XMR)</h4>\n                    <p className=\"text-sm text-gray-400 mb-3\">Not configured</p>\n                    <Button variant=\"outline\" size=\"sm\">Add Address</Button>\n                  </div>\n                </div>\n                \n                <div className=\"border-t pt-6\">\n                  <h4 className=\"font-medium mb-4\">Transaction History</h4>\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center justify-between p-3 bg-gray-800 rounded-lg\">\n                      <div>\n                        <p className=\"font-medium\">Payment sent</p>\n                        <p className=\"text-sm text-gray-400\">Order #ORD-2847 • 2 hours ago</p>\n                      </div>\n                      <span className=\"text-green-600 font-medium\">0.0012 BTC</span>\n                    </div>\n                    \n                    <div className=\"flex items-center justify-between p-3 bg-gray-800 rounded-lg\">\n                      <div>\n                        <p className=\"font-medium\">Payment sent</p>\n                        <p className=\"text-sm text-gray-400\">Order #ORD-2846 • 1 day ago</p>\n                      </div>\n                      <span className=\"text-green-600 font-medium\">0.0008 BTC</span>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Privacy Settings */}\n          <TabsContent value=\"privacy\">\n            <Card className=\"border border-gray-700 bg-gray-900\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Shield className=\"w-5 h-5\" />\n                  <span>Privacy & Data</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"space-y-4\">\n                  <div className=\"p-4 bg-blue-50 dark:bg-blue-900/20 rounded-lg border border-blue-200 dark:border-blue-800\">\n                    <h4 className=\"font-medium text-blue-800 dark:text-blue-400 mb-2\">Data Protection</h4>\n                    <p className=\"text-sm text-blue-600 dark:text-blue-300 mb-3\">\n                      Your privacy is important to us. We use minimal data collection and anonymous transactions.\n                    </p>\n                    <Button variant=\"outline\" size=\"sm\">View Privacy Policy</Button>\n                  </div>\n                  \n                  <div className=\"p-4 bg-gray-800 rounded-lg\">\n                    <h4 className=\"font-medium mb-2\">Download Your Data</h4>\n                    <p className=\"text-sm text-gray-400 mb-3\">Export your account data and transaction history</p>\n                    <Button variant=\"outline\" size=\"sm\">Request Export</Button>\n                  </div>\n                  \n                  <div className=\"p-4 bg-red-50 dark:bg-red-900/20 rounded-lg border border-red-200 dark:border-red-800\">\n                    <h4 className=\"font-medium text-red-800 dark:text-red-400 mb-2\">Delete Account</h4>\n                    <p className=\"text-sm text-red-600 dark:text-red-300 mb-3\">\n                      Permanently delete your account and all associated data\n                    </p>\n                    <Button variant=\"destructive\" size=\"sm\">Delete Account</Button>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Appearance Settings */}\n          <TabsContent value=\"appearance\">\n            <Card className=\"border border-gray-700 bg-gray-900\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Palette className=\"w-5 h-5\" />\n                  <span>Theme & Appearance</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"space-y-4\">\n                  <div>\n                    <h4 className=\"font-medium mb-3\">Color Theme</h4>\n                    <div className=\"grid grid-cols-3 gap-3\">\n                      <button className=\"p-4 bg-white border-2 border-blue-500 rounded-lg text-center\">\n                        <div className=\"w-full h-8 bg-white border rounded mb-2\"></div>\n                        <span className=\"text-sm font-medium\">Light</span>\n                      </button>\n                      \n                      <button className=\"p-4 bg-gray-900 border-2 border-gray-300 rounded-lg text-center\">\n                        <div className=\"w-full h-8 bg-gray-800 rounded mb-2\"></div>\n                        <span className=\"text-sm font-medium text-white\">Dark</span>\n                      </button>\n                      \n                      <button className=\"p-4 bg-gray-700 border-2 border-gray-300 rounded-lg text-center\">\n                        <div className=\"w-full h-8 bg-gradient-to-r from-blue-400 to-purple-500 rounded mb-2\"></div>\n                        <span className=\"text-sm font-medium text-white\">Auto</span>\n                      </button>\n                    </div>\n                  </div>\n                  \n                  <div>\n                    <h4 className=\"font-medium mb-3\">Interface Density</h4>\n                    <div className=\"space-y-2\">\n                      <label className=\"flex items-center space-x-3\">\n                        <input type=\"radio\" name=\"density\" value=\"compact\" className=\"text-blue-600\" />\n                        <span>Compact - More content on screen</span>\n                      </label>\n                      <label className=\"flex items-center space-x-3\">\n                        <input type=\"radio\" name=\"density\" value=\"comfortable\" defaultChecked className=\"text-blue-600\" />\n                        <span>Comfortable - Balanced spacing</span>\n                      </label>\n                      <label className=\"flex items-center space-x-3\">\n                        <input type=\"radio\" name=\"density\" value=\"spacious\" className=\"text-blue-600\" />\n                        <span>Spacious - More breathing room</span>\n                      </label>\n                    </div>\n                  </div>\n                </div>\n                \n                <div className=\"flex justify-end\">\n                  <Button className=\"bg-gradient-to-r from-blue-500 to-purple-600\">Apply Changes</Button>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </BuyerLayout>\n  );\n}","size_bytes":21214},"client/src/pages/buyer/support.tsx":{"content":"import { useState } from \"react\";\nimport { HelpCircle, MessageSquare, FileText, Phone, Mail, ChevronDown, Search } from \"lucide-react\";\nimport { BuyerLayout } from \"@/components/buyer/BuyerLayout\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from \"@/components/ui/accordion\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\n\nconst faqData = [\n  {\n    question: \"How do I make a purchase?\",\n    answer: \"To make a purchase, browse our listings, click on a product you want, and follow the checkout process. You'll pay with cryptocurrency (BTC or XMR) and receive your digital product within minutes.\"\n  },\n  {\n    question: \"What payment methods do you accept?\",\n    answer: \"We accept Bitcoin (BTC) and Monero (XMR) for all transactions. This ensures privacy and security for both buyers and vendors.\"\n  },\n  {\n    question: \"How does escrow protection work?\",\n    answer: \"Escrow protection holds your payment until you confirm receipt of your digital product. This protects you from fraud and ensures vendors deliver quality products.\"\n  },\n  {\n    question: \"What if my account doesn't work?\",\n    answer: \"All products come with a warranty period. If your account stops working during the warranty period, contact the vendor through our messaging system for a replacement.\"\n  },\n  {\n    question: \"How do I contact a vendor?\",\n    answer: \"Use our built-in messaging system to communicate with vendors. Go to Messages in your dashboard to start or continue conversations.\"\n  },\n  {\n    question: \"Can I get a refund?\",\n    answer: \"Refunds are handled on a case-by-case basis. If there's an issue with your purchase, open a dispute and our support team will review your case.\"\n  },\n  {\n    question: \"How do I track my orders?\",\n    answer: \"Visit the Orders section in your dashboard to see the status of all your purchases. You'll get notifications for status updates.\"\n  },\n  {\n    question: \"Is my personal information safe?\",\n    answer: \"We prioritize privacy and use minimal data collection. Your transactions are anonymous and we don't store unnecessary personal information.\"\n  }\n];\n\nexport default function BuyerSupport() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [ticketForm, setTicketForm] = useState({\n    subject: \"\",\n    category: \"\",\n    priority: \"\",\n    description: \"\"\n  });\n\n  const filteredFAQ = faqData.filter(item =>\n    item.question.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    item.answer.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  const handleSubmitTicket = (e: React.FormEvent) => {\n    e.preventDefault();\n    // Handle ticket submission\n    console.log(\"Ticket submitted:\", ticketForm);\n  };\n\n  return (\n    <BuyerLayout>\n      <div className=\"space-y-6\">\n        {/* Header */}\n        <div className=\"bg-gradient-to-r from-gray-800 to-gray-700 rounded-xl p-6 text-white border border-gray-700\">\n          <div className=\"flex items-center space-x-3\">\n            <HelpCircle className=\"w-8 h-8\" />\n            <div>\n              <h1 className=\"text-2xl font-bold\">Help & Support</h1>\n              <p className=\"text-gray-300\">Get help with your account and orders</p>\n            </div>\n          </div>\n        </div>\n\n        {/* Quick Contact Options */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n          <Card className=\"border border-gray-700 bg-gray-900 hover:shadow-xl transition-shadow cursor-pointer\">\n            <CardContent className=\"p-6 text-center\">\n              <div className=\"w-12 h-12 bg-gradient-to-br from-blue-500 to-purple-600 rounded-xl flex items-center justify-center mx-auto mb-4\">\n                <MessageSquare className=\"w-6 h-6 text-white\" />\n              </div>\n              <h3 className=\"font-semibold text-white mb-2\">Live Chat</h3>\n              <p className=\"text-sm text-gray-400 mb-4\">\n                Get instant help from our support team\n              </p>\n              <Button className=\"w-full bg-gray-700\">\n                Start Chat\n              </Button>\n            </CardContent>\n          </Card>\n\n          <Card className=\"border border-gray-700 bg-gray-900 hover:shadow-xl transition-shadow cursor-pointer\">\n            <CardContent className=\"p-6 text-center\">\n              <div className=\"w-12 h-12 bg-gradient-to-br from-green-500 to-emerald-600 rounded-xl flex items-center justify-center mx-auto mb-4\">\n                <Mail className=\"w-6 h-6 text-white\" />\n              </div>\n              <h3 className=\"font-semibold text-white mb-2\">Email Support</h3>\n              <p className=\"text-sm text-gray-400 mb-4\">\n                Send us an email and we'll respond within 24h\n              </p>\n              <Button variant=\"outline\" className=\"w-full\">\n                support@cryptomarket.com\n              </Button>\n            </CardContent>\n          </Card>\n\n          <Card className=\"border border-gray-700 bg-gray-900 hover:shadow-xl transition-shadow cursor-pointer\">\n            <CardContent className=\"p-6 text-center\">\n              <div className=\"w-12 h-12 bg-gradient-to-br from-orange-500 to-red-600 rounded-xl flex items-center justify-center mx-auto mb-4\">\n                <FileText className=\"w-6 h-6 text-white\" />\n              </div>\n              <h3 className=\"font-semibold text-white mb-2\">Submit Ticket</h3>\n              <p className=\"text-sm text-gray-400 mb-4\">\n                Create a detailed support request\n              </p>\n              <Button variant=\"outline\" className=\"w-full\">\n                Create Ticket\n              </Button>\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          {/* FAQ Section */}\n          <div>\n            <Card className=\"border border-gray-700 bg-gray-900\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <HelpCircle className=\"w-5 h-5\" />\n                  <span>Frequently Asked Questions</span>\n                </CardTitle>\n                <div className=\"relative\">\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n                  <Input\n                    placeholder=\"Search FAQ...\"\n                    value={searchQuery}\n                    onChange={(e) => setSearchQuery(e.target.value)}\n                    className=\"pl-10\"\n                  />\n                </div>\n              </CardHeader>\n              <CardContent>\n                <Accordion type=\"single\" collapsible className=\"space-y-2\">\n                  {filteredFAQ.map((item, index) => (\n                    <AccordionItem \n                      key={index} \n                      value={`item-${index}`}\n                      className=\"border border-gray-200 dark:border-gray-700 rounded-lg px-4\"\n                    >\n                      <AccordionTrigger className=\"text-left hover:no-underline\">\n                        {item.question}\n                      </AccordionTrigger>\n                      <AccordionContent className=\"text-gray-600 dark:text-gray-400 pb-4\">\n                        {item.answer}\n                      </AccordionContent>\n                    </AccordionItem>\n                  ))}\n                </Accordion>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Support Ticket Form */}\n          <div>\n            <Card className=\"border border-gray-700 bg-gray-900\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <FileText className=\"w-5 h-5\" />\n                  <span>Submit Support Ticket</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <form onSubmit={handleSubmitTicket} className=\"space-y-6\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"subject\">Subject</Label>\n                    <Input\n                      id=\"subject\"\n                      placeholder=\"Brief description of your issue\"\n                      value={ticketForm.subject}\n                      onChange={(e) => setTicketForm({...ticketForm, subject: e.target.value})}\n                      required\n                    />\n                  </div>\n\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"category\">Category</Label>\n                      <Select value={ticketForm.category} onValueChange={(value) => setTicketForm({...ticketForm, category: value})}>\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Select category\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"order\">Order Issue</SelectItem>\n                          <SelectItem value=\"payment\">Payment Problem</SelectItem>\n                          <SelectItem value=\"account\">Account Access</SelectItem>\n                          <SelectItem value=\"vendor\">Vendor Dispute</SelectItem>\n                          <SelectItem value=\"technical\">Technical Issue</SelectItem>\n                          <SelectItem value=\"other\">Other</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"priority\">Priority</Label>\n                      <Select value={ticketForm.priority} onValueChange={(value) => setTicketForm({...ticketForm, priority: value})}>\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Select priority\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"low\">Low</SelectItem>\n                          <SelectItem value=\"medium\">Medium</SelectItem>\n                          <SelectItem value=\"high\">High</SelectItem>\n                          <SelectItem value=\"urgent\">Urgent</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"description\">Description</Label>\n                    <Textarea\n                      id=\"description\"\n                      placeholder=\"Please provide detailed information about your issue...\"\n                      className=\"min-h-32\"\n                      value={ticketForm.description}\n                      onChange={(e) => setTicketForm({...ticketForm, description: e.target.value})}\n                      required\n                    />\n                  </div>\n\n                  <Button type=\"submit\" className=\"w-full bg-gray-700\">\n                    Submit Ticket\n                  </Button>\n                </form>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n\n        {/* Support Resources */}\n        <Card className=\"border border-gray-700 bg-gray-900\">\n          <CardHeader>\n            <CardTitle>Additional Resources</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n              <div className=\"text-center p-4 bg-gray-800 rounded-lg\">\n                <FileText className=\"w-8 h-8 text-blue-600 mx-auto mb-3\" />\n                <h4 className=\"font-medium mb-2\">User Guide</h4>\n                <p className=\"text-sm text-gray-400 mb-3\">Complete guide to using our platform</p>\n                <Button variant=\"outline\" size=\"sm\">Read Guide</Button>\n              </div>\n\n              <div className=\"text-center p-4 bg-gray-800 rounded-lg\">\n                <MessageSquare className=\"w-8 h-8 text-green-600 mx-auto mb-3\" />\n                <h4 className=\"font-medium mb-2\">Community Forum</h4>\n                <p className=\"text-sm text-gray-400 mb-3\">Connect with other users and get tips</p>\n                <Button variant=\"outline\" size=\"sm\">Visit Forum</Button>\n              </div>\n\n              <div className=\"text-center p-4 bg-gray-800 rounded-lg\">\n                <HelpCircle className=\"w-8 h-8 text-purple-600 mx-auto mb-3\" />\n                <h4 className=\"font-medium mb-2\">Video Tutorials</h4>\n                <p className=\"text-sm text-gray-400 mb-3\">Step-by-step video guides</p>\n                <Button variant=\"outline\" size=\"sm\">Watch Videos</Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </BuyerLayout>\n  );\n}","size_bytes":13004},"client/src/pages/buyer/wishlist.tsx":{"content":"import { useState } from \"react\";\nimport { Heart, Trash2, ShoppingCart, Share2 } from \"lucide-react\";\nimport { BuyerLayout } from \"@/components/buyer/BuyerLayout\";\nimport { ProductCard } from \"@/components/buyer/ProductCard\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\n\nconst wishlistItems = [\n  {\n    id: 1,\n    title: \"Netflix Premium Account (1 Year)\",\n    vendor: \"CryptoAccountsPlus\",\n    price: \"0.0012 BTC\",\n    image: \"https://images.unsplash.com/photo-1522869635100-9f4c5e86aa37?w=400\",\n    rating: 4.9,\n    inStock: true,\n    addedDate: \"2024-01-10\",\n    priceChange: \"down\"\n  },\n  {\n    id: 2,\n    title: \"Adobe Creative Cloud (1 Year)\",\n    vendor: \"PremiumSoft\",\n    price: \"0.0034 BTC\",\n    image: \"https://images.unsplash.com/photo-1551650975-87deedd944c3?w=400\", \n    rating: 4.8,\n    inStock: false,\n    addedDate: \"2024-01-08\",\n    priceChange: \"up\"\n  },\n  {\n    id: 3,\n    title: \"Spotify Premium (6 Months)\",\n    vendor: \"DigitalVault\",\n    price: \"0.0008 BTC\", \n    image: \"https://images.unsplash.com/photo-1493225457124-a3eb161ffa5f?w=400\",\n    rating: 4.7,\n    inStock: true,\n    addedDate: \"2024-01-05\",\n    priceChange: \"same\"\n  },\n  {\n    id: 4,\n    title: \"Discord Nitro (1 Year)\",\n    vendor: \"GamersVault\",\n    price: \"0.0009 BTC\",\n    image: \"https://images.unsplash.com/photo-1611224923853-80b023f02d71?w=400\",\n    rating: 4.6,\n    inStock: true,\n    addedDate: \"2024-01-03\",\n    priceChange: \"down\"\n  }\n];\n\nexport default function BuyerWishlist() {\n  const [selectedItems, setSelectedItems] = useState<number[]>([]);\n\n  const toggleItemSelection = (itemId: number) => {\n    setSelectedItems(prev => \n      prev.includes(itemId) \n        ? prev.filter(id => id !== itemId)\n        : [...prev, itemId]\n    );\n  };\n\n  const selectAllItems = () => {\n    setSelectedItems(wishlistItems.map(item => item.id));\n  };\n\n  const clearSelection = () => {\n    setSelectedItems([]);\n  };\n\n  const removeSelectedItems = () => {\n    // Handle remove selected items\n    setSelectedItems([]);\n  };\n\n  return (\n    <BuyerLayout>\n      <div className=\"space-y-6\">\n        {/* Header */}\n        <div className=\"bg-gradient-to-r from-gray-800 to-gray-700 rounded-xl p-6 text-white border border-gray-700\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-3\">\n              <Heart className=\"w-8 h-8\" />\n              <div>\n                <h1 className=\"text-2xl font-bold\">Your Wishlist</h1>\n                <p className=\"text-gray-300\">{wishlistItems.length} items saved for later</p>\n              </div>\n            </div>\n            <Button variant=\"outline\" className=\"text-white border-gray-500 hover:bg-gray-600\">\n              <Share2 className=\"w-4 h-4 mr-2\" />\n              Share Wishlist\n            </Button>\n          </div>\n        </div>\n\n        {/* Wishlist Stats */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n          <div className=\"bg-gray-900 rounded-xl p-6 border border-gray-700\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-400 mb-1\">Total Items</p>\n                <p className=\"text-2xl font-bold text-white\">{wishlistItems.length}</p>\n              </div>\n              <div className=\"w-12 h-12 rounded-xl bg-gray-700 flex items-center justify-center\">\n                <Heart className=\"w-6 h-6 text-white\" />\n              </div>\n            </div>\n          </div>\n\n          <div className=\"bg-gray-900 rounded-xl p-6 border border-gray-700\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-400 mb-1\">In Stock</p>\n                <p className=\"text-2xl font-bold text-white\">\n                  {wishlistItems.filter(item => item.inStock).length}\n                </p>\n              </div>\n              <div className=\"w-12 h-12 rounded-xl bg-gray-700 flex items-center justify-center\">\n                <ShoppingCart className=\"w-6 h-6 text-white\" />\n              </div>\n            </div>\n          </div>\n\n          <div className=\"bg-gray-900 rounded-xl p-6 border border-gray-700\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-400 mb-1\">Price Drops</p>\n                <p className=\"text-2xl font-bold text-white\">\n                  {wishlistItems.filter(item => item.priceChange === \"down\").length}\n                </p>\n              </div>\n              <div className=\"w-12 h-12 rounded-xl bg-gray-700 flex items-center justify-center\">\n                <span className=\"text-white font-bold text-sm\">↓</span>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"bg-gray-900 rounded-xl p-6 border border-gray-700\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-400 mb-1\">Total Value</p>\n                <p className=\"text-2xl font-bold text-white\">0.0063 BTC</p>\n              </div>\n              <div className=\"w-12 h-12 rounded-xl bg-gray-700 flex items-center justify-center\">\n                <span className=\"text-white font-bold text-sm\">₿</span>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Bulk Actions */}\n        <div className=\"bg-gray-900 rounded-xl p-6 border border-gray-700\">\n          <div className=\"flex flex-col md:flex-row md:items-center md:justify-between gap-4\">\n            <div className=\"flex items-center space-x-4\">\n              <h3 className=\"font-semibold text-white\">Manage Wishlist</h3>\n              {selectedItems.length > 0 && (\n                <Badge variant=\"secondary\" className=\"bg-blue-100 text-blue-800\">\n                  {selectedItems.length} selected\n                </Badge>\n              )}\n            </div>\n            \n            <div className=\"flex space-x-2\">\n              <Button \n                variant=\"outline\" \n                size=\"sm\" \n                onClick={selectedItems.length === wishlistItems.length ? clearSelection : selectAllItems}\n              >\n                {selectedItems.length === wishlistItems.length ? \"Clear Selection\" : \"Select All\"}\n              </Button>\n              \n              {selectedItems.length > 0 && (\n                <>\n                  <Button variant=\"outline\" size=\"sm\">\n                    <ShoppingCart className=\"w-4 h-4 mr-2\" />\n                    Add to Cart\n                  </Button>\n                  <Button variant=\"destructive\" size=\"sm\" onClick={removeSelectedItems}>\n                    <Trash2 className=\"w-4 h-4 mr-2\" />\n                    Remove\n                  </Button>\n                </>\n              )}\n            </div>\n          </div>\n        </div>\n\n        {/* Wishlist Items */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {wishlistItems.map((item) => (\n            <div key={item.id} className=\"relative\">\n              {/* Selection Checkbox */}\n              <div className=\"absolute top-3 left-3 z-10\">\n                <input\n                  type=\"checkbox\"\n                  checked={selectedItems.includes(item.id)}\n                  onChange={() => toggleItemSelection(item.id)}\n                  className=\"w-4 h-4 text-blue-600 bg-white border-gray-300 rounded focus:ring-blue-500\"\n                />\n              </div>\n\n              {/* Price Change Indicator */}\n              {item.priceChange !== \"same\" && (\n                <div className=\"absolute top-3 right-3 z-10\">\n                  <Badge \n                    className={`text-xs ${\n                      item.priceChange === \"down\" \n                        ? \"bg-green-100 text-green-800\" \n                        : \"bg-red-100 text-red-800\"\n                    }`}\n                  >\n                    {item.priceChange === \"down\" ? \"↓ Price Drop\" : \"↑ Price Up\"}\n                  </Badge>\n                </div>\n              )}\n\n              <ProductCard product={item} />\n\n              {/* Added Date */}\n              <div className=\"mt-2 text-center\">\n                <p className=\"text-xs text-gray-400\">\n                  Added on {new Date(item.addedDate).toLocaleDateString()}\n                </p>\n              </div>\n            </div>\n          ))}\n        </div>\n\n        {/* Empty State */}\n        {wishlistItems.length === 0 && (\n          <div className=\"bg-gray-900 rounded-xl p-12 border border-gray-700 text-center\">\n            <Heart className=\"w-16 h-16 text-gray-400 mx-auto mb-4\" />\n            <h3 className=\"text-xl font-semibold text-white mb-2\">\n              Your wishlist is empty\n            </h3>\n            <p className=\"text-gray-400 mb-6\">\n              Start browsing and add items you'd like to purchase later\n            </p>\n            <Button className=\"bg-gray-700\">\n              Browse Products\n            </Button>\n          </div>\n        )}\n      </div>\n    </BuyerLayout>\n  );\n}","size_bytes":9120},"client/src/components/vendor/VendorHeader.tsx":{"content":"import { Bell, Search, User, LogOut, Settings } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\n\nexport function VendorHeader() {\n  return (\n    <header className=\"bg-gray-800 border-b border-gray-700 px-6 py-4\">\n      <div className=\"flex items-center justify-between\">\n        {/* Search */}\n        <div className=\"flex-1 max-w-xl\">\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n            <Input\n              placeholder=\"Search orders, products, customers...\"\n              className=\"pl-10 bg-gray-700 border-gray-600 text-white placeholder-gray-400\"\n            />\n          </div>\n        </div>\n\n        {/* Right Side */}\n        <div className=\"flex items-center space-x-4\">\n          {/* Notifications */}\n          <Button variant=\"ghost\" size=\"sm\" className=\"relative\">\n            <Bell className=\"w-5 h-5 text-gray-300\" />\n            <Badge className=\"absolute -top-1 -right-1 w-5 h-5 bg-red-500 text-white text-xs p-0 flex items-center justify-center\">\n              3\n            </Badge>\n          </Button>\n\n          {/* Profile Dropdown */}\n          <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n              <Button variant=\"ghost\" className=\"relative h-10 w-10 rounded-full\">\n                <Avatar className=\"h-10 w-10\">\n                  <AvatarFallback className=\"bg-gradient-to-br from-blue-500 to-purple-600 text-white\">\n                    CA\n                  </AvatarFallback>\n                </Avatar>\n              </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent className=\"w-56\" align=\"end\">\n              <div className=\"flex items-center justify-start gap-2 p-2\">\n                <div className=\"flex flex-col space-y-1 leading-none\">\n                  <p className=\"font-medium\">CryptoAccountsPlus</p>\n                  <p className=\"w-[200px] truncate text-sm text-muted-foreground\">\n                    vendor@cryptoaccountsplus.com\n                  </p>\n                </div>\n              </div>\n              <DropdownMenuSeparator />\n              <DropdownMenuItem>\n                <User className=\"mr-2 h-4 w-4\" />\n                <span>Profile</span>\n              </DropdownMenuItem>\n              <DropdownMenuItem>\n                <Settings className=\"mr-2 h-4 w-4\" />\n                <span>Settings</span>\n              </DropdownMenuItem>\n              <DropdownMenuSeparator />\n              <DropdownMenuItem>\n                <LogOut className=\"mr-2 h-4 w-4\" />\n                <span>Log out</span>\n              </DropdownMenuItem>\n            </DropdownMenuContent>\n          </DropdownMenu>\n        </div>\n      </div>\n    </header>\n  );\n}","size_bytes":3081},"client/src/components/vendor/VendorLayout.tsx":{"content":"import { useState } from \"react\";\nimport { VendorSidebar } from \"./VendorSidebar\";\nimport { VendorHeader } from \"./VendorHeader\";\n\ninterface VendorLayoutProps {\n  children: React.ReactNode;\n}\n\nexport function VendorLayout({ children }: VendorLayoutProps) {\n  const [sidebarExpanded, setSidebarExpanded] = useState(false);\n\n  return (\n    <div className=\"h-screen bg-gray-900 overflow-hidden\">\n      <div className=\"flex h-full\">\n        <VendorSidebar \n          expanded={sidebarExpanded}\n          onExpandedChange={setSidebarExpanded}\n        />\n        <div className=\"flex-1 flex flex-col overflow-hidden\">\n          <VendorHeader />\n          <main className=\"flex-1 overflow-y-auto bg-gray-900\">\n            <div className=\"p-6\">\n              {children}\n            </div>\n          </main>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":844},"client/src/components/vendor/VendorOverviewCards.tsx":{"content":"import { TrendingUp, Package, ShoppingCart, Wallet, AlertTriangle } from \"lucide-react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\n\nconst overviewData = [\n  {\n    title: \"Total Sales\",\n    value: \"2.45 BTC\",\n    change: \"+12.3%\",\n    changeType: \"positive\" as const,\n    icon: TrendingUp,\n    description: \"≈ $98,420 USD\"\n  },\n  {\n    title: \"Active Listings\",\n    value: \"24\",\n    change: \"+2 this week\",\n    changeType: \"positive\" as const,\n    icon: Package,\n    description: \"12 featured listings\"\n  },\n  {\n    title: \"Pending Orders\",\n    value: \"8\",\n    change: \"-3 from yesterday\",\n    changeType: \"negative\" as const,\n    icon: ShoppingCart,\n    description: \"5 require attention\"\n  },\n  {\n    title: \"Earnings\",\n    value: \"0.89 BTC\",\n    change: \"+0.12 BTC\",\n    changeType: \"positive\" as const,\n    icon: Wallet,\n    description: \"Available for withdrawal\"\n  },\n  {\n    title: \"Disputes\",\n    value: \"1\",\n    change: \"No change\",\n    changeType: \"neutral\" as const,\n    icon: AlertTriangle,\n    description: \"1 active case\"\n  }\n];\n\nexport function VendorOverviewCards() {\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-6 mb-8\">\n      {overviewData.map((item, index) => {\n        const Icon = item.icon;\n        \n        return (\n          <Card key={index} className=\"border border-gray-700 bg-gray-900 hover:shadow-lg transition-shadow duration-200\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium text-gray-400\">\n                {item.title}\n              </CardTitle>\n              <Icon className=\"w-4 h-4 text-gray-400\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-white\">{item.value}</div>\n              <div className=\"flex items-center mt-1\">\n                <span className={`text-sm ${\n                  item.changeType === 'positive' \n                    ? 'text-green-400' \n                    : item.changeType === 'negative'\n                      ? 'text-red-400'\n                      : 'text-gray-400'\n                }`}>\n                  {item.change}\n                </span>\n              </div>\n              <p className=\"text-xs text-gray-400 mt-1\">{item.description}</p>\n            </CardContent>\n          </Card>\n        );\n      })}\n    </div>\n  );\n}","size_bytes":2433},"client/src/components/vendor/VendorSidebar.tsx":{"content":"import { useState } from \"react\";\nimport { \n  Home, \n  Package, \n  ShoppingCart, \n  MessageSquare, \n  BarChart3, \n  Star, \n  Megaphone,\n  AlertTriangle,\n  Wallet,\n  Settings, \n  HelpCircle,\n  Store,\n  ChevronDown,\n  ChevronRight\n} from \"lucide-react\";\nimport { Link, useLocation } from \"wouter\";\nimport { cn } from \"@/lib/utils\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Collapsible, CollapsibleContent, CollapsibleTrigger } from \"@/components/ui/collapsible\";\n\ninterface VendorSidebarProps {\n  expanded: boolean;\n  onExpandedChange: (expanded: boolean) => void;\n}\n\nconst VENDOR_NAV_CATEGORIES = [\n  {\n    title: \"Dashboard\",\n    items: [\n      { title: \"Overview\", icon: Home, href: \"/vendor/dashboard\", badge: null }\n    ]\n  },\n  {\n    title: \"Products\",\n    items: [\n      { title: \"Listings\", icon: Package, href: \"/vendor/listings\", badge: { text: \"12\", type: \"success\" } },\n      { title: \"Add Product\", icon: Package, href: \"/vendor/listings/add\", badge: null }\n    ]\n  },\n  {\n    title: \"Sales\",\n    items: [\n      { title: \"Orders\", icon: ShoppingCart, href: \"/vendor/orders\", badge: { text: \"8\", type: \"accent\" } },\n      { title: \"Messages\", icon: MessageSquare, href: \"/vendor/messages\", badge: { text: \"3\", type: \"danger\" } }\n    ]\n  },\n  {\n    title: \"Analytics\",\n    items: [\n      { title: \"Reports\", icon: BarChart3, href: \"/vendor/analytics\", badge: null },\n      { title: \"Reviews\", icon: Star, href: \"/vendor/reviews\", badge: { text: \"5\", type: \"warning\" } }\n    ]\n  },\n  {\n    title: \"Marketing\",\n    items: [\n      { title: \"Advertisements\", icon: Megaphone, href: \"/vendor/ads\", badge: null }\n    ]\n  },\n  {\n    title: \"Support\",\n    items: [\n      { title: \"Disputes\", icon: AlertTriangle, href: \"/vendor/disputes\", badge: { text: \"1\", type: \"danger\" } },\n      { title: \"Tickets\", icon: HelpCircle, href: \"/vendor/support\", badge: null }\n    ]\n  },\n  {\n    title: \"Finance\",\n    items: [\n      { title: \"Payouts\", icon: Wallet, href: \"/vendor/payouts\", badge: null }\n    ]\n  },\n  {\n    title: \"Settings\",\n    items: [\n      { title: \"Profile\", icon: Settings, href: \"/vendor/settings\", badge: null }\n    ]\n  }\n];\n\nexport function VendorSidebar({ expanded, onExpandedChange }: VendorSidebarProps) {\n  const [location] = useLocation();\n  const [expandedCategories, setExpandedCategories] = useState<string[]>([\"Dashboard\", \"Products\", \"Sales\"]);\n\n  const toggleCategory = (category: string) => {\n    setExpandedCategories(prev => \n      prev.includes(category) \n        ? prev.filter(c => c !== category)\n        : [...prev, category]\n    );\n  };\n\n  return (\n    <div \n      className={cn(\n        \"bg-gray-800 border-r border-gray-700 transition-all duration-300 ease-in-out flex flex-col shadow-lg\",\n        expanded ? \"w-64\" : \"w-16\"\n      )}\n      onMouseEnter={() => onExpandedChange(true)}\n      onMouseLeave={() => onExpandedChange(false)}\n    >\n      {/* Logo */}\n      <div className=\"p-4 border-b border-gray-700\">\n        <div className=\"flex items-center\">\n          <div className=\"w-8 h-8 bg-gradient-to-br from-blue-500 to-purple-600 rounded-xl flex items-center justify-center\">\n            <Store className=\"text-white w-4 h-4\" />\n          </div>\n          {expanded && (\n            <div className=\"ml-3 transition-opacity duration-200\">\n              <h1 className=\"text-lg font-bold text-white\">CryptoMarket</h1>\n              <p className=\"text-xs text-gray-400\">Vendor Dashboard</p>\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Navigation */}\n      <nav className=\"flex-1 p-2 space-y-2 overflow-y-auto\">\n        {VENDOR_NAV_CATEGORIES.map((category) => (\n          <div key={category.title}>\n            {expanded ? (\n              <Collapsible\n                open={expandedCategories.includes(category.title)}\n                onOpenChange={() => toggleCategory(category.title)}\n              >\n                <CollapsibleTrigger className=\"w-full flex items-center justify-between px-3 py-2 text-xs font-semibold text-gray-400 uppercase tracking-wider hover:text-gray-200 transition-colors\">\n                  <span>{category.title}</span>\n                  {expandedCategories.includes(category.title) ? (\n                    <ChevronDown className=\"w-4 h-4\" />\n                  ) : (\n                    <ChevronRight className=\"w-4 h-4\" />\n                  )}\n                </CollapsibleTrigger>\n                <CollapsibleContent className=\"space-y-1\">\n                  {category.items.map((item) => {\n                    const Icon = item.icon;\n                    const isActive = location === item.href || (item.href !== \"/vendor/dashboard\" && location.startsWith(item.href));\n                    \n                    return (\n                      <Link key={item.href} href={item.href}>\n                        <div \n                          className={cn(\n                            \"relative group flex items-center px-3 py-2 rounded-lg transition-all duration-200 cursor-pointer\",\n                            isActive \n                              ? \"bg-gradient-to-r from-blue-500 to-purple-600 text-white shadow-md\" \n                              : \"text-gray-300 hover:bg-gray-700 hover:text-white\"\n                          )}\n                          data-testid={`vendor-nav-${item.title.toLowerCase().replace(/\\s+/g, '-')}`}\n                        >\n                          <Icon className=\"w-5 h-5 flex-shrink-0\" />\n                          <div className=\"ml-3 flex items-center justify-between w-full\">\n                            <span className=\"font-medium\">{item.title}</span>\n                            {item.badge && (\n                              <Badge \n                                variant={item.badge.type === 'danger' ? 'destructive' : 'default'}\n                                className=\"text-xs\"\n                              >\n                                {item.badge.text}\n                              </Badge>\n                            )}\n                          </div>\n                        </div>\n                      </Link>\n                    );\n                  })}\n                </CollapsibleContent>\n              </Collapsible>\n            ) : (\n              // Collapsed view - show first item of each category\n              category.items.slice(0, 1).map((item) => {\n                const Icon = item.icon;\n                const isActive = location === item.href || (item.href !== \"/vendor/dashboard\" && location.startsWith(item.href));\n                \n                return (\n                  <Link key={item.href} href={item.href}>\n                    <div \n                      className={cn(\n                        \"relative group flex items-center px-3 py-3 rounded-lg transition-all duration-200 cursor-pointer\",\n                        isActive \n                          ? \"bg-gradient-to-r from-blue-500 to-purple-600 text-white shadow-md\" \n                          : \"text-gray-300 hover:bg-gray-700 hover:text-white\"\n                      )}\n                    >\n                      <Icon className=\"w-5 h-5 flex-shrink-0\" />\n                      \n                      {item.badge && (\n                        <div className=\"absolute -top-1 -right-1 w-3 h-3 bg-red-500 rounded-full\"></div>\n                      )}\n                      \n                      {/* Tooltip */}\n                      <div className=\"absolute left-16 top-1/2 transform -translate-y-1/2 bg-gray-900 text-white px-3 py-2 rounded-lg shadow-xl opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all duration-200 z-50\">\n                        <div className=\"text-sm font-medium whitespace-nowrap\">{category.title}</div>\n                        {item.badge && (\n                          <div className=\"text-xs text-gray-300 mt-1\">{item.badge.text} new</div>\n                        )}\n                        <div className=\"absolute left-0 top-1/2 transform -translate-y-1/2 -translate-x-1 w-2 h-2 bg-gray-900 rotate-45\"></div>\n                      </div>\n                    </div>\n                  </Link>\n                );\n              })\n            )}\n          </div>\n        ))}\n      </nav>\n\n      {/* User Profile */}\n      <div className=\"p-4 border-t border-gray-700\">\n        <div className=\"flex items-center\">\n          <div className=\"w-8 h-8 bg-gradient-to-br from-green-400 to-blue-500 rounded-full flex items-center justify-center\">\n            <Store className=\"text-white w-4 h-4\" />\n          </div>\n          {expanded && (\n            <div className=\"ml-3\">\n              <p className=\"text-sm font-medium text-white\">CryptoAccountsPlus</p>\n              <p className=\"text-xs text-gray-400\">Verified Vendor</p>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":8816},"client/src/pages/vendor/ads.tsx":{"content":"import { useState } from \"react\";\nimport { VendorLayout } from \"@/components/vendor/VendorLayout\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Plus, Edit, Trash2, Eye, BarChart3, Play, Pause, MoreVertical } from \"lucide-react\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\n\nconst ads = [\n  {\n    id: 1,\n    title: \"Netflix Premium - Special Offer\",\n    product: \"Netflix Premium Account (1 Year)\",\n    budget: \"0.002 BTC\",\n    spent: \"0.0015 BTC\",\n    clicks: 1247,\n    impressions: 15823,\n    ctr: 7.88,\n    status: \"Active\",\n    placement: \"Homepage Banner\",\n    startDate: \"2024-01-10\",\n    endDate: \"2024-02-10\"\n  },\n  {\n    id: 2,\n    title: \"Spotify Premium Deal\",\n    product: \"Spotify Premium (6 Months)\",\n    budget: \"0.001 BTC\",\n    spent: \"0.0008 BTC\",\n    clicks: 892,\n    impressions: 12456,\n    ctr: 7.16,\n    status: \"Active\",\n    placement: \"Category Sidebar\",\n    startDate: \"2024-01-12\",\n    endDate: \"2024-02-12\"\n  },\n  {\n    id: 3,\n    title: \"Adobe Creative Suite\",\n    product: \"Adobe Creative Cloud (1 Year)\",\n    budget: \"0.003 BTC\",\n    spent: \"0.003 BTC\",\n    clicks: 567,\n    impressions: 8932,\n    ctr: 6.35,\n    status: \"Completed\",\n    placement: \"Search Results\",\n    startDate: \"2024-01-05\",\n    endDate: \"2024-01-20\"\n  },\n  {\n    id: 4,\n    title: \"VPN Security Bundle\",\n    product: \"VPN Service (1 Year)\",\n    budget: \"0.0015 BTC\",\n    spent: \"0.0005 BTC\",\n    clicks: 234,\n    impressions: 4567,\n    ctr: 5.12,\n    status: \"Paused\",\n    placement: \"Footer Banner\",\n    startDate: \"2024-01-15\",\n    endDate: \"2024-02-15\"\n  }\n];\n\nconst getStatusColor = (status: string) => {\n  switch (status) {\n    case \"Active\":\n      return \"bg-green-100 text-green-800 border-green-200\";\n    case \"Paused\":\n      return \"bg-yellow-100 text-yellow-800 border-yellow-200\";\n    case \"Completed\":\n      return \"bg-blue-100 text-blue-800 border-blue-200\";\n    case \"Expired\":\n      return \"bg-red-100 text-red-800 border-red-200\";\n    default:\n      return \"bg-gray-700 text-gray-800 border-gray-700 bg-gray-900\";\n  }\n};\n\nexport default function VendorAds() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n\n  const filteredAds = ads.filter(ad => {\n    const matchesSearch = \n      ad.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      ad.product.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesStatus = statusFilter === \"all\" || ad.status === statusFilter;\n    return matchesSearch && matchesStatus;\n  });\n\n  const totalBudget = ads.reduce((sum, ad) => sum + parseFloat(ad.budget.replace(' BTC', '')), 0);\n  const totalSpent = ads.reduce((sum, ad) => sum + parseFloat(ad.spent.replace(' BTC', '')), 0);\n  const totalClicks = ads.reduce((sum, ad) => sum + ad.clicks, 0);\n  const totalImpressions = ads.reduce((sum, ad) => sum + ad.impressions, 0);\n  const avgCTR = totalImpressions > 0 ? (totalClicks / totalImpressions) * 100 : 0;\n\n  return (\n    <VendorLayout>\n      <div className=\"space-y-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-white\">Advertisement Management</h1>\n            <p className=\"text-gray-400\">Create and manage your product advertisements</p>\n          </div>\n          <Button className=\"bg-blue-500 hover:bg-blue-600\">\n            <Plus className=\"w-4 h-4 mr-2\" />\n            Create New Ad\n          </Button>\n        </div>\n\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-5 gap-6\">\n          <Card className=\"border border-gray-700 bg-gray-900\">\n            <CardContent className=\"p-6\">\n              <div className=\"text-2xl font-bold text-white\">{ads.length}</div>\n              <p className=\"text-sm text-gray-400\">Total Campaigns</p>\n            </CardContent>\n          </Card>\n          <Card className=\"border border-gray-700 bg-gray-900\">\n            <CardContent className=\"p-6\">\n              <div className=\"text-2xl font-bold text-blue-600\">{totalBudget.toFixed(4)} BTC</div>\n              <p className=\"text-sm text-gray-400\">Total Budget</p>\n            </CardContent>\n          </Card>\n          <Card className=\"border border-gray-700 bg-gray-900\">\n            <CardContent className=\"p-6\">\n              <div className=\"text-2xl font-bold text-purple-600\">{totalSpent.toFixed(4)} BTC</div>\n              <p className=\"text-sm text-gray-400\">Total Spent</p>\n            </CardContent>\n          </Card>\n          <Card className=\"border border-gray-700 bg-gray-900\">\n            <CardContent className=\"p-6\">\n              <div className=\"text-2xl font-bold text-green-600\">{totalClicks.toLocaleString()}</div>\n              <p className=\"text-sm text-gray-400\">Total Clicks</p>\n            </CardContent>\n          </Card>\n          <Card className=\"border border-gray-700 bg-gray-900\">\n            <CardContent className=\"p-6\">\n              <div className=\"text-2xl font-bold text-orange-600\">{avgCTR.toFixed(2)}%</div>\n              <p className=\"text-sm text-gray-400\">Average CTR</p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Filters */}\n        <Card className=\"border border-gray-700 bg-gray-900\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex flex-col sm:flex-row gap-4\">\n              <div className=\"flex-1\">\n                <Input\n                  placeholder=\"Search campaigns...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                />\n              </div>\n              <Select value={statusFilter} onValueChange={setStatusFilter}>\n                <SelectTrigger className=\"w-full sm:w-48\">\n                  <SelectValue placeholder=\"Filter by status\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Status</SelectItem>\n                  <SelectItem value=\"Active\">Active</SelectItem>\n                  <SelectItem value=\"Paused\">Paused</SelectItem>\n                  <SelectItem value=\"Completed\">Completed</SelectItem>\n                  <SelectItem value=\"Expired\">Expired</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Ads List */}\n        <Card className=\"border border-gray-700 bg-gray-900\">\n          <CardHeader>\n            <CardTitle className=\"text-xl font-bold text-white\">\n              Campaigns ({filteredAds.length})\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {filteredAds.map((ad) => (\n                <div key={ad.id} className=\"flex items-center justify-between p-6 bg-gray-800 rounded-lg hover:bg-gray-700 transition-colors\">\n                  <div className=\"flex items-center space-x-6\">\n                    <div className=\"flex-1\">\n                      <h3 className=\"font-semibold text-white mb-1\">{ad.title}</h3>\n                      <p className=\"text-sm text-gray-400 mb-2\">{ad.product}</p>\n                      <div className=\"flex items-center space-x-4 text-sm text-gray-400\">\n                        <span>{ad.placement}</span>\n                        <span>•</span>\n                        <span>{ad.startDate} - {ad.endDate}</span>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-center space-x-8\">\n                    {/* Performance Metrics */}\n                    <div className=\"text-center\">\n                      <div className=\"text-sm font-medium text-white\">{ad.impressions.toLocaleString()}</div>\n                      <div className=\"text-xs text-gray-400\">Impressions</div>\n                    </div>\n                    \n                    <div className=\"text-center\">\n                      <div className=\"text-sm font-medium text-white\">{ad.clicks.toLocaleString()}</div>\n                      <div className=\"text-xs text-gray-400\">Clicks</div>\n                    </div>\n                    \n                    <div className=\"text-center\">\n                      <div className=\"text-sm font-medium text-white\">{ad.ctr}%</div>\n                      <div className=\"text-xs text-gray-400\">CTR</div>\n                    </div>\n\n                    {/* Budget Info */}\n                    <div className=\"text-right\">\n                      <div className=\"text-sm font-medium text-blue-600\">{ad.spent}</div>\n                      <div className=\"text-xs text-gray-400\">of {ad.budget}</div>\n                      <div className=\"w-24 bg-gray-200 rounded-full h-1.5 mt-1\">\n                        <div \n                          className=\"bg-blue-500 h-1.5 rounded-full\"\n                          style={{ \n                            width: `${(parseFloat(ad.spent.replace(' BTC', '')) / parseFloat(ad.budget.replace(' BTC', ''))) * 100}%` \n                          }}\n                        ></div>\n                      </div>\n                    </div>\n\n                    {/* Status */}\n                    <Badge className={`border ${getStatusColor(ad.status)}`}>\n                      {ad.status}\n                    </Badge>\n\n                    {/* Action Buttons */}\n                    <div className=\"flex items-center space-x-2\">\n                      {ad.status === \"Active\" ? (\n                        <Button size=\"sm\" variant=\"outline\" className=\"text-yellow-600 border-yellow-300\">\n                          <Pause className=\"w-4 h-4\" />\n                        </Button>\n                      ) : ad.status === \"Paused\" ? (\n                        <Button size=\"sm\" variant=\"outline\" className=\"text-green-600 border-green-300\">\n                          <Play className=\"w-4 h-4\" />\n                        </Button>\n                      ) : null}\n                      \n                      <DropdownMenu>\n                        <DropdownMenuTrigger asChild>\n                          <Button variant=\"ghost\" size=\"sm\">\n                            <MoreVertical className=\"w-4 h-4\" />\n                          </Button>\n                        </DropdownMenuTrigger>\n                        <DropdownMenuContent align=\"end\">\n                          <DropdownMenuItem>\n                            <Eye className=\"w-4 h-4 mr-2\" />\n                            View Details\n                          </DropdownMenuItem>\n                          <DropdownMenuItem>\n                            <BarChart3 className=\"w-4 h-4 mr-2\" />\n                            View Analytics\n                          </DropdownMenuItem>\n                          <DropdownMenuItem>\n                            <Edit className=\"w-4 h-4 mr-2\" />\n                            Edit Campaign\n                          </DropdownMenuItem>\n                          {ad.status !== \"Active\" && (\n                            <DropdownMenuItem className=\"text-red-600\">\n                              <Trash2 className=\"w-4 h-4 mr-2\" />\n                              Delete Campaign\n                            </DropdownMenuItem>\n                          )}\n                        </DropdownMenuContent>\n                      </DropdownMenu>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n\n            {filteredAds.length === 0 && (\n              <div className=\"text-center py-12\">\n                <div className=\"text-gray-400 mb-4\">\n                  <BarChart3 className=\"w-12 h-12 mx-auto\" />\n                </div>\n                <h3 className=\"text-lg font-medium text-white mb-2\">No campaigns found</h3>\n                <p className=\"text-gray-400 mb-4\">Create your first advertisement to promote your products.</p>\n                <Button className=\"bg-blue-500 hover:bg-blue-600\">\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Create New Campaign\n                </Button>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Performance Insights */}\n        <Card className=\"border border-gray-700 bg-gray-900\">\n          <CardHeader>\n            <CardTitle className=\"text-xl font-bold text-white\">Performance Insights</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n              <div className=\"text-center p-4 bg-green-50 rounded-lg\">\n                <div className=\"text-2xl font-bold text-green-600 mb-2\">Homepage Banner</div>\n                <p className=\"text-sm text-gray-400\">Best performing placement</p>\n                <p className=\"text-xs text-green-700 mt-1\">7.88% CTR</p>\n              </div>\n              \n              <div className=\"text-center p-4 bg-blue-50 rounded-lg\">\n                <div className=\"text-2xl font-bold text-blue-600 mb-2\">Netflix Ads</div>\n                <p className=\"text-sm text-gray-400\">Top converting product</p>\n                <p className=\"text-xs text-blue-700 mt-1\">1,247 clicks</p>\n              </div>\n              \n              <div className=\"text-center p-4 bg-purple-50 rounded-lg\">\n                <div className=\"text-2xl font-bold text-purple-600 mb-2\">Peak Hours</div>\n                <p className=\"text-sm text-gray-400\">2-6 PM daily</p>\n                <p className=\"text-xs text-purple-700 mt-1\">Highest engagement</p>\n              </div>\n            </div>\n\n            <div className=\"mt-6 p-4 bg-gray-800 rounded-lg\">\n              <h4 className=\"font-semibold text-white mb-2\">Optimization Tips</h4>\n              <ul className=\"space-y-2 text-sm text-gray-400\">\n                <li>• Homepage banner ads perform 23% better than sidebar placements</li>\n                <li>• Netflix and streaming account ads have the highest click-through rates</li>\n                <li>• Consider increasing budget for high-performing campaigns</li>\n                <li>• Best performance times are between 2-6 PM daily</li>\n              </ul>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </VendorLayout>\n  );\n}","size_bytes":14530},"client/src/pages/vendor/analytics.tsx":{"content":"import { VendorLayout } from \"@/components/vendor/VendorLayout\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { TrendingUp, TrendingDown, DollarSign, Package, Users, Eye, Download } from \"lucide-react\";\n\n// Mock data for charts\nconst salesData = [\n  { month: \"Jan\", btc: 0.45, xmr: 0.23, usd: 18400 },\n  { month: \"Feb\", btc: 0.52, xmr: 0.31, usd: 21200 },\n  { month: \"Mar\", btc: 0.38, xmr: 0.28, usd: 17800 },\n  { month: \"Apr\", btc: 0.61, xmr: 0.35, usd: 24500 },\n  { month: \"May\", btc: 0.73, xmr: 0.42, usd: 29600 },\n  { month: \"Jun\", btc: 0.68, xmr: 0.39, usd: 27400 },\n];\n\nconst topProducts = [\n  { name: \"Netflix Premium\", sales: 45, revenue: \"0.54 BTC\", growth: 12.5 },\n  { name: \"Spotify Premium\", sales: 32, revenue: \"0.26 BTC\", growth: 8.3 },\n  { name: \"Adobe Creative Cloud\", sales: 15, revenue: \"0.51 BTC\", growth: -5.2 },\n  { name: \"Disney+ Account\", sales: 28, revenue: \"0.28 BTC\", growth: 15.7 },\n  { name: \"VPN Service\", sales: 22, revenue: \"0.33 BTC\", growth: 22.1 },\n];\n\nconst revenueBreakdown = [\n  { source: \"BTC\", amount: \"1.85 BTC\", percentage: 68.5, color: \"bg-orange-500\" },\n  { source: \"XMR\", amount: \"0.85 XMR\", percentage: 31.5, color: \"bg-gray-600\" },\n];\n\nexport default function VendorAnalytics() {\n  return (\n    <VendorLayout>\n      <div className=\"space-y-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-white\">Analytics & Reports</h1>\n            <p className=\"text-gray-400\">Track your performance and revenue insights</p>\n          </div>\n          <div className=\"flex items-center space-x-4\">\n            <Select defaultValue=\"30days\">\n              <SelectTrigger className=\"w-48\">\n                <SelectValue placeholder=\"Select time period\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"7days\">Last 7 days</SelectItem>\n                <SelectItem value=\"30days\">Last 30 days</SelectItem>\n                <SelectItem value=\"90days\">Last 90 days</SelectItem>\n                <SelectItem value=\"1year\">Last year</SelectItem>\n              </SelectContent>\n            </Select>\n            <Button variant=\"outline\">\n              <Download className=\"w-4 h-4 mr-2\" />\n              Export Report\n            </Button>\n          </div>\n        </div>\n\n        {/* Key Metrics */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          <Card className=\"border border-gray-700 bg-gray-900\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-400\">Total Revenue</p>\n                  <p className=\"text-2xl font-bold text-white\">2.45 BTC</p>\n                  <p className=\"text-sm text-gray-400\">≈ $98,420 USD</p>\n                </div>\n                <div className=\"bg-green-100 p-3 rounded-full\">\n                  <DollarSign className=\"w-6 h-6 text-green-600\" />\n                </div>\n              </div>\n              <div className=\"flex items-center mt-4\">\n                <TrendingUp className=\"w-4 h-4 text-green-500 mr-1\" />\n                <span className=\"text-sm text-green-600\">+12.5% from last month</span>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"border border-gray-700 bg-gray-900\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-400\">Total Sales</p>\n                  <p className=\"text-2xl font-bold text-white\">142</p>\n                  <p className=\"text-sm text-gray-400\">Orders completed</p>\n                </div>\n                <div className=\"bg-blue-100 p-3 rounded-full\">\n                  <Package className=\"w-6 h-6 text-blue-600\" />\n                </div>\n              </div>\n              <div className=\"flex items-center mt-4\">\n                <TrendingUp className=\"w-4 h-4 text-green-500 mr-1\" />\n                <span className=\"text-sm text-green-600\">+8.3% from last month</span>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"border border-gray-700 bg-gray-900\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-400\">Unique Buyers</p>\n                  <p className=\"text-2xl font-bold text-white\">89</p>\n                  <p className=\"text-sm text-gray-400\">Active customers</p>\n                </div>\n                <div className=\"bg-purple-100 p-3 rounded-full\">\n                  <Users className=\"w-6 h-6 text-purple-600\" />\n                </div>\n              </div>\n              <div className=\"flex items-center mt-4\">\n                <TrendingDown className=\"w-4 h-4 text-red-500 mr-1\" />\n                <span className=\"text-sm text-red-600\">-2.1% from last month</span>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"border border-gray-700 bg-gray-900\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-400\">Store Views</p>\n                  <p className=\"text-2xl font-bold text-white\">1,247</p>\n                  <p className=\"text-sm text-gray-400\">Profile visits</p>\n                </div>\n                <div className=\"bg-yellow-100 p-3 rounded-full\">\n                  <Eye className=\"w-6 h-6 text-yellow-600\" />\n                </div>\n              </div>\n              <div className=\"flex items-center mt-4\">\n                <TrendingUp className=\"w-4 h-4 text-green-500 mr-1\" />\n                <span className=\"text-sm text-green-600\">+18.7% from last month</span>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n          {/* Sales Chart */}\n          <Card className=\"border border-gray-700 bg-gray-900\">\n            <CardHeader>\n              <CardTitle className=\"text-xl font-bold text-white\">Sales Over Time</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-80 flex items-end justify-between space-x-2\">\n                {salesData.map((data, index) => (\n                  <div key={index} className=\"flex flex-col items-center space-y-2 flex-1\">\n                    <div className=\"bg-gray-700 w-full rounded-lg overflow-hidden h-64 flex flex-col justify-end\">\n                      <div \n                        className=\"bg-blue-500 transition-all duration-500 ease-out\"\n                        style={{ height: `${(data.btc / 0.8) * 100}%` }}\n                      ></div>\n                    </div>\n                    <span className=\"text-xs text-gray-400 font-medium\">{data.month}</span>\n                    <span className=\"text-xs text-gray-400\">{data.btc} BTC</span>\n                  </div>\n                ))}\n              </div>\n              <div className=\"mt-4 flex items-center justify-between text-sm text-gray-400\">\n                <span>Revenue trend showing steady growth</span>\n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"flex items-center\">\n                    <div className=\"w-3 h-3 bg-blue-500 rounded mr-2\"></div>\n                    <span>BTC Revenue</span>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Revenue Breakdown */}\n          <Card className=\"border border-gray-700 bg-gray-900\">\n            <CardHeader>\n              <CardTitle className=\"text-xl font-bold text-white\">Revenue Breakdown</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-6\">\n                {revenueBreakdown.map((item, index) => (\n                  <div key={index} className=\"space-y-2\">\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"font-medium text-white\">{item.source}</span>\n                      <span className=\"font-semibold text-white\">{item.amount}</span>\n                    </div>\n                    <div className=\"w-full bg-gray-200 rounded-full h-3\">\n                      <div \n                        className={`${item.color} h-3 rounded-full transition-all duration-500`}\n                        style={{ width: `${item.percentage}%` }}\n                      ></div>\n                    </div>\n                    <div className=\"text-sm text-gray-400\">{item.percentage}% of total revenue</div>\n                  </div>\n                ))}\n              </div>\n              \n              <div className=\"mt-8 pt-6 border-t border-gray-700 bg-gray-900\">\n                <h4 className=\"font-semibold text-white mb-4\">Payment Method Performance</h4>\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-gray-400\">Average Order Value (BTC)</span>\n                    <span className=\"font-medium\">0.0142 BTC</span>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-gray-400\">Average Order Value (XMR)</span>\n                    <span className=\"font-medium\">0.0098 XMR</span>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-gray-400\">Most Popular Payment</span>\n                    <span className=\"font-medium\">Bitcoin (68.5%)</span>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Top Products */}\n        <Card className=\"border border-gray-700 bg-gray-900\">\n          <CardHeader>\n            <CardTitle className=\"text-xl font-bold text-white\">Top Performing Products</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {topProducts.map((product, index) => (\n                <div key={index} className=\"flex items-center justify-between p-4 bg-gray-800 rounded-lg\">\n                  <div className=\"flex items-center space-x-4\">\n                    <div className=\"w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center\">\n                      <span className=\"text-blue-600 font-semibold text-sm\">#{index + 1}</span>\n                    </div>\n                    <div>\n                      <h4 className=\"font-medium text-white\">{product.name}</h4>\n                      <p className=\"text-sm text-gray-400\">{product.sales} sales</p>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-center space-x-6\">\n                    <div className=\"text-right\">\n                      <div className=\"font-semibold text-blue-600\">{product.revenue}</div>\n                      <div className=\"text-sm text-gray-400\">Revenue</div>\n                    </div>\n                    \n                    <div className=\"flex items-center\">\n                      {product.growth > 0 ? (\n                        <TrendingUp className=\"w-4 h-4 text-green-500 mr-1\" />\n                      ) : (\n                        <TrendingDown className=\"w-4 h-4 text-red-500 mr-1\" />\n                      )}\n                      <span className={`text-sm font-medium ${product.growth > 0 ? 'text-green-600' : 'text-red-600'}`}>\n                        {product.growth > 0 ? '+' : ''}{product.growth}%\n                      </span>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </VendorLayout>\n  );\n}","size_bytes":12265},"client/src/pages/vendor/apply-success.tsx":{"content":"import { CheckCircle, ArrowRight, Eye } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Link } from \"wouter\";\n\nexport default function VendorApplySuccess() {\n  return (\n    <div className=\"min-h-screen bg-gray-950 p-6 flex items-center justify-center\">\n      <div className=\"max-w-2xl mx-auto text-center\">\n        {/* Success Icon */}\n        <div className=\"mb-8\">\n          <div className=\"w-20 h-20 bg-green-500 rounded-full flex items-center justify-center mx-auto mb-4\">\n            <CheckCircle className=\"w-10 h-10 text-white\" />\n          </div>\n          <h1 className=\"text-3xl font-bold text-white mb-2\">\n            Your Vendor Application Has Been Sent\n          </h1>\n          <p className=\"text-gray-400 text-lg\">\n            Your request is pending admin approval. You will be notified once approved.\n          </p>\n        </div>\n\n        {/* Status Card */}\n        <Card className=\"border border-gray-700 bg-gray-900 mb-8\">\n          <CardContent className=\"p-8\">\n            <div className=\"flex items-center justify-center space-x-4 mb-6\">\n              <Badge className=\"bg-yellow-500/20 text-yellow-400 border-yellow-500/30 px-4 py-2\">\n                Request Pending\n              </Badge>\n            </div>\n            \n            <div className=\"space-y-4 text-left\">\n              <div className=\"flex justify-between items-center py-2 border-b border-gray-800\">\n                <span className=\"text-gray-400\">Application ID</span>\n                <span className=\"text-white font-mono\">#VA-2024-0015</span>\n              </div>\n              <div className=\"flex justify-between items-center py-2 border-b border-gray-800\">\n                <span className=\"text-gray-400\">Submitted</span>\n                <span className=\"text-white\">January 15, 2024</span>\n              </div>\n              <div className=\"flex justify-between items-center py-2 border-b border-gray-800\">\n                <span className=\"text-gray-400\">Status</span>\n                <Badge className=\"bg-yellow-500/20 text-yellow-400 border-yellow-500/30\">\n                  Under Review\n                </Badge>\n              </div>\n              <div className=\"flex justify-between items-center py-2\">\n                <span className=\"text-gray-400\">Expected Response</span>\n                <span className=\"text-white\">1-3 business days</span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* What's Next */}\n        <Card className=\"border border-gray-700 bg-gray-900 mb-8\">\n          <CardContent className=\"p-6\">\n            <h2 className=\"text-xl font-semibold text-white mb-4\">What happens next?</h2>\n            <div className=\"space-y-3 text-left\">\n              <div className=\"flex items-start space-x-3\">\n                <div className=\"w-6 h-6 bg-blue-500 rounded-full flex items-center justify-center flex-shrink-0 mt-0.5\">\n                  <span className=\"text-white text-xs font-bold\">1</span>\n                </div>\n                <div>\n                  <h3 className=\"text-white font-medium\">Admin Review</h3>\n                  <p className=\"text-gray-400 text-sm\">Our team will review your application and verify the information provided.</p>\n                </div>\n              </div>\n              \n              <div className=\"flex items-start space-x-3\">\n                <div className=\"w-6 h-6 bg-blue-500 rounded-full flex items-center justify-center flex-shrink-0 mt-0.5\">\n                  <span className=\"text-white text-xs font-bold\">2</span>\n                </div>\n                <div>\n                  <h3 className=\"text-white font-medium\">Email Notification</h3>\n                  <p className=\"text-gray-400 text-sm\">You'll receive an email notification once your application is approved or if we need additional information.</p>\n                </div>\n              </div>\n              \n              <div className=\"flex items-start space-x-3\">\n                <div className=\"w-6 h-6 bg-blue-500 rounded-full flex items-center justify-center flex-shrink-0 mt-0.5\">\n                  <span className=\"text-white text-xs font-bold\">3</span>\n                </div>\n                <div>\n                  <h3 className=\"text-white font-medium\">Dashboard Access</h3>\n                  <p className=\"text-gray-400 text-sm\">Once approved, you'll gain full access to your vendor dashboard and can start listing products.</p>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Action Buttons */}\n        <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n          <Link href=\"/buyer\">\n            <Button variant=\"outline\" className=\"border-gray-700\">\n              <ArrowRight className=\"w-4 h-4 mr-2\" />\n              Back to Buyer Dashboard\n            </Button>\n          </Link>\n          \n          <Link href=\"/vendor/dashboard\">\n            <Button className=\"bg-blue-500 hover:bg-blue-600\">\n              <Eye className=\"w-4 h-4 mr-2\" />\n              Go to Vendor Dashboard (Preview Mode)\n            </Button>\n          </Link>\n        </div>\n\n        {/* Support Note */}\n        <div className=\"mt-8 p-4 bg-gray-800 rounded-lg border border-gray-700\">\n          <p className=\"text-gray-400 text-sm\">\n            Have questions about your application? Contact our support team at{\" \"}\n            <span className=\"text-blue-400\">vendor-support@cryptomarket.com</span>\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":5646},"client/src/pages/vendor/apply.tsx":{"content":"import { useState } from \"react\";\nimport { ArrowLeft, ArrowRight, Check, Store, User, CreditCard } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { useForm } from \"react-hook-form\";\nimport { Link, useLocation } from \"wouter\";\n\nconst STEPS = [\n  { id: 1, title: \"Basic Info\", icon: User, description: \"Personal and business details\" },\n  { id: 2, title: \"Store Info\", icon: Store, description: \"Your store information\" },\n  { id: 3, title: \"Payment Info\", icon: CreditCard, description: \"Crypto payment setup\" }\n];\n\nconst CATEGORIES = [\n  \"Electronics & Tech\",\n  \"Digital Goods & Software\", \n  \"Streaming Accounts\",\n  \"Gaming Accounts\",\n  \"Educational Services\",\n  \"VPN & Security\",\n  \"Design & Creative\",\n  \"Business Tools\",\n  \"Other\"\n];\n\ninterface VendorApplicationData {\n  // Basic Info\n  businessName: string;\n  vendorUsername: string;\n  email: string;\n  contact: string;\n  \n  // Store Info\n  storeDescription: string;\n  category: string;\n  \n  // Payment Info\n  btcAddress: string;\n  xmrAddress: string;\n  \n  // Agreement\n  agreement: boolean;\n}\n\nexport default function VendorApply() {\n  const [currentStep, setCurrentStep] = useState(1);\n  const [, setLocation] = useLocation();\n  const [formData, setFormData] = useState<VendorApplicationData>({\n    businessName: \"\",\n    vendorUsername: \"\",\n    email: \"crypto_buyer@example.com\", // Pre-filled\n    contact: \"\",\n    storeDescription: \"\",\n    category: \"\",\n    btcAddress: \"\",\n    xmrAddress: \"\",\n    agreement: false\n  });\n\n  const { register, handleSubmit, formState: { errors }, watch, setValue } = useForm({\n    defaultValues: formData\n  });\n\n  const watchedValues = watch();\n\n  const updateFormData = (data: Partial<VendorApplicationData>) => {\n    setFormData(prev => ({ ...prev, ...data }));\n  };\n\n  const nextStep = () => {\n    if (currentStep < STEPS.length) {\n      setCurrentStep(currentStep + 1);\n    }\n  };\n\n  const prevStep = () => {\n    if (currentStep > 1) {\n      setCurrentStep(currentStep - 1);\n    }\n  };\n\n  const onSubmit = (data: any) => {\n    updateFormData(data);\n    // Navigate to confirmation page\n    setLocation(\"/vendor/apply/success\");\n  };\n\n  const isStepValid = (step: number) => {\n    switch (step) {\n      case 1:\n        return watchedValues.businessName && watchedValues.vendorUsername && watchedValues.email;\n      case 2:\n        return watchedValues.storeDescription && watchedValues.category;\n      case 3:\n        return watchedValues.agreement;\n      default:\n        return false;\n    }\n  };\n\n  const renderStepContent = () => {\n    switch (currentStep) {\n      case 1:\n        return (\n          <div className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"businessName\">Business/Shop Name *</Label>\n                <Input\n                  id=\"businessName\"\n                  {...register(\"businessName\", { required: \"Business name is required\" })}\n                  onChange={(e) => {\n                    setValue(\"businessName\", e.target.value);\n                    setFormData(prev => ({ ...prev, businessName: e.target.value }));\n                  }}\n                  value={watchedValues.businessName || \"\"}\n                  placeholder=\"Enter your business name\"\n                  className=\"bg-gray-800 border-gray-700\"\n                />\n                {errors.businessName && (\n                  <p className=\"text-red-400 text-sm\">{errors.businessName.message}</p>\n                )}\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"vendorUsername\">Vendor Username *</Label>\n                <Input\n                  id=\"vendorUsername\"\n                  {...register(\"vendorUsername\", { required: \"Username is required\" })}\n                  placeholder=\"Choose a unique username\"\n                  className=\"bg-gray-800 border-gray-700\"\n                />\n                {errors.vendorUsername && (\n                  <p className=\"text-red-400 text-sm\">{errors.vendorUsername.message}</p>\n                )}\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"email\">Email Address *</Label>\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  {...register(\"email\", { required: \"Email is required\" })}\n                  className=\"bg-gray-800 border-gray-700\"\n                />\n                {errors.email && (\n                  <p className=\"text-red-400 text-sm\">{errors.email.message}</p>\n                )}\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"contact\">Contact (Optional)</Label>\n                <Input\n                  id=\"contact\"\n                  {...register(\"contact\")}\n                  placeholder=\"Phone or Telegram\"\n                  className=\"bg-gray-800 border-gray-700\"\n                />\n              </div>\n            </div>\n          </div>\n        );\n\n      case 2:\n        return (\n          <div className=\"space-y-6\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"storeDescription\">Store Description *</Label>\n              <Textarea\n                id=\"storeDescription\"\n                {...register(\"storeDescription\", { required: \"Store description is required\" })}\n                placeholder=\"Describe your store and what you sell...\"\n                className=\"bg-gray-800 border-gray-700 h-32\"\n              />\n              {errors.storeDescription && (\n                <p className=\"text-red-400 text-sm\">{errors.storeDescription.message}</p>\n              )}\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"category\">Category *</Label>\n              <Select onValueChange={(value) => setValue(\"category\", value)}>\n                <SelectTrigger className=\"bg-gray-800 border-gray-700\">\n                  <SelectValue placeholder=\"Select your primary category\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {CATEGORIES.map((category) => (\n                    <SelectItem key={category} value={category}>\n                      {category}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              {errors.category && (\n                <p className=\"text-red-400 text-sm\">{errors.category.message}</p>\n              )}\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"documents\">Upload Documents (Optional)</Label>\n                <Input\n                  id=\"documents\"\n                  type=\"file\"\n                  multiple\n                  className=\"bg-gray-800 border-gray-700\"\n                />\n                <p className=\"text-xs text-gray-400\">ID, License, Verification files</p>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"logo\">Shop Logo/Banner (Optional)</Label>\n                <Input\n                  id=\"logo\"\n                  type=\"file\"\n                  accept=\"image/*\"\n                  className=\"bg-gray-800 border-gray-700\"\n                />\n                <p className=\"text-xs text-gray-400\">PNG, JPG (max 2MB)</p>\n              </div>\n            </div>\n          </div>\n        );\n\n      case 3:\n        return (\n          <div className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"btcAddress\">Bitcoin Address (Optional)</Label>\n                <Input\n                  id=\"btcAddress\"\n                  {...register(\"btcAddress\")}\n                  onChange={(e) => {\n                    setValue(\"btcAddress\", e.target.value);\n                    setFormData(prev => ({ ...prev, btcAddress: e.target.value }));\n                  }}\n                  value={watchedValues.btcAddress || \"\"}\n                  placeholder=\"bc1q...\"\n                  className=\"bg-gray-800 border-gray-700\"\n                />\n                <p className=\"text-xs text-gray-400\">For receiving BTC payments</p>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"xmrAddress\">Monero Address (Optional)</Label>\n                <Input\n                  id=\"xmrAddress\"\n                  {...register(\"xmrAddress\")}\n                  onChange={(e) => {\n                    setValue(\"xmrAddress\", e.target.value);\n                    setFormData(prev => ({ ...prev, xmrAddress: e.target.value }));\n                  }}\n                  value={watchedValues.xmrAddress || \"\"}\n                  placeholder=\"4...\"\n                  className=\"bg-gray-800 border-gray-700\"\n                />\n                <p className=\"text-xs text-gray-400\">For receiving XMR payments</p>\n              </div>\n            </div>\n\n            <div className=\"space-y-4\">\n              <div className=\"bg-gray-800 p-4 rounded-lg border border-gray-700\">\n                <h3 className=\"font-semibold text-white mb-2\">Payment Information</h3>\n                <p className=\"text-sm text-gray-400 mb-4\">\n                  You can add your crypto addresses now or later in your vendor dashboard settings. \n                  The marketplace also supports escrow payments for buyer protection.\n                </p>\n              </div>\n\n              <div className=\"flex items-start space-x-3\">\n                <Checkbox\n                  id=\"agreement\"\n                  checked={watchedValues.agreement}\n                  onCheckedChange={(checked) => {\n                    setValue(\"agreement\", checked as boolean);\n                    setFormData(prev => ({ ...prev, agreement: checked as boolean }));\n                  }}\n                  className=\"mt-1\"\n                />\n                <div>\n                  <Label htmlFor=\"agreement\" className=\"text-sm text-white\">\n                    I agree to the marketplace policies and terms of service *\n                  </Label>\n                  <p className=\"text-xs text-gray-400 mt-1\">\n                    By checking this box, you agree to our vendor guidelines, commission structure, and marketplace rules.\n                  </p>\n                </div>\n              </div>\n              {errors.agreement && (\n                <p className=\"text-red-400 text-sm\">{errors.agreement.message}</p>\n              )}\n            </div>\n          </div>\n        );\n\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-950 p-6\">\n      <div className=\"max-w-4xl mx-auto\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <Link href=\"/buyer\">\n            <Button variant=\"ghost\" className=\"mb-4 text-gray-400 hover:text-white\">\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Back to Dashboard\n            </Button>\n          </Link>\n          \n          <h1 className=\"text-3xl font-bold text-white mb-2\">Apply as Vendor</h1>\n          <p className=\"text-gray-400\">Join our marketplace and start selling your products</p>\n        </div>\n\n        {/* Progress Steps */}\n        <div className=\"mb-8\">\n          <div className=\"flex justify-between items-center\">\n            {STEPS.map((step, index) => {\n              const Icon = step.icon;\n              const isActive = currentStep === step.id;\n              const isCompleted = currentStep > step.id;\n              const isValid = isStepValid(step.id);\n\n              return (\n                <div key={step.id} className=\"flex items-center\">\n                  <div className=\"flex flex-col items-center\">\n                    <div className={`w-12 h-12 rounded-full flex items-center justify-center border-2 transition-all duration-200 ${\n                      isCompleted \n                        ? \"bg-green-500 border-green-500 text-white\" \n                        : isActive \n                          ? \"bg-blue-500 border-blue-500 text-white\"\n                          : \"bg-gray-800 border-gray-700 text-gray-400\"\n                    }`}>\n                      {isCompleted ? <Check className=\"w-5 h-5\" /> : <Icon className=\"w-5 h-5\" />}\n                    </div>\n                    <div className=\"mt-2 text-center\">\n                      <div className={`font-medium ${isActive ? \"text-white\" : \"text-gray-400\"}`}>\n                        {step.title}\n                      </div>\n                      <div className=\"text-xs text-gray-500\">{step.description}</div>\n                    </div>\n                  </div>\n                  \n                  {index < STEPS.length - 1 && (\n                    <div className={`flex-1 h-0.5 mx-4 ${\n                      isCompleted ? \"bg-green-500\" : \"bg-gray-700\"\n                    }`} />\n                  )}\n                </div>\n              );\n            })}\n          </div>\n        </div>\n\n        {/* Form Content */}\n        <Card className=\"border border-gray-700 bg-gray-900\">\n          <CardHeader>\n            <CardTitle className=\"text-white\">\n              Step {currentStep}: {STEPS[currentStep - 1].title}\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={handleSubmit(onSubmit)}>\n              {renderStepContent()}\n\n              {/* Navigation Buttons */}\n              <div className=\"flex justify-between mt-8\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={prevStep}\n                  disabled={currentStep === 1}\n                  className=\"border-gray-700\"\n                >\n                  <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                  Previous\n                </Button>\n\n                {currentStep < STEPS.length ? (\n                  <Button\n                    type=\"button\"\n                    onClick={nextStep}\n                    disabled={!isStepValid(currentStep)}\n                    className=\"bg-blue-500 hover:bg-blue-600\"\n                  >\n                    Next\n                    <ArrowRight className=\"w-4 h-4 ml-2\" />\n                  </Button>\n                ) : (\n                  <Button\n                    type=\"submit\"\n                    disabled={!isStepValid(currentStep)}\n                    className=\"bg-green-500 hover:bg-green-600\"\n                  >\n                    Submit Application\n                  </Button>\n                )}\n              </div>\n            </form>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":15156},"client/src/pages/vendor/dashboard.tsx":{"content":"import { VendorLayout } from \"@/components/vendor/VendorLayout\";\nimport { VendorOverviewCards } from \"@/components/vendor/VendorOverviewCards\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Plus, Eye, Edit, Trash2, TrendingUp, Package, Star } from \"lucide-react\";\n\nconst recentOrders = [\n  {\n    id: \"ORD-VN-4521\",\n    buyer: \"crypto_buyer_01\",\n    product: \"Netflix Premium Account (1 Year)\",\n    amount: \"0.0012 BTC\",\n    status: \"Processing\",\n    date: \"2024-01-15\"\n  },\n  {\n    id: \"ORD-VN-4520\",\n    buyer: \"anonymous_buyer\",\n    product: \"Spotify Premium (6 Months)\",\n    amount: \"0.0008 BTC\",\n    status: \"Completed\",\n    date: \"2024-01-14\"\n  },\n  {\n    id: \"ORD-VN-4519\",\n    buyer: \"crypto_buyer_02\",\n    product: \"Disney+ Account (1 Year)\",\n    amount: \"0.0010 BTC\",\n    status: \"Shipped\",\n    date: \"2024-01-14\"\n  }\n];\n\nconst topProducts = [\n  {\n    id: 1,\n    name: \"Netflix Premium Account (1 Year)\",\n    sales: 45,\n    revenue: \"0.54 BTC\",\n    status: \"Active\",\n    stock: 23\n  },\n  {\n    id: 2,\n    name: \"Spotify Premium (6 Months)\",\n    sales: 32,\n    revenue: \"0.26 BTC\",\n    status: \"Active\",\n    stock: 18\n  },\n  {\n    id: 3,\n    name: \"Adobe Creative Cloud (1 Year)\",\n    sales: 15,\n    revenue: \"0.51 BTC\",\n    status: \"Active\",\n    stock: 8\n  }\n];\n\nconst recentMessages = [\n  {\n    id: 1,\n    buyer: \"crypto_buyer_01\",\n    product: \"Netflix Premium Account\",\n    lastMessage: \"Hello, when will the account be ready?\",\n    time: \"2 min ago\",\n    unread: true\n  },\n  {\n    id: 2,\n    buyer: \"anonymous_buyer\",\n    product: \"Spotify Premium\",\n    lastMessage: \"Thanks for the quick delivery!\",\n    time: \"1 hour ago\",\n    unread: false\n  }\n];\n\nexport default function VendorDashboard() {\n  return (\n    <VendorLayout>\n      <div className=\"space-y-8\">\n        {/* Welcome Section */}\n        <div className=\"bg-gradient-to-r from-blue-500 to-purple-600 rounded-xl p-8 text-white\">\n          <h1 className=\"text-3xl font-bold mb-2\">Welcome back, CryptoAccountsPlus!</h1>\n          <p className=\"text-blue-100\">Here's what's happening with your store today</p>\n          <div className=\"mt-4 flex space-x-4\">\n            <Button variant=\"secondary\" className=\"bg-gray-800 text-white hover:bg-gray-700\">\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Add New Product\n            </Button>\n          </div>\n        </div>\n\n        {/* Overview Cards */}\n        <VendorOverviewCards />\n\n        {/* Main Dashboard Grid */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n          {/* Recent Orders */}\n          <Card className=\"border border-gray-700 bg-gray-900\">\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <CardTitle className=\"text-xl font-bold text-white\">Recent Orders</CardTitle>\n                <Button variant=\"outline\" size=\"sm\">\n                  View All\n                </Button>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {recentOrders.map((order) => (\n                  <div key={order.id} className=\"flex items-center justify-between p-4 bg-gray-800 rounded-lg\">\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center justify-between mb-1\">\n                        <h4 className=\"font-medium text-white\">{order.id}</h4>\n                        <Badge \n                          variant={order.status === \"Completed\" ? \"default\" : \"secondary\"}\n                          className={order.status === \"Completed\" ? \"bg-green-100 text-green-800\" : \"\"}\n                        >\n                          {order.status}\n                        </Badge>\n                      </div>\n                      <p className=\"text-sm text-gray-300 mb-1\">{order.product}</p>\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-sm text-gray-400\">by {order.buyer}</span>\n                        <span className=\"font-semibold text-blue-400\">{order.amount}</span>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Top Products */}\n          <Card className=\"border border-gray-700 bg-gray-900\">\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <CardTitle className=\"text-xl font-bold text-white\">Top Products</CardTitle>\n                <Button variant=\"outline\" size=\"sm\">\n                  <Package className=\"w-4 h-4 mr-2\" />\n                  Manage\n                </Button>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {topProducts.map((product) => (\n                  <div key={product.id} className=\"flex items-center justify-between p-4 bg-gray-800 rounded-lg\">\n                    <div className=\"flex-1\">\n                      <h4 className=\"font-medium text-white mb-1\">{product.name}</h4>\n                      <div className=\"flex items-center space-x-4 text-sm text-gray-300\">\n                        <span>{product.sales} sales</span>\n                        <span>Stock: {product.stock}</span>\n                      </div>\n                    </div>\n                    <div className=\"text-right\">\n                      <div className=\"font-semibold text-blue-400\">{product.revenue}</div>\n                      <Badge variant=\"outline\" className=\"mt-1\">\n                        {product.status}\n                      </Badge>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Recent Messages */}\n        <Card className=\"border border-gray-700 bg-gray-900\">\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <CardTitle className=\"text-xl font-bold text-white\">Recent Messages</CardTitle>\n              <Button variant=\"outline\" size=\"sm\">\n                View All\n              </Button>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {recentMessages.map((message) => (\n                <div key={message.id} className=\"flex items-center justify-between p-4 bg-gray-800 rounded-lg\">\n                  <div className=\"flex items-center space-x-4\">\n                    <div className=\"w-10 h-10 bg-blue-500 rounded-full flex items-center justify-center\">\n                      <span className=\"text-white font-semibold\">\n                        {message.buyer.substring(0, 2).toUpperCase()}\n                      </span>\n                    </div>\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center space-x-2\">\n                        <h4 className=\"font-medium text-white\">{message.buyer}</h4>\n                        {message.unread && (\n                          <div className=\"w-2 h-2 bg-red-500 rounded-full\"></div>\n                        )}\n                      </div>\n                      <p className=\"text-sm text-gray-300\">{message.product}</p>\n                      <p className=\"text-sm text-gray-400 truncate\">{message.lastMessage}</p>\n                    </div>\n                  </div>\n                  <div className=\"text-right\">\n                    <span className=\"text-xs text-gray-400\">{message.time}</span>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Quick Actions */}\n        <Card className=\"border border-gray-700 bg-gray-900\">\n          <CardHeader>\n            <CardTitle className=\"text-xl font-bold text-white\">Quick Actions</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n              <Button className=\"bg-blue-500 hover:bg-blue-600 text-white h-16\">\n                <Plus className=\"w-5 h-5 mr-2\" />\n                Add Product\n              </Button>\n              <Button variant=\"outline\" className=\"h-16\">\n                <TrendingUp className=\"w-5 h-5 mr-2\" />\n                View Analytics\n              </Button>\n              <Button variant=\"outline\" className=\"h-16\">\n                <Star className=\"w-5 h-5 mr-2\" />\n                Check Reviews\n              </Button>\n              <Button variant=\"outline\" className=\"h-16\">\n                <Eye className=\"w-5 h-5 mr-2\" />\n                Preview Store\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </VendorLayout>\n  );\n}","size_bytes":8890},"client/src/pages/vendor/disputes.tsx":{"content":"import { useState } from \"react\";\nimport { VendorLayout } from \"@/components/vendor/VendorLayout\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { AlertTriangle, Search, Clock, CheckCircle, XCircle, MessageSquare, FileText, Upload } from \"lucide-react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\n\nconst disputes = [\n  {\n    id: \"DISP-2024-001\",\n    orderId: \"ORD-VN-4521\",\n    buyer: \"crypto_buyer_01\",\n    product: \"Netflix Premium Account (1 Year)\",\n    amount: \"0.0012 BTC\",\n    issue: \"Account not working\",\n    description: \"The Netflix account provided stops working after 2 days. Login credentials are correct but Netflix says the account is suspended.\",\n    status: \"Open\",\n    priority: \"High\",\n    openedDate: \"2024-01-15\",\n    lastActivity: \"2024-01-15\",\n    escrowHeld: true,\n    responses: 2\n  },\n  {\n    id: \"DISP-2024-002\",\n    orderId: \"ORD-VN-4518\",\n    buyer: \"crypto_buyer_03\",\n    product: \"Adobe Creative Cloud (1 Year)\",\n    amount: \"0.0034 BTC\",\n    issue: \"Wrong account type\",\n    description: \"Received a personal account instead of the business account that was ordered. Need the business version for team collaboration features.\",\n    status: \"In Review\",\n    priority: \"Medium\",\n    openedDate: \"2024-01-13\",\n    lastActivity: \"2024-01-14\",\n    escrowHeld: true,\n    responses: 4\n  },\n  {\n    id: \"DISP-2024-003\",\n    orderId: \"ORD-VN-4515\",\n    buyer: \"anonymous_buyer\",\n    product: \"Spotify Premium (6 Months)\",\n    amount: \"0.0008 BTC\",\n    issue: \"Late delivery\",\n    description: \"Order was supposed to be delivered within 1 hour but it's been 6 hours with no communication from vendor.\",\n    status: \"Resolved\",\n    priority: \"Low\",\n    openedDate: \"2024-01-12\",\n    lastActivity: \"2024-01-12\",\n    escrowHeld: false,\n    responses: 3\n  }\n];\n\nconst getStatusColor = (status: string) => {\n  switch (status) {\n    case \"Open\":\n      return \"bg-red-100 text-red-800 border-red-200\";\n    case \"In Review\":\n      return \"bg-yellow-100 text-yellow-800 border-yellow-200\";\n    case \"Resolved\":\n      return \"bg-green-100 text-green-800 border-green-200\";\n    case \"Closed\":\n      return \"bg-gray-700 text-gray-800 border-gray-700 bg-gray-900\";\n    default:\n      return \"bg-gray-700 text-gray-800 border-gray-700 bg-gray-900\";\n  }\n};\n\nconst getPriorityColor = (priority: string) => {\n  switch (priority) {\n    case \"High\":\n      return \"bg-red-500\";\n    case \"Medium\":\n      return \"bg-yellow-500\";\n    case \"Low\":\n      return \"bg-green-500\";\n    default:\n      return \"bg-gray-8000\";\n  }\n};\n\nexport default function VendorDisputes() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [responseText, setResponseText] = useState(\"\");\n  const [selectedDispute, setSelectedDispute] = useState<string | null>(null);\n\n  const filteredDisputes = disputes.filter(dispute => {\n    const matchesSearch = \n      dispute.id.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      dispute.buyer.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      dispute.product.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      dispute.issue.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesStatus = statusFilter === \"all\" || dispute.status === statusFilter;\n    return matchesSearch && matchesStatus;\n  });\n\n  const totalDisputes = disputes.length;\n  const openDisputes = disputes.filter(d => d.status === \"Open\").length;\n  const escrowAmount = disputes\n    .filter(d => d.escrowHeld)\n    .reduce((sum, d) => sum + parseFloat(d.amount.replace(' BTC', '')), 0);\n\n  const handleResponse = (disputeId: string) => {\n    // Handle response submission\n    console.log(`Responding to dispute ${disputeId}: ${responseText}`);\n    setResponseText(\"\");\n    setSelectedDispute(null);\n  };\n\n  return (\n    <VendorLayout>\n      <div className=\"space-y-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-white\">Disputes & Resolution</h1>\n            <p className=\"text-gray-400\">Manage customer disputes and resolve issues</p>\n          </div>\n          <div className=\"flex items-center space-x-4\">\n            {openDisputes > 0 && (\n              <Badge className=\"bg-red-100 text-red-800\">\n                {openDisputes} urgent\n              </Badge>\n            )}\n          </div>\n        </div>\n\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n          <Card className=\"border border-gray-700 bg-gray-900\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <div className=\"text-2xl font-bold text-white\">{totalDisputes}</div>\n                  <p className=\"text-sm text-gray-400\">Total Disputes</p>\n                </div>\n                <AlertTriangle className=\"w-8 h-8 text-gray-400\" />\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"border border-gray-700 bg-gray-900\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <div className=\"text-2xl font-bold text-red-600\">{openDisputes}</div>\n                  <p className=\"text-sm text-gray-400\">Open Cases</p>\n                </div>\n                <Clock className=\"w-8 h-8 text-red-400\" />\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"border border-gray-700 bg-gray-900\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <div className=\"text-2xl font-bold text-green-600\">\n                    {disputes.filter(d => d.status === \"Resolved\").length}\n                  </div>\n                  <p className=\"text-sm text-gray-400\">Resolved</p>\n                </div>\n                <CheckCircle className=\"w-8 h-8 text-green-400\" />\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"border border-gray-700 bg-gray-900\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <div className=\"text-2xl font-bold text-blue-600\">{escrowAmount.toFixed(4)} BTC</div>\n                  <p className=\"text-sm text-gray-400\">Escrow Held</p>\n                </div>\n                <XCircle className=\"w-8 h-8 text-blue-400\" />\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Filters */}\n        <Card className=\"border border-gray-700 bg-gray-900\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex flex-col sm:flex-row gap-4\">\n              <div className=\"flex-1\">\n                <div className=\"relative\">\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n                  <Input\n                    placeholder=\"Search disputes...\"\n                    value={searchTerm}\n                    onChange={(e) => setSearchTerm(e.target.value)}\n                    className=\"pl-10\"\n                  />\n                </div>\n              </div>\n              <Select value={statusFilter} onValueChange={setStatusFilter}>\n                <SelectTrigger className=\"w-full sm:w-48\">\n                  <SelectValue placeholder=\"Filter by status\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Status</SelectItem>\n                  <SelectItem value=\"Open\">Open</SelectItem>\n                  <SelectItem value=\"In Review\">In Review</SelectItem>\n                  <SelectItem value=\"Resolved\">Resolved</SelectItem>\n                  <SelectItem value=\"Closed\">Closed</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Disputes List */}\n        <Card className=\"border border-gray-700 bg-gray-900\">\n          <CardHeader>\n            <CardTitle className=\"text-xl font-bold text-white\">\n              Disputes ({filteredDisputes.length})\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-6\">\n              {filteredDisputes.map((dispute) => (\n                <div key={dispute.id} className=\"border border-gray-700 bg-gray-900 rounded-lg p-6 hover:shadow-md transition-shadow\">\n                  <div className=\"flex items-start justify-between mb-4\">\n                    <div className=\"flex items-center space-x-4\">\n                      <div className=\"flex flex-col items-center\">\n                        <div className={`w-3 h-3 rounded-full ${getPriorityColor(dispute.priority)} mb-1`}></div>\n                        <span className=\"text-xs text-gray-400 uppercase\">{dispute.priority}</span>\n                      </div>\n                      \n                      <div>\n                        <div className=\"flex items-center space-x-3 mb-2\">\n                          <h3 className=\"font-semibold text-white\">{dispute.id}</h3>\n                          <Badge className={`border ${getStatusColor(dispute.status)}`}>\n                            {dispute.status}\n                          </Badge>\n                          {dispute.escrowHeld && (\n                            <Badge variant=\"outline\" className=\"text-xs bg-yellow-50 text-yellow-700 border-yellow-200\">\n                              Escrow Held\n                            </Badge>\n                          )}\n                        </div>\n                        <p className=\"text-sm text-gray-400 mb-1\">\n                          Order: {dispute.orderId} • {dispute.product}\n                        </p>\n                        <p className=\"text-sm text-gray-400\">\n                          Buyer: {dispute.buyer} • Amount: {dispute.amount}\n                        </p>\n                      </div>\n                    </div>\n                    \n                    <div className=\"text-right text-sm text-gray-400\">\n                      <p>Opened: {dispute.openedDate}</p>\n                      <p>Last activity: {dispute.lastActivity}</p>\n                    </div>\n                  </div>\n\n                  <div className=\"mb-4\">\n                    <h4 className=\"font-medium text-white mb-2\">Issue: {dispute.issue}</h4>\n                    <p className=\"text-gray-700 bg-gray-800 p-3 rounded-lg\">{dispute.description}</p>\n                  </div>\n\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-4\">\n                      <div className=\"flex items-center text-sm text-gray-400\">\n                        <MessageSquare className=\"w-4 h-4 mr-1\" />\n                        {dispute.responses} responses\n                      </div>\n                    </div>\n\n                    <div className=\"flex items-center space-x-3\">\n                      <Dialog>\n                        <DialogTrigger asChild>\n                          <Button size=\"sm\" variant=\"outline\">\n                            <FileText className=\"w-4 h-4 mr-2\" />\n                            View Details\n                          </Button>\n                        </DialogTrigger>\n                        <DialogContent className=\"max-w-2xl\">\n                          <DialogHeader>\n                            <DialogTitle>Dispute Details - {dispute.id}</DialogTitle>\n                          </DialogHeader>\n                          <div className=\"space-y-4\">\n                            <div className=\"grid grid-cols-2 gap-4\">\n                              <div>\n                                <label className=\"text-sm font-medium text-gray-400\">Order ID</label>\n                                <p className=\"text-white\">{dispute.orderId}</p>\n                              </div>\n                              <div>\n                                <label className=\"text-sm font-medium text-gray-400\">Buyer</label>\n                                <p className=\"text-white\">{dispute.buyer}</p>\n                              </div>\n                              <div>\n                                <label className=\"text-sm font-medium text-gray-400\">Product</label>\n                                <p className=\"text-white\">{dispute.product}</p>\n                              </div>\n                              <div>\n                                <label className=\"text-sm font-medium text-gray-400\">Amount</label>\n                                <p className=\"text-white\">{dispute.amount}</p>\n                              </div>\n                            </div>\n                            <div>\n                              <label className=\"text-sm font-medium text-gray-400\">Issue Description</label>\n                              <p className=\"text-white bg-gray-800 p-3 rounded mt-1\">{dispute.description}</p>\n                            </div>\n                          </div>\n                        </DialogContent>\n                      </Dialog>\n                      \n                      {dispute.status === \"Open\" && (\n                        <Dialog>\n                          <DialogTrigger asChild>\n                            <Button size=\"sm\" className=\"bg-blue-500 hover:bg-blue-600\">\n                              <MessageSquare className=\"w-4 h-4 mr-2\" />\n                              Respond\n                            </Button>\n                          </DialogTrigger>\n                          <DialogContent>\n                            <DialogHeader>\n                              <DialogTitle>Respond to Dispute</DialogTitle>\n                            </DialogHeader>\n                            <div className=\"space-y-4\">\n                              <div className=\"bg-gray-800 p-4 rounded-lg\">\n                                <h4 className=\"font-medium text-white mb-2\">{dispute.issue}</h4>\n                                <p className=\"text-gray-700\">{dispute.description}</p>\n                              </div>\n                              <Textarea\n                                placeholder=\"Write your response...\"\n                                value={responseText}\n                                onChange={(e) => setResponseText(e.target.value)}\n                                className=\"min-h-32\"\n                              />\n                              <div className=\"flex items-center space-x-3\">\n                                <Button variant=\"outline\" size=\"sm\">\n                                  <Upload className=\"w-4 h-4 mr-2\" />\n                                  Attach Evidence\n                                </Button>\n                              </div>\n                              <div className=\"flex justify-end space-x-3\">\n                                <Button variant=\"outline\">Cancel</Button>\n                                <Button \n                                  onClick={() => handleResponse(dispute.id)}\n                                  className=\"bg-blue-500 hover:bg-blue-600\"\n                                >\n                                  Send Response\n                                </Button>\n                              </div>\n                            </div>\n                          </DialogContent>\n                        </Dialog>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n\n            {filteredDisputes.length === 0 && (\n              <div className=\"text-center py-12\">\n                <div className=\"text-gray-400 mb-4\">\n                  <CheckCircle className=\"w-12 h-12 mx-auto\" />\n                </div>\n                <h3 className=\"text-lg font-medium text-white mb-2\">No disputes found</h3>\n                <p className=\"text-gray-400\">Great! No active disputes to resolve.</p>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Resolution Guidelines */}\n        <Card className=\"border border-gray-700 bg-gray-900\">\n          <CardHeader>\n            <CardTitle className=\"text-xl font-bold text-white\">Resolution Guidelines</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div>\n                <h4 className=\"font-semibold text-white mb-3\">Best Practices</h4>\n                <ul className=\"space-y-2 text-sm text-gray-400\">\n                  <li>• Respond to disputes within 24 hours</li>\n                  <li>• Provide clear evidence and documentation</li>\n                  <li>• Maintain professional communication</li>\n                  <li>• Offer reasonable solutions when possible</li>\n                  <li>• Keep detailed records of all interactions</li>\n                </ul>\n              </div>\n              \n              <div>\n                <h4 className=\"font-semibold text-white mb-3\">Common Resolutions</h4>\n                <ul className=\"space-y-2 text-sm text-gray-400\">\n                  <li>• Replacement account/product</li>\n                  <li>• Partial or full refund</li>\n                  <li>• Additional warranty/support</li>\n                  <li>• Store credit for future purchases</li>\n                  <li>• Technical assistance and guidance</li>\n                </ul>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </VendorLayout>\n  );\n}","size_bytes":18078},"client/src/pages/vendor/listings.tsx":{"content":"import { useState } from \"react\";\nimport { VendorLayout } from \"@/components/vendor/VendorLayout\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Plus, Edit, Trash2, Eye, Search, Filter, MoreVertical } from \"lucide-react\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\n\nconst products = [\n  {\n    id: 1,\n    name: \"Netflix Premium Account (1 Year)\",\n    category: \"Streaming Accounts\",\n    price: \"0.0012 BTC\",\n    stock: 23,\n    sales: 45,\n    status: \"Active\",\n    image: \"https://images.unsplash.com/photo-1522869635100-9f4c5e86aa37?w=100\",\n    created: \"2024-01-10\"\n  },\n  {\n    id: 2,\n    name: \"Spotify Premium (6 Months)\",\n    category: \"Streaming Accounts\",\n    price: \"0.0008 BTC\",\n    stock: 18,\n    sales: 32,\n    status: \"Active\",\n    image: \"https://images.unsplash.com/photo-1493225457124-a3eb161ffa5f?w=100\",\n    created: \"2024-01-08\"\n  },\n  {\n    id: 3,\n    name: \"Adobe Creative Cloud (1 Year)\",\n    category: \"Digital Goods\",\n    price: \"0.0034 BTC\",\n    stock: 8,\n    sales: 15,\n    status: \"Active\",\n    image: \"https://images.unsplash.com/photo-1551650975-87deedd944c3?w=100\",\n    created: \"2024-01-05\"\n  },\n  {\n    id: 4,\n    name: \"Discord Nitro (3 Months)\",\n    category: \"Gaming Accounts\",\n    price: \"0.0005 BTC\",\n    stock: 0,\n    sales: 8,\n    status: \"Out of Stock\",\n    image: \"https://images.unsplash.com/photo-1611532736797-de8892681dfd?w=100\",\n    created: \"2024-01-03\"\n  },\n  {\n    id: 5,\n    name: \"VPN Service (1 Year)\",\n    category: \"VPN & Security\",\n    price: \"0.0015 BTC\",\n    stock: 12,\n    sales: 22,\n    status: \"Under Review\",\n    image: \"https://images.unsplash.com/photo-1555949963-aa79dcee981c?w=100\",\n    created: \"2024-01-01\"\n  }\n];\n\nconst getStatusColor = (status: string) => {\n  switch (status) {\n    case \"Active\":\n      return \"bg-green-100 text-green-800 border-green-200\";\n    case \"Out of Stock\":\n      return \"bg-red-100 text-red-800 border-red-200\";\n    case \"Under Review\":\n      return \"bg-yellow-100 text-yellow-800 border-yellow-200\";\n    default:\n      return \"bg-gray-700 text-gray-800 border-gray-700 bg-gray-900\";\n  }\n};\n\nexport default function VendorListings() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [categoryFilter, setCategoryFilter] = useState(\"all\");\n\n  const filteredProducts = products.filter(product => {\n    const matchesSearch = product.name.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesStatus = statusFilter === \"all\" || product.status === statusFilter;\n    const matchesCategory = categoryFilter === \"all\" || product.category === categoryFilter;\n    return matchesSearch && matchesStatus && matchesCategory;\n  });\n\n  return (\n    <VendorLayout>\n      <div className=\"space-y-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-white\">Product Listings</h1>\n            <p className=\"text-gray-400\">Manage your products and inventory</p>\n          </div>\n          <Button className=\"bg-blue-500 hover:bg-blue-600\">\n            <Plus className=\"w-4 h-4 mr-2\" />\n            Add New Product\n          </Button>\n        </div>\n\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n          <Card className=\"border border-gray-700 bg-gray-900\">\n            <CardContent className=\"p-6\">\n              <div className=\"text-2xl font-bold text-white\">24</div>\n              <p className=\"text-sm text-gray-400\">Total Products</p>\n            </CardContent>\n          </Card>\n          <Card className=\"border border-gray-700 bg-gray-900\">\n            <CardContent className=\"p-6\">\n              <div className=\"text-2xl font-bold text-green-600\">19</div>\n              <p className=\"text-sm text-gray-400\">Active Listings</p>\n            </CardContent>\n          </Card>\n          <Card className=\"border border-gray-700 bg-gray-900\">\n            <CardContent className=\"p-6\">\n              <div className=\"text-2xl font-bold text-red-600\">3</div>\n              <p className=\"text-sm text-gray-400\">Out of Stock</p>\n            </CardContent>\n          </Card>\n          <Card className=\"border border-gray-700 bg-gray-900\">\n            <CardContent className=\"p-6\">\n              <div className=\"text-2xl font-bold text-yellow-600\">2</div>\n              <p className=\"text-sm text-gray-400\">Under Review</p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Filters */}\n        <Card className=\"border border-gray-700 bg-gray-900\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex flex-col sm:flex-row gap-4\">\n              <div className=\"flex-1\">\n                <div className=\"relative\">\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n                  <Input\n                    placeholder=\"Search products...\"\n                    value={searchTerm}\n                    onChange={(e) => setSearchTerm(e.target.value)}\n                    className=\"pl-10\"\n                  />\n                </div>\n              </div>\n              <Select value={statusFilter} onValueChange={setStatusFilter}>\n                <SelectTrigger className=\"w-full sm:w-48\">\n                  <SelectValue placeholder=\"Filter by status\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Status</SelectItem>\n                  <SelectItem value=\"Active\">Active</SelectItem>\n                  <SelectItem value=\"Out of Stock\">Out of Stock</SelectItem>\n                  <SelectItem value=\"Under Review\">Under Review</SelectItem>\n                </SelectContent>\n              </Select>\n              <Select value={categoryFilter} onValueChange={setCategoryFilter}>\n                <SelectTrigger className=\"w-full sm:w-48\">\n                  <SelectValue placeholder=\"Filter by category\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Categories</SelectItem>\n                  <SelectItem value=\"Streaming Accounts\">Streaming Accounts</SelectItem>\n                  <SelectItem value=\"Digital Goods\">Digital Goods</SelectItem>\n                  <SelectItem value=\"Gaming Accounts\">Gaming Accounts</SelectItem>\n                  <SelectItem value=\"VPN & Security\">VPN & Security</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Products Table */}\n        <Card className=\"border border-gray-700 bg-gray-900\">\n          <CardHeader>\n            <CardTitle className=\"text-xl font-bold text-white\">\n              Products ({filteredProducts.length})\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {filteredProducts.map((product) => (\n                <div key={product.id} className=\"flex items-center justify-between p-4 bg-gray-800 rounded-lg hover:bg-gray-700 transition-colors\">\n                  <div className=\"flex items-center space-x-4\">\n                    <img\n                      src={product.image}\n                      alt={product.name}\n                      className=\"w-16 h-16 rounded-lg object-cover\"\n                    />\n                    <div className=\"flex-1\">\n                      <h3 className=\"font-semibold text-white\">{product.name}</h3>\n                      <p className=\"text-sm text-gray-400\">{product.category}</p>\n                      <div className=\"flex items-center space-x-4 mt-1\">\n                        <span className=\"text-sm text-gray-400\">Created: {product.created}</span>\n                        <span className=\"text-sm text-gray-400\">Sales: {product.sales}</span>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-center space-x-6\">\n                    <div className=\"text-right\">\n                      <div className=\"font-semibold text-blue-600\">{product.price}</div>\n                      <div className=\"text-sm text-gray-400\">Stock: {product.stock}</div>\n                    </div>\n\n                    <Badge className={`border ${getStatusColor(product.status)}`}>\n                      {product.status}\n                    </Badge>\n\n                    <DropdownMenu>\n                      <DropdownMenuTrigger asChild>\n                        <Button variant=\"ghost\" size=\"sm\">\n                          <MoreVertical className=\"w-4 h-4\" />\n                        </Button>\n                      </DropdownMenuTrigger>\n                      <DropdownMenuContent align=\"end\">\n                        <DropdownMenuItem>\n                          <Eye className=\"w-4 h-4 mr-2\" />\n                          View Details\n                        </DropdownMenuItem>\n                        <DropdownMenuItem>\n                          <Edit className=\"w-4 h-4 mr-2\" />\n                          Edit Product\n                        </DropdownMenuItem>\n                        <DropdownMenuItem>\n                          <Plus className=\"w-4 h-4 mr-2\" />\n                          Duplicate\n                        </DropdownMenuItem>\n                        <DropdownMenuItem className=\"text-red-600\">\n                          <Trash2 className=\"w-4 h-4 mr-2\" />\n                          Delete\n                        </DropdownMenuItem>\n                      </DropdownMenuContent>\n                    </DropdownMenu>\n                  </div>\n                </div>\n              ))}\n            </div>\n\n            {filteredProducts.length === 0 && (\n              <div className=\"text-center py-12\">\n                <div className=\"text-gray-400 mb-4\">\n                  <Filter className=\"w-12 h-12 mx-auto\" />\n                </div>\n                <h3 className=\"text-lg font-medium text-white mb-2\">No products found</h3>\n                <p className=\"text-gray-400\">Try adjusting your search or filter criteria.</p>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </VendorLayout>\n  );\n}","size_bytes":10576},"client/src/pages/vendor/messages.tsx":{"content":"import { useState } from \"react\";\nimport { VendorLayout } from \"@/components/vendor/VendorLayout\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { MessageSquare, Send, Search, MoreVertical, Archive, Star } from \"lucide-react\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\n\nconst conversations = [\n  {\n    id: 1,\n    buyer: \"crypto_buyer_01\",\n    buyerAvatar: \"CB\",\n    lastMessage: \"Hello, when will the account be ready?\",\n    time: \"2 min ago\",\n    unread: 2,\n    product: \"Netflix Premium Account\",\n    priority: \"urgent\",\n    status: \"active\"\n  },\n  {\n    id: 2,\n    buyer: \"anonymous_buyer\",\n    buyerAvatar: \"AB\",\n    lastMessage: \"Thanks for the quick delivery!\",\n    time: \"1 hour ago\",\n    unread: 0,\n    product: \"Spotify Premium\",\n    priority: \"normal\",\n    status: \"resolved\"\n  },\n  {\n    id: 3,\n    buyer: \"crypto_buyer_02\", \n    buyerAvatar: \"C2\",\n    lastMessage: \"Can you provide more details about the warranty?\",\n    time: \"3 hours ago\",\n    unread: 1,\n    product: \"Disney+ Account\",\n    priority: \"normal\",\n    status: \"active\"\n  },\n  {\n    id: 4,\n    buyer: \"crypto_buyer_03\",\n    buyerAvatar: \"C3\",\n    lastMessage: \"I'm having trouble logging in, can you help?\",\n    time: \"5 hours ago\",\n    unread: 3,\n    product: \"Adobe Creative Cloud\",\n    priority: \"high\",\n    status: \"active\"\n  },\n  {\n    id: 5,\n    buyer: \"anonymous_buyer_2\",\n    buyerAvatar: \"A2\",\n    lastMessage: \"Order received successfully, great service!\",\n    time: \"1 day ago\",\n    unread: 0,\n    product: \"VPN Service\",\n    priority: \"normal\",\n    status: \"resolved\"\n  }\n];\n\nconst messages = [\n  {\n    id: 1,\n    sender: \"buyer\",\n    content: \"Hello! I just placed an order for the Netflix Premium account. When should I expect to receive the details?\",\n    time: \"2:30 PM\"\n  },\n  {\n    id: 2,\n    sender: \"vendor\",\n    content: \"Hi! Thank you for your order. I'm preparing your account now and you should receive the details within the next 30 minutes.\",\n    time: \"2:32 PM\"\n  },\n  {\n    id: 3,\n    sender: \"buyer\",\n    content: \"Great! One quick question - what's the warranty period for this account?\",\n    time: \"2:35 PM\"\n  },\n  {\n    id: 4,\n    sender: \"vendor\",\n    content: \"The account comes with a 6-month warranty. If there are any issues during this period, I'll replace it immediately at no extra cost.\",\n    time: \"2:37 PM\"\n  },\n  {\n    id: 5,\n    sender: \"buyer\",\n    content: \"Perfect! And when will the account be ready?\",\n    time: \"2:45 PM\"\n  }\n];\n\nconst getPriorityColor = (priority: string) => {\n  switch (priority) {\n    case \"urgent\":\n      return \"bg-red-500\";\n    case \"high\":\n      return \"bg-orange-500\";\n    case \"normal\":\n      return \"bg-gray-400\";\n    default:\n      return \"bg-gray-400\";\n  }\n};\n\nexport default function VendorMessages() {\n  const [selectedConversation, setSelectedConversation] = useState(conversations[0]);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [searchTerm, setSearchTerm] = useState(\"\");\n\n  const filteredConversations = conversations.filter(conv =>\n    conv.buyer.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    conv.product.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    conv.lastMessage.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  const totalUnread = conversations.reduce((sum, conv) => sum + conv.unread, 0);\n\n  const handleSendMessage = () => {\n    if (newMessage.trim()) {\n      // Handle send message logic\n      console.log(\"Sending message:\", newMessage);\n      setNewMessage(\"\");\n    }\n  };\n\n  return (\n    <VendorLayout>\n      <div className=\"space-y-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-white\">Messages</h1>\n            <p className=\"text-gray-300\">Communicate with your customers</p>\n          </div>\n          <div className=\"flex items-center space-x-4\">\n            <Badge className=\"bg-red-100 text-red-800\">\n              {totalUnread} unread\n            </Badge>\n          </div>\n        </div>\n\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n          <Card className=\"border border-gray-700 bg-gray-900\">\n            <CardContent className=\"p-6\">\n              <div className=\"text-2xl font-bold text-white\">{conversations.length}</div>\n              <p className=\"text-sm text-gray-300\">Total Conversations</p>\n            </CardContent>\n          </Card>\n          <Card className=\"border border-gray-700 bg-gray-900\">\n            <CardContent className=\"p-6\">\n              <div className=\"text-2xl font-bold text-red-600\">{totalUnread}</div>\n              <p className=\"text-sm text-gray-300\">Unread Messages</p>\n            </CardContent>\n          </Card>\n          <Card className=\"border border-gray-700 bg-gray-900\">\n            <CardContent className=\"p-6\">\n              <div className=\"text-2xl font-bold text-blue-600\">\n                {conversations.filter(c => c.status === \"active\").length}\n              </div>\n              <p className=\"text-sm text-gray-300\">Active Chats</p>\n            </CardContent>\n          </Card>\n          <Card className=\"border border-gray-700 bg-gray-900\">\n            <CardContent className=\"p-6\">\n              <div className=\"text-2xl font-bold text-green-600\">\n                {conversations.filter(c => c.status === \"resolved\").length}\n              </div>\n              <p className=\"text-sm text-gray-300\">Resolved</p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Messages Interface */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6 h-[600px]\">\n          {/* Conversations List */}\n          <Card className=\"lg:col-span-1 border border-gray-700 bg-gray-900\">\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <MessageSquare className=\"w-5 h-5\" />\n                  <span>Conversations</span>\n                </CardTitle>\n              </div>\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n                <Input\n                  placeholder=\"Search conversations...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10\"\n                />\n              </div>\n            </CardHeader>\n            <CardContent className=\"p-0 h-full overflow-y-auto\">\n              <div className=\"space-y-1\">\n                {filteredConversations.map((conv) => (\n                  <div \n                    key={conv.id}\n                    className={`p-4 cursor-pointer transition-colors duration-200 border-l-4 ${\n                      selectedConversation?.id === conv.id \n                        ? 'bg-blue-50 border-blue-500' \n                        : 'hover:bg-gray-800 border-transparent'\n                    }`}\n                    onClick={() => setSelectedConversation(conv)}\n                  >\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"relative\">\n                        <Avatar className=\"w-10 h-10 bg-gradient-to-br from-blue-500 to-purple-600\">\n                          <AvatarFallback className=\"text-white font-semibold\">\n                            {conv.buyerAvatar}\n                          </AvatarFallback>\n                        </Avatar>\n                        <div className={`absolute -top-1 -right-1 w-3 h-3 rounded-full ${getPriorityColor(conv.priority)}`}></div>\n                      </div>\n                      \n                      <div className=\"flex-1 min-w-0\">\n                        <div className=\"flex items-center justify-between\">\n                          <h4 className=\"font-medium text-white truncate\">\n                            {conv.buyer}\n                          </h4>\n                          {conv.unread > 0 && (\n                            <Badge className=\"bg-red-500 text-white text-xs\">\n                              {conv.unread}\n                            </Badge>\n                          )}\n                        </div>\n                        <p className=\"text-xs text-gray-400 mb-1\">{conv.product}</p>\n                        <p className=\"text-sm text-gray-300 truncate\">\n                          {conv.lastMessage}\n                        </p>\n                        <p className=\"text-xs text-gray-400 mt-1\">{conv.time}</p>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Chat Window */}\n          <Card className=\"lg:col-span-2 border border-gray-700 bg-gray-900 flex flex-col\">\n            {selectedConversation ? (\n              <>\n                {/* Chat Header */}\n                <CardHeader className=\"border-b flex-shrink-0\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-3\">\n                      <Avatar className=\"w-10 h-10 bg-gradient-to-br from-blue-500 to-purple-600\">\n                        <AvatarFallback className=\"text-white font-semibold\">\n                          {selectedConversation.buyerAvatar}\n                        </AvatarFallback>\n                      </Avatar>\n                      <div>\n                        <h3 className=\"font-semibold text-white\">\n                          {selectedConversation.buyer}\n                        </h3>\n                        <p className=\"text-sm text-gray-300\">\n                          Re: {selectedConversation.product}\n                        </p>\n                      </div>\n                      <Badge \n                        className={`text-xs ${selectedConversation.priority === 'urgent' ? 'bg-red-100 text-red-800' : selectedConversation.priority === 'high' ? 'bg-orange-100 text-orange-800' : 'bg-gray-700 text-gray-800'}`}\n                      >\n                        {selectedConversation.priority}\n                      </Badge>\n                    </div>\n                    \n                    <DropdownMenu>\n                      <DropdownMenuTrigger asChild>\n                        <Button variant=\"ghost\" size=\"sm\">\n                          <MoreVertical className=\"w-4 h-4\" />\n                        </Button>\n                      </DropdownMenuTrigger>\n                      <DropdownMenuContent align=\"end\">\n                        <DropdownMenuItem>\n                          <Star className=\"w-4 h-4 mr-2\" />\n                          Mark as Important\n                        </DropdownMenuItem>\n                        <DropdownMenuItem>\n                          <Archive className=\"w-4 h-4 mr-2\" />\n                          Archive Conversation\n                        </DropdownMenuItem>\n                      </DropdownMenuContent>\n                    </DropdownMenu>\n                  </div>\n                </CardHeader>\n\n                {/* Messages */}\n                <CardContent className=\"flex-1 p-4 overflow-y-auto\">\n                  <div className=\"space-y-4\">\n                    {messages.map((message) => (\n                      <div \n                        key={message.id}\n                        className={`flex ${message.sender === 'vendor' ? 'justify-end' : 'justify-start'}`}\n                      >\n                        <div className={`max-w-xs lg:max-w-md px-4 py-3 rounded-2xl ${\n                          message.sender === 'vendor' \n                            ? 'bg-blue-500 text-white' \n                            : 'bg-gray-700 text-white'\n                        }`}>\n                          <p className=\"text-sm\">{message.content}</p>\n                          <p className={`text-xs mt-2 ${\n                            message.sender === 'vendor' ? 'text-blue-100' : 'text-gray-400'\n                          }`}>\n                            {message.time}\n                          </p>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n\n                {/* Message Input */}\n                <div className=\"p-4 border-t flex-shrink-0\">\n                  <div className=\"flex items-center space-x-3\">\n                    <Input\n                      placeholder=\"Type your message...\"\n                      value={newMessage}\n                      onChange={(e) => setNewMessage(e.target.value)}\n                      className=\"flex-1\"\n                      onKeyPress={(e) => {\n                        if (e.key === 'Enter' && newMessage.trim()) {\n                          handleSendMessage();\n                        }\n                      }}\n                    />\n                    <Button \n                      size=\"sm\"\n                      className=\"bg-blue-500 hover:bg-blue-600\"\n                      disabled={!newMessage.trim()}\n                      onClick={handleSendMessage}\n                    >\n                      <Send className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                </div>\n              </>\n            ) : (\n              <CardContent className=\"flex items-center justify-center h-full\">\n                <div className=\"text-center\">\n                  <MessageSquare className=\"w-16 h-16 text-gray-400 mx-auto mb-4\" />\n                  <h3 className=\"text-lg font-medium text-white mb-2\">\n                    Select a conversation\n                  </h3>\n                  <p className=\"text-gray-300\">\n                    Choose a customer to start chatting\n                  </p>\n                </div>\n              </CardContent>\n            )}\n          </Card>\n        </div>\n      </div>\n    </VendorLayout>\n  );\n}","size_bytes":14233},"client/src/pages/vendor/orders.tsx":{"content":"import { useState } from \"react\";\nimport { VendorLayout } from \"@/components/vendor/VendorLayout\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Search, MoreVertical, Eye, MessageSquare, Package, Check, X } from \"lucide-react\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\n\nconst orders = [\n  {\n    id: \"ORD-VN-4521\",\n    buyer: \"crypto_buyer_01\",\n    product: \"Netflix Premium Account (1 Year)\",\n    amount: \"0.0012 BTC\",\n    usdAmount: \"$48.50\",\n    status: \"Processing\",\n    priority: \"normal\",\n    date: \"2024-01-15\",\n    time: \"10:30 AM\",\n    paymentMethod: \"BTC\",\n    escrow: true\n  },\n  {\n    id: \"ORD-VN-4520\",\n    buyer: \"anonymous_buyer\",\n    product: \"Spotify Premium (6 Months)\",\n    amount: \"0.0008 BTC\",\n    usdAmount: \"$32.40\",\n    status: \"Completed\",\n    priority: \"normal\",\n    date: \"2024-01-14\",\n    time: \"02:15 PM\",\n    paymentMethod: \"XMR\",\n    escrow: false\n  },\n  {\n    id: \"ORD-VN-4519\",\n    buyer: \"crypto_buyer_02\",\n    product: \"Disney+ Account (1 Year)\",\n    amount: \"0.0010 BTC\",\n    usdAmount: \"$40.50\",\n    status: \"Shipped\",\n    priority: \"urgent\",\n    date: \"2024-01-14\",\n    time: \"09:20 AM\",\n    paymentMethod: \"BTC\",\n    escrow: true\n  },\n  {\n    id: \"ORD-VN-4518\",\n    buyer: \"crypto_buyer_03\",\n    product: \"Adobe Creative Cloud (1 Year)\",\n    amount: \"0.0034 BTC\",\n    usdAmount: \"$137.60\",\n    status: \"Pending\",\n    priority: \"high\",\n    date: \"2024-01-13\",\n    time: \"04:45 PM\",\n    paymentMethod: \"BTC\",\n    escrow: true\n  },\n  {\n    id: \"ORD-VN-4517\",\n    buyer: \"anonymous_buyer_2\",\n    product: \"VPN Service (1 Year)\",\n    amount: \"0.0015 BTC\",\n    usdAmount: \"$60.75\",\n    status: \"Cancelled\",\n    priority: \"normal\",\n    date: \"2024-01-12\",\n    time: \"11:30 AM\",\n    paymentMethod: \"XMR\",\n    escrow: false\n  }\n];\n\nconst getStatusColor = (status: string) => {\n  switch (status) {\n    case \"Completed\":\n      return \"bg-green-100 text-green-800 border-green-200\";\n    case \"Processing\":\n      return \"bg-blue-100 text-blue-800 border-blue-200\";\n    case \"Shipped\":\n      return \"bg-purple-100 text-purple-800 border-purple-200\";\n    case \"Pending\":\n      return \"bg-yellow-100 text-yellow-800 border-yellow-200\";\n    case \"Cancelled\":\n      return \"bg-red-100 text-red-800 border-red-200\";\n    default:\n      return \"bg-gray-700 text-gray-800 border-gray-700 bg-gray-900\";\n  }\n};\n\nconst getPriorityColor = (priority: string) => {\n  switch (priority) {\n    case \"urgent\":\n      return \"bg-red-500\";\n    case \"high\":\n      return \"bg-orange-500\";\n    case \"normal\":\n      return \"bg-gray-400\";\n    default:\n      return \"bg-gray-400\";\n  }\n};\n\nexport default function VendorOrders() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [dateFilter, setDateFilter] = useState(\"all\");\n\n  const filteredOrders = orders.filter(order => {\n    const matchesSearch = \n      order.id.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      order.buyer.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      order.product.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesStatus = statusFilter === \"all\" || order.status === statusFilter;\n    return matchesSearch && matchesStatus;\n  });\n\n  return (\n    <VendorLayout>\n      <div className=\"space-y-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-white\">Orders & Sales</h1>\n            <p className=\"text-gray-400\">Manage your customer orders and track sales</p>\n          </div>\n          <Button variant=\"outline\">\n            Export Orders\n          </Button>\n        </div>\n\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-5 gap-6\">\n          <Card className=\"border border-gray-700 bg-gray-900\">\n            <CardContent className=\"p-6\">\n              <div className=\"text-2xl font-bold text-white\">156</div>\n              <p className=\"text-sm text-gray-400\">Total Orders</p>\n            </CardContent>\n          </Card>\n          <Card className=\"border border-gray-700 bg-gray-900\">\n            <CardContent className=\"p-6\">\n              <div className=\"text-2xl font-bold text-blue-600\">8</div>\n              <p className=\"text-sm text-gray-400\">Processing</p>\n            </CardContent>\n          </Card>\n          <Card className=\"border border-gray-700 bg-gray-900\">\n            <CardContent className=\"p-6\">\n              <div className=\"text-2xl font-bold text-purple-600\">5</div>\n              <p className=\"text-sm text-gray-400\">Shipped</p>\n            </CardContent>\n          </Card>\n          <Card className=\"border border-gray-700 bg-gray-900\">\n            <CardContent className=\"p-6\">\n              <div className=\"text-2xl font-bold text-green-600\">143</div>\n              <p className=\"text-sm text-gray-400\">Completed</p>\n            </CardContent>\n          </Card>\n          <Card className=\"border border-gray-700 bg-gray-900\">\n            <CardContent className=\"p-6\">\n              <div className=\"text-2xl font-bold text-white\">2.45 BTC</div>\n              <p className=\"text-sm text-gray-400\">Total Revenue</p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Filters */}\n        <Card className=\"border border-gray-700 bg-gray-900\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex flex-col sm:flex-row gap-4\">\n              <div className=\"flex-1\">\n                <div className=\"relative\">\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n                  <Input\n                    placeholder=\"Search orders, buyers, products...\"\n                    value={searchTerm}\n                    onChange={(e) => setSearchTerm(e.target.value)}\n                    className=\"pl-10\"\n                  />\n                </div>\n              </div>\n              <Select value={statusFilter} onValueChange={setStatusFilter}>\n                <SelectTrigger className=\"w-full sm:w-48\">\n                  <SelectValue placeholder=\"Filter by status\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Status</SelectItem>\n                  <SelectItem value=\"Pending\">Pending</SelectItem>\n                  <SelectItem value=\"Processing\">Processing</SelectItem>\n                  <SelectItem value=\"Shipped\">Shipped</SelectItem>\n                  <SelectItem value=\"Completed\">Completed</SelectItem>\n                  <SelectItem value=\"Cancelled\">Cancelled</SelectItem>\n                </SelectContent>\n              </Select>\n              <Select value={dateFilter} onValueChange={setDateFilter}>\n                <SelectTrigger className=\"w-full sm:w-48\">\n                  <SelectValue placeholder=\"Filter by date\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Time</SelectItem>\n                  <SelectItem value=\"today\">Today</SelectItem>\n                  <SelectItem value=\"week\">This Week</SelectItem>\n                  <SelectItem value=\"month\">This Month</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Orders Table */}\n        <Card className=\"border border-gray-700 bg-gray-900\">\n          <CardHeader>\n            <CardTitle className=\"text-xl font-bold text-white\">\n              Orders ({filteredOrders.length})\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {filteredOrders.map((order) => (\n                <div key={order.id} className=\"flex items-center justify-between p-4 bg-gray-800 rounded-lg hover:bg-gray-700 transition-colors\">\n                  <div className=\"flex items-center space-x-4\">\n                    <div className=\"flex flex-col items-center\">\n                      <div className={`w-3 h-3 rounded-full ${getPriorityColor(order.priority)} mb-1`}></div>\n                      <span className=\"text-xs text-gray-400 uppercase\">{order.priority}</span>\n                    </div>\n                    \n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center space-x-2 mb-1\">\n                        <h3 className=\"font-semibold text-white\">{order.id}</h3>\n                        {order.escrow && (\n                          <Badge variant=\"outline\" className=\"text-xs\">\n                            Escrow\n                          </Badge>\n                        )}\n                        <Badge variant=\"outline\" className=\"text-xs\">\n                          {order.paymentMethod}\n                        </Badge>\n                      </div>\n                      <p className=\"text-sm text-gray-400 mb-1\">{order.product}</p>\n                      <div className=\"flex items-center space-x-4\">\n                        <span className=\"text-sm text-gray-400\">by {order.buyer}</span>\n                        <span className=\"text-sm text-gray-400\">{order.date} at {order.time}</span>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-center space-x-6\">\n                    <div className=\"text-right\">\n                      <div className=\"font-semibold text-blue-600\">{order.amount}</div>\n                      <div className=\"text-sm text-gray-400\">{order.usdAmount}</div>\n                    </div>\n\n                    <Badge className={`border ${getStatusColor(order.status)}`}>\n                      {order.status}\n                    </Badge>\n\n                    <div className=\"flex items-center space-x-2\">\n                      {order.status === \"Processing\" && (\n                        <>\n                          <Button size=\"sm\" variant=\"outline\" className=\"text-green-600 border-green-300\">\n                            <Check className=\"w-4 h-4\" />\n                          </Button>\n                          <Button size=\"sm\" variant=\"outline\" className=\"text-red-600 border-red-300\">\n                            <X className=\"w-4 h-4\" />\n                          </Button>\n                        </>\n                      )}\n                      \n                      <DropdownMenu>\n                        <DropdownMenuTrigger asChild>\n                          <Button variant=\"ghost\" size=\"sm\">\n                            <MoreVertical className=\"w-4 h-4\" />\n                          </Button>\n                        </DropdownMenuTrigger>\n                        <DropdownMenuContent align=\"end\">\n                          <DropdownMenuItem>\n                            <Eye className=\"w-4 h-4 mr-2\" />\n                            View Details\n                          </DropdownMenuItem>\n                          <DropdownMenuItem>\n                            <MessageSquare className=\"w-4 h-4 mr-2\" />\n                            Message Buyer\n                          </DropdownMenuItem>\n                          <DropdownMenuItem>\n                            <Package className=\"w-4 h-4 mr-2\" />\n                            Update Status\n                          </DropdownMenuItem>\n                          {order.status === \"Processing\" && (\n                            <>\n                              <DropdownMenuItem className=\"text-green-600\">\n                                <Check className=\"w-4 h-4 mr-2\" />\n                                Mark as Shipped\n                              </DropdownMenuItem>\n                              <DropdownMenuItem className=\"text-red-600\">\n                                <X className=\"w-4 h-4 mr-2\" />\n                                Cancel Order\n                              </DropdownMenuItem>\n                            </>\n                          )}\n                        </DropdownMenuContent>\n                      </DropdownMenu>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n\n            {filteredOrders.length === 0 && (\n              <div className=\"text-center py-12\">\n                <div className=\"text-gray-400 mb-4\">\n                  <Package className=\"w-12 h-12 mx-auto\" />\n                </div>\n                <h3 className=\"text-lg font-medium text-white mb-2\">No orders found</h3>\n                <p className=\"text-gray-400\">Try adjusting your search or filter criteria.</p>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </VendorLayout>\n  );\n}","size_bytes":12984},"client/src/pages/vendor/payouts.tsx":{"content":"import { useState } from \"react\";\nimport { VendorLayout } from \"@/components/vendor/VendorLayout\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Wallet, Download, TrendingUp, Clock, CheckCircle, Copy, ExternalLink } from \"lucide-react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\n\nconst payoutHistory = [\n  {\n    id: \"PAY-2024-015\",\n    amount: \"0.245 BTC\",\n    usdAmount: \"$9,870.50\",\n    address: \"bc1q...xyz789\",\n    method: \"BTC\",\n    status: \"Completed\",\n    date: \"2024-01-15\",\n    txHash: \"a1b2c3d4e5f6789...\"\n  },\n  {\n    id: \"PAY-2024-014\",\n    amount: \"0.189 BTC\",\n    usdAmount: \"$7,623.40\",\n    address: \"bc1q...abc123\",\n    method: \"BTC\",\n    status: \"Completed\",\n    date: \"2024-01-08\",\n    txHash: \"z9y8x7w6v5u4321...\"\n  },\n  {\n    id: \"PAY-2024-013\",\n    amount: \"2.45 XMR\",\n    usdAmount: \"$4,321.90\",\n    address: \"4A1B...789XYZ\",\n    method: \"XMR\",\n    status: \"Processing\",\n    date: \"2024-01-14\",\n    txHash: null\n  },\n  {\n    id: \"PAY-2024-012\",\n    amount: \"0.156 BTC\",\n    usdAmount: \"$6,291.60\",\n    address: \"bc1q...def456\",\n    method: \"BTC\",\n    status: \"Completed\",\n    date: \"2024-01-01\",\n    txHash: \"m3n4o5p6q7r8901...\"\n  }\n];\n\nconst pendingEarnings = {\n  btc: { amount: \"0.0892\", usd: \"$3,594.80\", orders: 23 },\n  xmr: { amount: \"1.234\", usd: \"$2,176.60\", orders: 15 },\n  total: { usd: \"$5,771.40\", orders: 38 }\n};\n\nconst getStatusColor = (status: string) => {\n  switch (status) {\n    case \"Completed\":\n      return \"bg-green-100 text-green-800 border-green-200\";\n    case \"Processing\":\n      return \"bg-yellow-100 text-yellow-800 border-yellow-200\";\n    case \"Failed\":\n      return \"bg-red-100 text-red-800 border-red-200\";\n    default:\n      return \"bg-gray-700 text-gray-800 border-gray-700 bg-gray-900\";\n  }\n};\n\nexport default function VendorPayouts() {\n  const [withdrawAmount, setWithdrawAmount] = useState(\"\");\n  const [withdrawMethod, setWithdrawMethod] = useState(\"BTC\");\n  const [withdrawAddress, setWithdrawAddress] = useState(\"\");\n  const [filterMethod, setFilterMethod] = useState(\"all\");\n\n  const filteredPayouts = payoutHistory.filter(payout =>\n    filterMethod === \"all\" || payout.method === filterMethod\n  );\n\n  const totalPaidOut = payoutHistory\n    .filter(p => p.status === \"Completed\")\n    .reduce((sum, p) => sum + parseFloat(p.usdAmount.replace('$', '').replace(',', '')), 0);\n\n  const handleWithdraw = () => {\n    // Handle withdrawal logic\n    console.log(\"Withdrawal request:\", { withdrawAmount, withdrawMethod, withdrawAddress });\n    setWithdrawAmount(\"\");\n    setWithdrawAddress(\"\");\n  };\n\n  const copyToClipboard = (text: string) => {\n    navigator.clipboard.writeText(text);\n  };\n\n  return (\n    <VendorLayout>\n      <div className=\"space-y-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-white\">Payouts & Earnings</h1>\n            <p className=\"text-gray-400\">Manage your earnings and withdrawal history</p>\n          </div>\n          <Dialog>\n            <DialogTrigger asChild>\n              <Button className=\"bg-blue-500 hover:bg-blue-600\">\n                <Wallet className=\"w-4 h-4 mr-2\" />\n                Request Withdrawal\n              </Button>\n            </DialogTrigger>\n            <DialogContent>\n              <DialogHeader>\n                <DialogTitle>Request Withdrawal</DialogTitle>\n              </DialogHeader>\n              <div className=\"space-y-4\">\n                <div>\n                  <label className=\"text-sm font-medium text-gray-700\">Cryptocurrency</label>\n                  <Select value={withdrawMethod} onValueChange={setWithdrawMethod}>\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"BTC\">Bitcoin (BTC)</SelectItem>\n                      <SelectItem value=\"XMR\">Monero (XMR)</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium text-gray-700\">Amount</label>\n                  <Input\n                    placeholder={`Enter amount in ${withdrawMethod}`}\n                    value={withdrawAmount}\n                    onChange={(e) => setWithdrawAmount(e.target.value)}\n                  />\n                  <p className=\"text-xs text-gray-400 mt-1\">\n                    Available: {withdrawMethod === \"BTC\" ? pendingEarnings.btc.amount + \" BTC\" : pendingEarnings.xmr.amount + \" XMR\"}\n                  </p>\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium text-gray-700\">Wallet Address</label>\n                  <Input\n                    placeholder={`Your ${withdrawMethod} address`}\n                    value={withdrawAddress}\n                    onChange={(e) => setWithdrawAddress(e.target.value)}\n                  />\n                </div>\n                <div className=\"bg-yellow-50 p-3 rounded-lg\">\n                  <p className=\"text-sm text-yellow-800\">\n                    <strong>Note:</strong> Withdrawals are processed within 24 hours. A small network fee will be deducted from your withdrawal amount.\n                  </p>\n                </div>\n                <div className=\"flex justify-end space-x-3\">\n                  <Button variant=\"outline\">Cancel</Button>\n                  <Button onClick={handleWithdraw} className=\"bg-blue-500 hover:bg-blue-600\">\n                    Submit Request\n                  </Button>\n                </div>\n              </div>\n            </DialogContent>\n          </Dialog>\n        </div>\n\n        {/* Balance Overview */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n          <Card className=\"border border-gray-700 bg-gray-900 bg-gradient-to-br from-orange-50 to-orange-100\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <div className=\"text-orange-600\">\n                  <Wallet className=\"w-8 h-8\" />\n                </div>\n                <Badge className=\"bg-orange-500 text-white\">BTC</Badge>\n              </div>\n              <div className=\"text-2xl font-bold text-white\">{pendingEarnings.btc.amount} BTC</div>\n              <p className=\"text-sm text-gray-400\">≈ {pendingEarnings.btc.usd}</p>\n              <p className=\"text-xs text-gray-400 mt-1\">{pendingEarnings.btc.orders} pending orders</p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"border border-gray-700 bg-gray-900 bg-gradient-to-br from-gray-50 to-gray-100\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <div className=\"text-gray-400\">\n                  <Wallet className=\"w-8 h-8\" />\n                </div>\n                <Badge className=\"bg-gray-600 text-white\">XMR</Badge>\n              </div>\n              <div className=\"text-2xl font-bold text-white\">{pendingEarnings.xmr.amount} XMR</div>\n              <p className=\"text-sm text-gray-400\">≈ {pendingEarnings.xmr.usd}</p>\n              <p className=\"text-xs text-gray-400 mt-1\">{pendingEarnings.xmr.orders} pending orders</p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"border border-gray-700 bg-gray-900 bg-gradient-to-br from-blue-50 to-blue-100\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <div className=\"text-blue-600\">\n                  <TrendingUp className=\"w-8 h-8\" />\n                </div>\n                <Badge className=\"bg-blue-500 text-white\">TOTAL</Badge>\n              </div>\n              <div className=\"text-2xl font-bold text-white\">{pendingEarnings.total.usd}</div>\n              <p className=\"text-sm text-gray-400\">Total Pending</p>\n              <p className=\"text-xs text-gray-400 mt-1\">{pendingEarnings.total.orders} total orders</p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n          <Card className=\"border border-gray-700 bg-gray-900\">\n            <CardContent className=\"p-6\">\n              <div className=\"text-2xl font-bold text-green-600\">${totalPaidOut.toLocaleString()}</div>\n              <p className=\"text-sm text-gray-400\">Total Paid Out</p>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"border border-gray-700 bg-gray-900\">\n            <CardContent className=\"p-6\">\n              <div className=\"text-2xl font-bold text-blue-600\">{payoutHistory.length}</div>\n              <p className=\"text-sm text-gray-400\">Total Withdrawals</p>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"border border-gray-700 bg-gray-900\">\n            <CardContent className=\"p-6\">\n              <div className=\"text-2xl font-bold text-purple-600\">24h</div>\n              <p className=\"text-sm text-gray-400\">Processing Time</p>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"border border-gray-700 bg-gray-900\">\n            <CardContent className=\"p-6\">\n              <div className=\"text-2xl font-bold text-orange-600\">\n                {payoutHistory.filter(p => p.status === \"Completed\").length}\n              </div>\n              <p className=\"text-sm text-gray-400\">Successful Payouts</p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Filters */}\n        <Card className=\"border border-gray-700 bg-gray-900\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex flex-col sm:flex-row gap-4\">\n              <Select value={filterMethod} onValueChange={setFilterMethod}>\n                <SelectTrigger className=\"w-full sm:w-48\">\n                  <SelectValue placeholder=\"Filter by method\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Methods</SelectItem>\n                  <SelectItem value=\"BTC\">Bitcoin (BTC)</SelectItem>\n                  <SelectItem value=\"XMR\">Monero (XMR)</SelectItem>\n                </SelectContent>\n              </Select>\n              <Button variant=\"outline\">\n                <Download className=\"w-4 h-4 mr-2\" />\n                Export History\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Payout History */}\n        <Card className=\"border border-gray-700 bg-gray-900\">\n          <CardHeader>\n            <CardTitle className=\"text-xl font-bold text-white\">\n              Withdrawal History ({filteredPayouts.length})\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {filteredPayouts.map((payout) => (\n                <div key={payout.id} className=\"flex items-center justify-between p-4 bg-gray-800 rounded-lg hover:bg-gray-700 transition-colors\">\n                  <div className=\"flex items-center space-x-4\">\n                    <div className=\"w-12 h-12 bg-gradient-to-br from-blue-500 to-purple-600 rounded-full flex items-center justify-center\">\n                      <Wallet className=\"w-6 h-6 text-white\" />\n                    </div>\n                    \n                    <div>\n                      <div className=\"flex items-center space-x-3 mb-1\">\n                        <h3 className=\"font-semibold text-white\">{payout.id}</h3>\n                        <Badge className={`text-xs ${getStatusColor(payout.status)}`}>\n                          {payout.status}\n                        </Badge>\n                        <Badge variant=\"outline\" className=\"text-xs\">\n                          {payout.method}\n                        </Badge>\n                      </div>\n                      <p className=\"text-sm text-gray-400\">\n                        To: {payout.address.substring(0, 8)}...{payout.address.substring(payout.address.length - 6)}\n                        <Button \n                          variant=\"ghost\" \n                          size=\"sm\" \n                          className=\"ml-2 h-auto p-0\"\n                          onClick={() => copyToClipboard(payout.address)}\n                        >\n                          <Copy className=\"w-3 h-3\" />\n                        </Button>\n                      </p>\n                      <p className=\"text-xs text-gray-400\">{payout.date}</p>\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-center space-x-6\">\n                    <div className=\"text-right\">\n                      <div className=\"font-semibold text-white\">{payout.amount}</div>\n                      <div className=\"text-sm text-gray-400\">{payout.usdAmount}</div>\n                    </div>\n\n                    <div className=\"flex items-center space-x-2\">\n                      {payout.status === \"Completed\" ? (\n                        <CheckCircle className=\"w-5 h-5 text-green-500\" />\n                      ) : payout.status === \"Processing\" ? (\n                        <Clock className=\"w-5 h-5 text-yellow-500\" />\n                      ) : null}\n                      \n                      {payout.txHash && (\n                        <Button \n                          variant=\"ghost\" \n                          size=\"sm\"\n                          onClick={() => window.open(`https://blockchair.com/${payout.method.toLowerCase()}/transaction/${payout.txHash}`, '_blank')}\n                        >\n                          <ExternalLink className=\"w-4 h-4\" />\n                        </Button>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n\n            {filteredPayouts.length === 0 && (\n              <div className=\"text-center py-12\">\n                <div className=\"text-gray-400 mb-4\">\n                  <Wallet className=\"w-12 h-12 mx-auto\" />\n                </div>\n                <h3 className=\"text-lg font-medium text-white mb-2\">No withdrawals found</h3>\n                <p className=\"text-gray-400\">Your withdrawal history will appear here.</p>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Payout Information */}\n        <Card className=\"border border-gray-700 bg-gray-900\">\n          <CardHeader>\n            <CardTitle className=\"text-xl font-bold text-white\">Payout Information</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div>\n                <h4 className=\"font-semibold text-white mb-3\">Withdrawal Limits</h4>\n                <div className=\"space-y-2 text-sm\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-400\">Minimum BTC:</span>\n                    <span className=\"font-medium\">0.001 BTC</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-400\">Minimum XMR:</span>\n                    <span className=\"font-medium\">0.1 XMR</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-400\">Daily Limit:</span>\n                    <span className=\"font-medium\">10 BTC / 100 XMR</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-400\">Processing Time:</span>\n                    <span className=\"font-medium\">6-24 hours</span>\n                  </div>\n                </div>\n              </div>\n              \n              <div>\n                <h4 className=\"font-semibold text-white mb-3\">Network Fees</h4>\n                <div className=\"space-y-2 text-sm\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-400\">BTC Network Fee:</span>\n                    <span className=\"font-medium\">~0.0001 BTC</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-400\">XMR Network Fee:</span>\n                    <span className=\"font-medium\">~0.001 XMR</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-400\">Fee Calculation:</span>\n                    <span className=\"font-medium\">Dynamic</span>\n                  </div>\n                </div>\n                <p className=\"text-xs text-gray-400 mt-2\">\n                  Network fees are automatically calculated based on current network conditions.\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </VendorLayout>\n  );\n}","size_bytes":17253},"client/src/pages/vendor/reviews.tsx":{"content":"import { useState } from \"react\";\nimport { VendorLayout } from \"@/components/vendor/VendorLayout\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Star, Search, MoreVertical, Reply, Flag, ThumbsUp, MessageCircle } from \"lucide-react\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\n\nconst reviews = [\n  {\n    id: 1,\n    buyer: \"crypto_buyer_01\",\n    product: \"Netflix Premium Account (1 Year)\",\n    rating: 5,\n    title: \"Excellent service!\",\n    content: \"Account works perfectly and was delivered within minutes. Great communication from the vendor. Highly recommended!\",\n    date: \"2024-01-15\",\n    verified: true,\n    helpful: 12,\n    reply: null\n  },\n  {\n    id: 2,\n    buyer: \"anonymous_buyer\",\n    product: \"Spotify Premium (6 Months)\",\n    rating: 4,\n    title: \"Good quality account\",\n    content: \"Account is working well so far. Delivery was quick. Only minor issue was the initial login, but vendor helped resolve it quickly.\",\n    date: \"2024-01-14\",\n    verified: true,\n    helpful: 8,\n    reply: {\n      content: \"Thank you for your feedback! We're glad we could help resolve the login issue quickly. Feel free to reach out if you need any assistance in the future.\",\n      date: \"2024-01-14\"\n    }\n  },\n  {\n    id: 3,\n    buyer: \"crypto_buyer_02\",\n    product: \"Disney+ Account (1 Year)\",\n    rating: 5,\n    title: \"Perfect!\",\n    content: \"Everything works as described. Fast delivery and great customer service. Will definitely buy again.\",\n    date: \"2024-01-13\",\n    verified: true,\n    helpful: 15,\n    reply: null\n  },\n  {\n    id: 4,\n    buyer: \"crypto_buyer_03\",\n    product: \"Adobe Creative Cloud (1 Year)\",\n    rating: 3,\n    title: \"Average experience\",\n    content: \"Account works but had some initial setup issues. Vendor was responsive but took a while to resolve. Overall okay.\",\n    date: \"2024-01-12\",\n    verified: true,\n    helpful: 3,\n    reply: null\n  },\n  {\n    id: 5,\n    buyer: \"anonymous_buyer_2\",\n    product: \"VPN Service (1 Year)\",\n    rating: 2,\n    title: \"Had issues\",\n    content: \"Service is working now but had problems for the first few days. Vendor eventually fixed it but communication could be better.\",\n    date: \"2024-01-10\",\n    verified: false,\n    helpful: 1,\n    reply: {\n      content: \"We apologize for the initial issues and delayed communication. We've since improved our support process to prevent similar problems. Thank you for your patience.\",\n      date: \"2024-01-11\"\n    }\n  }\n];\n\nconst renderStars = (rating: number) => {\n  return (\n    <div className=\"flex items-center\">\n      {[1, 2, 3, 4, 5].map((star) => (\n        <Star\n          key={star}\n          className={`w-4 h-4 ${\n            star <= rating ? \"text-yellow-400 fill-current\" : \"text-gray-300\"\n          }`}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default function VendorReviews() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [ratingFilter, setRatingFilter] = useState(\"all\");\n  const [replyText, setReplyText] = useState(\"\");\n  const [replyingTo, setReplyingTo] = useState<number | null>(null);\n\n  const filteredReviews = reviews.filter(review => {\n    const matchesSearch = \n      review.buyer.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      review.product.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      review.content.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesRating = ratingFilter === \"all\" || review.rating.toString() === ratingFilter;\n    return matchesSearch && matchesRating;\n  });\n\n  const averageRating = reviews.reduce((sum, review) => sum + review.rating, 0) / reviews.length;\n  const ratingCounts = [1, 2, 3, 4, 5].map(rating => \n    reviews.filter(review => review.rating === rating).length\n  );\n\n  const handleReply = (reviewId: number) => {\n    // Handle reply submission\n    console.log(`Replying to review ${reviewId}: ${replyText}`);\n    setReplyText(\"\");\n    setReplyingTo(null);\n  };\n\n  return (\n    <VendorLayout>\n      <div className=\"space-y-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-white\">Customer Reviews</h1>\n            <p className=\"text-gray-400\">Manage customer feedback and respond to reviews</p>\n          </div>\n        </div>\n\n        {/* Stats Overview */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n          <Card className=\"border border-gray-700 bg-gray-900\">\n            <CardContent className=\"p-6\">\n              <div className=\"text-center\">\n                <div className=\"text-3xl font-bold text-white\">{averageRating.toFixed(1)}</div>\n                <div className=\"flex items-center justify-center my-2\">\n                  {renderStars(Math.round(averageRating))}\n                </div>\n                <p className=\"text-sm text-gray-400\">Average Rating</p>\n                <p className=\"text-xs text-gray-400\">{reviews.length} total reviews</p>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"border border-gray-700 bg-gray-900\">\n            <CardContent className=\"p-6\">\n              <div className=\"text-2xl font-bold text-green-600\">{ratingCounts[4]}</div>\n              <p className=\"text-sm text-gray-400\">5-Star Reviews</p>\n              <p className=\"text-xs text-gray-400\">{((ratingCounts[4] / reviews.length) * 100).toFixed(1)}% of total</p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"border border-gray-700 bg-gray-900\">\n            <CardContent className=\"p-6\">\n              <div className=\"text-2xl font-bold text-blue-600\">\n                {reviews.filter(r => !r.reply).length}\n              </div>\n              <p className=\"text-sm text-gray-400\">Pending Replies</p>\n              <p className=\"text-xs text-gray-400\">Need your response</p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"border border-gray-700 bg-gray-900\">\n            <CardContent className=\"p-6\">\n              <div className=\"text-2xl font-bold text-purple-600\">\n                {reviews.filter(r => r.verified).length}\n              </div>\n              <p className=\"text-sm text-gray-400\">Verified Reviews</p>\n              <p className=\"text-xs text-gray-400\">From confirmed buyers</p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Rating Distribution */}\n        <Card className=\"border border-gray-700 bg-gray-900\">\n          <CardHeader>\n            <CardTitle className=\"text-xl font-bold text-white\">Rating Distribution</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              {[5, 4, 3, 2, 1].map((rating) => (\n                <div key={rating} className=\"flex items-center space-x-4\">\n                  <div className=\"flex items-center space-x-2 w-20\">\n                    <span className=\"text-sm font-medium\">{rating}</span>\n                    <Star className=\"w-4 h-4 text-yellow-400 fill-current\" />\n                  </div>\n                  <div className=\"flex-1 bg-gray-200 rounded-full h-2\">\n                    <div \n                      className=\"bg-blue-500 h-2 rounded-full transition-all duration-500\"\n                      style={{ width: `${(ratingCounts[rating - 1] / reviews.length) * 100}%` }}\n                    ></div>\n                  </div>\n                  <span className=\"text-sm text-gray-400 w-12\">{ratingCounts[rating - 1]}</span>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Filters */}\n        <Card className=\"border border-gray-700 bg-gray-900\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex flex-col sm:flex-row gap-4\">\n              <div className=\"flex-1\">\n                <div className=\"relative\">\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n                  <Input\n                    placeholder=\"Search reviews, buyers, products...\"\n                    value={searchTerm}\n                    onChange={(e) => setSearchTerm(e.target.value)}\n                    className=\"pl-10\"\n                  />\n                </div>\n              </div>\n              <Select value={ratingFilter} onValueChange={setRatingFilter}>\n                <SelectTrigger className=\"w-full sm:w-48\">\n                  <SelectValue placeholder=\"Filter by rating\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Ratings</SelectItem>\n                  <SelectItem value=\"5\">5 Stars</SelectItem>\n                  <SelectItem value=\"4\">4 Stars</SelectItem>\n                  <SelectItem value=\"3\">3 Stars</SelectItem>\n                  <SelectItem value=\"2\">2 Stars</SelectItem>\n                  <SelectItem value=\"1\">1 Star</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Reviews List */}\n        <Card className=\"border border-gray-700 bg-gray-900\">\n          <CardHeader>\n            <CardTitle className=\"text-xl font-bold text-white\">\n              Reviews ({filteredReviews.length})\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-6\">\n              {filteredReviews.map((review) => (\n                <div key={review.id} className=\"border-b border-gray-700 bg-gray-900 pb-6 last:border-b-0 last:pb-0\">\n                  <div className=\"flex items-start justify-between mb-4\">\n                    <div className=\"flex items-center space-x-4\">\n                      <div className=\"w-10 h-10 bg-blue-100 rounded-full flex items-center justify-center\">\n                        <span className=\"text-blue-600 font-semibold text-sm\">\n                          {review.buyer.substring(0, 2).toUpperCase()}\n                        </span>\n                      </div>\n                      <div>\n                        <div className=\"flex items-center space-x-2\">\n                          <h4 className=\"font-medium text-white\">{review.buyer}</h4>\n                          {review.verified && (\n                            <Badge variant=\"outline\" className=\"text-xs bg-green-50 text-green-700 border-green-200\">\n                              Verified\n                            </Badge>\n                          )}\n                        </div>\n                        <p className=\"text-sm text-gray-400\">{review.product}</p>\n                        <p className=\"text-xs text-gray-400\">{review.date}</p>\n                      </div>\n                    </div>\n                    \n                    <DropdownMenu>\n                      <DropdownMenuTrigger asChild>\n                        <Button variant=\"ghost\" size=\"sm\">\n                          <MoreVertical className=\"w-4 h-4\" />\n                        </Button>\n                      </DropdownMenuTrigger>\n                      <DropdownMenuContent align=\"end\">\n                        <DropdownMenuItem>\n                          <Flag className=\"w-4 h-4 mr-2\" />\n                          Report Review\n                        </DropdownMenuItem>\n                      </DropdownMenuContent>\n                    </DropdownMenu>\n                  </div>\n\n                  <div className=\"mb-4\">\n                    <div className=\"flex items-center space-x-3 mb-2\">\n                      {renderStars(review.rating)}\n                      <h3 className=\"font-semibold text-white\">{review.title}</h3>\n                    </div>\n                    <p className=\"text-gray-700\">{review.content}</p>\n                  </div>\n\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-4\">\n                      <button className=\"flex items-center space-x-1 text-gray-400 hover:text-gray-700\">\n                        <ThumbsUp className=\"w-4 h-4\" />\n                        <span className=\"text-sm\">{review.helpful} helpful</span>\n                      </button>\n                    </div>\n\n                    {!review.reply && (\n                      <Dialog>\n                        <DialogTrigger asChild>\n                          <Button size=\"sm\" variant=\"outline\">\n                            <Reply className=\"w-4 h-4 mr-2\" />\n                            Reply\n                          </Button>\n                        </DialogTrigger>\n                        <DialogContent>\n                          <DialogHeader>\n                            <DialogTitle>Reply to Review</DialogTitle>\n                          </DialogHeader>\n                          <div className=\"space-y-4\">\n                            <div className=\"bg-gray-800 p-4 rounded-lg\">\n                              <div className=\"flex items-center space-x-2 mb-2\">\n                                {renderStars(review.rating)}\n                                <span className=\"font-semibold\">{review.title}</span>\n                              </div>\n                              <p className=\"text-gray-700\">{review.content}</p>\n                            </div>\n                            <Textarea\n                              placeholder=\"Write your reply...\"\n                              value={replyText}\n                              onChange={(e) => setReplyText(e.target.value)}\n                              className=\"min-h-24\"\n                            />\n                            <div className=\"flex justify-end space-x-3\">\n                              <Button variant=\"outline\">Cancel</Button>\n                              <Button onClick={() => handleReply(review.id)}>\n                                Post Reply\n                              </Button>\n                            </div>\n                          </div>\n                        </DialogContent>\n                      </Dialog>\n                    )}\n                  </div>\n\n                  {review.reply && (\n                    <div className=\"mt-4 ml-14 p-4 bg-blue-50 rounded-lg border-l-4 border-blue-500\">\n                      <div className=\"flex items-center space-x-2 mb-2\">\n                        <MessageCircle className=\"w-4 h-4 text-blue-600\" />\n                        <span className=\"font-medium text-blue-900\">Your Reply</span>\n                        <span className=\"text-xs text-blue-600\">{review.reply.date}</span>\n                      </div>\n                      <p className=\"text-blue-800\">{review.reply.content}</p>\n                    </div>\n                  )}\n                </div>\n              ))}\n            </div>\n\n            {filteredReviews.length === 0 && (\n              <div className=\"text-center py-12\">\n                <div className=\"text-gray-400 mb-4\">\n                  <Star className=\"w-12 h-12 mx-auto\" />\n                </div>\n                <h3 className=\"text-lg font-medium text-white mb-2\">No reviews found</h3>\n                <p className=\"text-gray-400\">Try adjusting your search or filter criteria.</p>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </VendorLayout>\n  );\n}","size_bytes":15732},"client/src/pages/vendor/settings.tsx":{"content":"import { useState } from \"react\";\nimport { VendorLayout } from \"@/components/vendor/VendorLayout\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { User, Store, CreditCard, Bell, Shield, Key, Save, Upload } from \"lucide-react\";\n\nexport default function VendorSettings() {\n  const [profileData, setProfileData] = useState({\n    businessName: \"CryptoAccountsPlus\",\n    username: \"cryptoaccountsplus\",\n    email: \"vendor@cryptoaccountsplus.com\",\n    contact: \"+1234567890\",\n    description: \"Premium digital accounts and streaming services provider. Offering high-quality Netflix, Spotify, Adobe, and other premium accounts with warranty and support.\",\n    category: \"Streaming Accounts\",\n    website: \"https://cryptoaccountsplus.com\",\n    location: \"Global\"\n  });\n\n  const [paymentData, setPaymentData] = useState({\n    btcAddress: \"bc1qxy2kgdygjrsqtzq2n0yrf2493p83kkfjhx0wlh\",\n    xmrAddress: \"4A1BvXRJjVhHpP9ErvwMdqXHnF7VjZn2KyTpgQfGQfGQKT7bqYzLYzKvD2d3nYzNxXdpBmCdH1vWxM9xKsT2vKpWBnTnY4QvXr\",\n    escrowEnabled: true,\n    commissionRate: \"5%\",\n    payoutSchedule: \"weekly\"\n  });\n\n  const [notificationSettings, setNotificationSettings] = useState({\n    newOrders: true,\n    messages: true,\n    disputes: true,\n    payouts: true,\n    marketing: false,\n    reviews: true\n  });\n\n  const [securitySettings, setSecuritySettings] = useState({\n    twoFactorEnabled: false,\n    loginNotifications: true,\n    suspiciousActivityAlerts: true\n  });\n\n  const handleProfileSave = () => {\n    // Handle profile save\n    console.log(\"Saving profile:\", profileData);\n  };\n\n  const handlePaymentSave = () => {\n    // Handle payment settings save\n    console.log(\"Saving payment settings:\", paymentData);\n  };\n\n  const handleNotificationSave = () => {\n    // Handle notification settings save\n    console.log(\"Saving notification settings:\", notificationSettings);\n  };\n\n  const handleSecuritySave = () => {\n    // Handle security settings save\n    console.log(\"Saving security settings:\", securitySettings);\n  };\n\n  return (\n    <VendorLayout>\n      <div className=\"space-y-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-white\">Settings</h1>\n            <p className=\"text-gray-400\">Manage your vendor profile and preferences</p>\n          </div>\n          <Badge className=\"bg-green-100 text-green-800\">\n            Verified Vendor\n          </Badge>\n        </div>\n\n        {/* Settings Tabs */}\n        <Tabs defaultValue=\"profile\" className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-4\">\n            <TabsTrigger value=\"profile\" className=\"flex items-center space-x-2\">\n              <User className=\"w-4 h-4\" />\n              <span>Profile</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"payments\" className=\"flex items-center space-x-2\">\n              <CreditCard className=\"w-4 h-4\" />\n              <span>Payments</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"notifications\" className=\"flex items-center space-x-2\">\n              <Bell className=\"w-4 h-4\" />\n              <span>Notifications</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"security\" className=\"flex items-center space-x-2\">\n              <Shield className=\"w-4 h-4\" />\n              <span>Security</span>\n            </TabsTrigger>\n          </TabsList>\n\n          {/* Profile Settings */}\n          <TabsContent value=\"profile\" className=\"space-y-6\">\n            <Card className=\"border border-gray-700 bg-gray-900\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Store className=\"w-5 h-5\" />\n                  <span>Business Information</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"businessName\">Business Name</Label>\n                    <Input\n                      id=\"businessName\"\n                      value={profileData.businessName}\n                      onChange={(e) => setProfileData({...profileData, businessName: e.target.value})}\n                    />\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"username\">Username</Label>\n                    <Input\n                      id=\"username\"\n                      value={profileData.username}\n                      onChange={(e) => setProfileData({...profileData, username: e.target.value})}\n                    />\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"email\">Email Address</Label>\n                    <Input\n                      id=\"email\"\n                      type=\"email\"\n                      value={profileData.email}\n                      onChange={(e) => setProfileData({...profileData, email: e.target.value})}\n                    />\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"contact\">Contact</Label>\n                    <Input\n                      id=\"contact\"\n                      value={profileData.contact}\n                      onChange={(e) => setProfileData({...profileData, contact: e.target.value})}\n                    />\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"category\">Category</Label>\n                    <Select value={profileData.category} onValueChange={(value) => setProfileData({...profileData, category: value})}>\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"Streaming Accounts\">Streaming Accounts</SelectItem>\n                        <SelectItem value=\"Digital Goods\">Digital Goods</SelectItem>\n                        <SelectItem value=\"Gaming Accounts\">Gaming Accounts</SelectItem>\n                        <SelectItem value=\"VPN & Security\">VPN & Security</SelectItem>\n                        <SelectItem value=\"Educational Services\">Educational Services</SelectItem>\n                        <SelectItem value=\"Other\">Other</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"website\">Website (Optional)</Label>\n                    <Input\n                      id=\"website\"\n                      value={profileData.website}\n                      onChange={(e) => setProfileData({...profileData, website: e.target.value})}\n                    />\n                  </div>\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"description\">Store Description</Label>\n                  <Textarea\n                    id=\"description\"\n                    value={profileData.description}\n                    onChange={(e) => setProfileData({...profileData, description: e.target.value})}\n                    className=\"h-32\"\n                  />\n                </div>\n                \n                <div className=\"space-y-4\">\n                  <Label>Store Logo/Banner</Label>\n                  <div className=\"flex items-center space-x-4\">\n                    <div className=\"w-20 h-20 bg-gradient-to-br from-blue-500 to-purple-600 rounded-lg flex items-center justify-center\">\n                      <Store className=\"w-8 h-8 text-white\" />\n                    </div>\n                    <Button variant=\"outline\">\n                      <Upload className=\"w-4 h-4 mr-2\" />\n                      Upload New Logo\n                    </Button>\n                  </div>\n                </div>\n                \n                <Button onClick={handleProfileSave} className=\"bg-blue-500 hover:bg-blue-600\">\n                  <Save className=\"w-4 h-4 mr-2\" />\n                  Save Profile\n                </Button>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Payment Settings */}\n          <TabsContent value=\"payments\" className=\"space-y-6\">\n            <Card className=\"border border-gray-700 bg-gray-900\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <CreditCard className=\"w-5 h-5\" />\n                  <span>Payment Configuration</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"btcAddress\">Bitcoin Address</Label>\n                    <Input\n                      id=\"btcAddress\"\n                      value={paymentData.btcAddress}\n                      onChange={(e) => setPaymentData({...paymentData, btcAddress: e.target.value})}\n                      className=\"font-mono text-sm\"\n                    />\n                    <p className=\"text-xs text-gray-400\">For receiving BTC payments</p>\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"xmrAddress\">Monero Address</Label>\n                    <Input\n                      id=\"xmrAddress\"\n                      value={paymentData.xmrAddress}\n                      onChange={(e) => setPaymentData({...paymentData, xmrAddress: e.target.value})}\n                      className=\"font-mono text-sm\"\n                    />\n                    <p className=\"text-xs text-gray-400\">For receiving XMR payments</p>\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"payoutSchedule\">Payout Schedule</Label>\n                    <Select value={paymentData.payoutSchedule} onValueChange={(value) => setPaymentData({...paymentData, payoutSchedule: value})}>\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"daily\">Daily</SelectItem>\n                        <SelectItem value=\"weekly\">Weekly</SelectItem>\n                        <SelectItem value=\"monthly\">Monthly</SelectItem>\n                        <SelectItem value=\"manual\">Manual</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"commissionRate\">Commission Rate</Label>\n                    <Input\n                      id=\"commissionRate\"\n                      value={paymentData.commissionRate}\n                      disabled\n                      className=\"bg-gray-700\"\n                    />\n                    <p className=\"text-xs text-gray-400\">Set by marketplace</p>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-center justify-between p-4 bg-gray-800 rounded-lg\">\n                  <div>\n                    <h4 className=\"font-medium text-white\">Escrow Protection</h4>\n                    <p className=\"text-sm text-gray-400\">Enable escrow for buyer protection</p>\n                  </div>\n                  <Switch\n                    checked={paymentData.escrowEnabled}\n                    onCheckedChange={(checked) => setPaymentData({...paymentData, escrowEnabled: checked})}\n                  />\n                </div>\n                \n                <Button onClick={handlePaymentSave} className=\"bg-blue-500 hover:bg-blue-600\">\n                  <Save className=\"w-4 h-4 mr-2\" />\n                  Save Payment Settings\n                </Button>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Notification Settings */}\n          <TabsContent value=\"notifications\" className=\"space-y-6\">\n            <Card className=\"border border-gray-700 bg-gray-900\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Bell className=\"w-5 h-5\" />\n                  <span>Notification Preferences</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between p-4 bg-gray-800 rounded-lg\">\n                    <div>\n                      <h4 className=\"font-medium text-white\">New Orders</h4>\n                      <p className=\"text-sm text-gray-400\">Get notified when you receive new orders</p>\n                    </div>\n                    <Switch\n                      checked={notificationSettings.newOrders}\n                      onCheckedChange={(checked) => setNotificationSettings({...notificationSettings, newOrders: checked})}\n                    />\n                  </div>\n                  \n                  <div className=\"flex items-center justify-between p-4 bg-gray-800 rounded-lg\">\n                    <div>\n                      <h4 className=\"font-medium text-white\">Messages</h4>\n                      <p className=\"text-sm text-gray-400\">Get notified when customers send messages</p>\n                    </div>\n                    <Switch\n                      checked={notificationSettings.messages}\n                      onCheckedChange={(checked) => setNotificationSettings({...notificationSettings, messages: checked})}\n                    />\n                  </div>\n                  \n                  <div className=\"flex items-center justify-between p-4 bg-gray-800 rounded-lg\">\n                    <div>\n                      <h4 className=\"font-medium text-white\">Disputes</h4>\n                      <p className=\"text-sm text-gray-400\">Get notified about dispute activities</p>\n                    </div>\n                    <Switch\n                      checked={notificationSettings.disputes}\n                      onCheckedChange={(checked) => setNotificationSettings({...notificationSettings, disputes: checked})}\n                    />\n                  </div>\n                  \n                  <div className=\"flex items-center justify-between p-4 bg-gray-800 rounded-lg\">\n                    <div>\n                      <h4 className=\"font-medium text-white\">Payouts</h4>\n                      <p className=\"text-sm text-gray-400\">Get notified about payout status</p>\n                    </div>\n                    <Switch\n                      checked={notificationSettings.payouts}\n                      onCheckedChange={(checked) => setNotificationSettings({...notificationSettings, payouts: checked})}\n                    />\n                  </div>\n                  \n                  <div className=\"flex items-center justify-between p-4 bg-gray-800 rounded-lg\">\n                    <div>\n                      <h4 className=\"font-medium text-white\">Reviews</h4>\n                      <p className=\"text-sm text-gray-400\">Get notified about new reviews</p>\n                    </div>\n                    <Switch\n                      checked={notificationSettings.reviews}\n                      onCheckedChange={(checked) => setNotificationSettings({...notificationSettings, reviews: checked})}\n                    />\n                  </div>\n                  \n                  <div className=\"flex items-center justify-between p-4 bg-gray-800 rounded-lg\">\n                    <div>\n                      <h4 className=\"font-medium text-white\">Marketing Updates</h4>\n                      <p className=\"text-sm text-gray-400\">Receive marketing and promotional emails</p>\n                    </div>\n                    <Switch\n                      checked={notificationSettings.marketing}\n                      onCheckedChange={(checked) => setNotificationSettings({...notificationSettings, marketing: checked})}\n                    />\n                  </div>\n                </div>\n                \n                <Button onClick={handleNotificationSave} className=\"bg-blue-500 hover:bg-blue-600\">\n                  <Save className=\"w-4 h-4 mr-2\" />\n                  Save Notification Settings\n                </Button>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Security Settings */}\n          <TabsContent value=\"security\" className=\"space-y-6\">\n            <Card className=\"border border-gray-700 bg-gray-900\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Shield className=\"w-5 h-5\" />\n                  <span>Security & Privacy</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between p-4 bg-gray-800 rounded-lg\">\n                    <div>\n                      <h4 className=\"font-medium text-white\">Two-Factor Authentication</h4>\n                      <p className=\"text-sm text-gray-400\">Add an extra layer of security to your account</p>\n                    </div>\n                    <div className=\"flex items-center space-x-3\">\n                      {securitySettings.twoFactorEnabled && (\n                        <Badge className=\"bg-green-100 text-green-800\">Enabled</Badge>\n                      )}\n                      <Switch\n                        checked={securitySettings.twoFactorEnabled}\n                        onCheckedChange={(checked) => setSecuritySettings({...securitySettings, twoFactorEnabled: checked})}\n                      />\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-center justify-between p-4 bg-gray-800 rounded-lg\">\n                    <div>\n                      <h4 className=\"font-medium text-white\">Login Notifications</h4>\n                      <p className=\"text-sm text-gray-400\">Get notified when someone logs into your account</p>\n                    </div>\n                    <Switch\n                      checked={securitySettings.loginNotifications}\n                      onCheckedChange={(checked) => setSecuritySettings({...securitySettings, loginNotifications: checked})}\n                    />\n                  </div>\n                  \n                  <div className=\"flex items-center justify-between p-4 bg-gray-800 rounded-lg\">\n                    <div>\n                      <h4 className=\"font-medium text-white\">Suspicious Activity Alerts</h4>\n                      <p className=\"text-sm text-gray-400\">Get alerts for unusual account activity</p>\n                    </div>\n                    <Switch\n                      checked={securitySettings.suspiciousActivityAlerts}\n                      onCheckedChange={(checked) => setSecuritySettings({...securitySettings, suspiciousActivityAlerts: checked})}\n                    />\n                  </div>\n                </div>\n                \n                <div className=\"space-y-4\">\n                  <h4 className=\"font-semibold text-white\">Password & Access</h4>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <Button variant=\"outline\" className=\"justify-start\">\n                      <Key className=\"w-4 h-4 mr-2\" />\n                      Change Password\n                    </Button>\n                    <Button variant=\"outline\" className=\"justify-start\">\n                      <Shield className=\"w-4 h-4 mr-2\" />\n                      View Login History\n                    </Button>\n                  </div>\n                </div>\n                \n                <Button onClick={handleSecuritySave} className=\"bg-blue-500 hover:bg-blue-600\">\n                  <Save className=\"w-4 h-4 mr-2\" />\n                  Save Security Settings\n                </Button>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </VendorLayout>\n  );\n}","size_bytes":20865},"client/src/pages/vendor/support.tsx":{"content":"import { useState } from \"react\";\nimport { VendorLayout } from \"@/components/vendor/VendorLayout\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { HelpCircle, Plus, Search, MoreVertical, MessageSquare, FileText, CheckCircle, Clock, AlertCircle } from \"lucide-react\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\n\nconst tickets = [\n  {\n    id: \"TICK-2024-045\",\n    subject: \"Payout Delay Issue\",\n    category: \"Payments\",\n    priority: \"High\",\n    status: \"In Progress\",\n    description: \"My Bitcoin payout scheduled for yesterday hasn't been processed yet. Can you please check the status?\",\n    created: \"2024-01-15\",\n    lastUpdate: \"2024-01-15\",\n    responses: 2\n  },\n  {\n    id: \"TICK-2024-044\",\n    subject: \"Account Verification Help\",\n    category: \"Account\",\n    priority: \"Medium\",\n    status: \"Waiting for Response\",\n    description: \"I need help with completing my vendor verification. The document upload keeps failing.\",\n    created: \"2024-01-14\",\n    lastUpdate: \"2024-01-14\",\n    responses: 1\n  },\n  {\n    id: \"TICK-2024-043\",\n    subject: \"Commission Rate Question\",\n    category: \"General\",\n    priority: \"Low\",\n    status: \"Resolved\",\n    description: \"I have a question about how commission rates are calculated for different product categories.\",\n    created: \"2024-01-12\",\n    lastUpdate: \"2024-01-13\",\n    responses: 3\n  },\n  {\n    id: \"TICK-2024-042\",\n    subject: \"Product Listing Guidelines\",\n    category: \"Listings\",\n    priority: \"Medium\",\n    status: \"Resolved\",\n    description: \"Need clarification on the product listing guidelines for streaming accounts.\",\n    created: \"2024-01-10\",\n    lastUpdate: \"2024-01-11\",\n    responses: 2\n  }\n];\n\nconst faqData = [\n  {\n    category: \"Payments & Payouts\",\n    questions: [\n      {\n        question: \"How often are payouts processed?\",\n        answer: \"Payouts are processed daily for Bitcoin and weekly for Monero. You can change your payout schedule in settings.\"\n      },\n      {\n        question: \"What are the minimum payout amounts?\",\n        answer: \"Minimum payout is 0.001 BTC for Bitcoin and 0.1 XMR for Monero.\"\n      },\n      {\n        question: \"How are commission rates calculated?\",\n        answer: \"Commission rates vary by category: 5% for streaming accounts, 7% for gaming accounts, and 3% for VPN services.\"\n      }\n    ]\n  },\n  {\n    category: \"Account & Verification\",\n    questions: [\n      {\n        question: \"How long does vendor verification take?\",\n        answer: \"Vendor verification typically takes 1-3 business days after submitting all required documents.\"\n      },\n      {\n        question: \"What documents are required for verification?\",\n        answer: \"You need a valid ID, proof of business (if applicable), and verification of your crypto wallet addresses.\"\n      }\n    ]\n  },\n  {\n    category: \"Product Listings\",\n    questions: [\n      {\n        question: \"How many products can I list?\",\n        answer: \"There's no limit on the number of products you can list. However, ensure all listings comply with our guidelines.\"\n      },\n      {\n        question: \"Can I edit my listings after approval?\",\n        answer: \"Yes, you can edit product details, pricing, and descriptions. Major changes may require re-approval.\"\n      }\n    ]\n  }\n];\n\nconst getStatusColor = (status: string) => {\n  switch (status) {\n    case \"Open\":\n      return \"bg-blue-100 text-blue-800 border-blue-200\";\n    case \"In Progress\":\n      return \"bg-yellow-100 text-yellow-800 border-yellow-200\";\n    case \"Waiting for Response\":\n      return \"bg-purple-100 text-purple-800 border-purple-200\";\n    case \"Resolved\":\n      return \"bg-green-100 text-green-800 border-green-200\";\n    case \"Closed\":\n      return \"bg-gray-700 text-gray-800 border-gray-700 bg-gray-900\";\n    default:\n      return \"bg-gray-700 text-gray-800 border-gray-700 bg-gray-900\";\n  }\n};\n\nconst getPriorityColor = (priority: string) => {\n  switch (priority) {\n    case \"High\":\n      return \"bg-red-500\";\n    case \"Medium\":\n      return \"bg-yellow-500\";\n    case \"Low\":\n      return \"bg-green-500\";\n    default:\n      return \"bg-gray-8000\";\n  }\n};\n\nexport default function VendorSupport() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [newTicket, setNewTicket] = useState({\n    subject: \"\",\n    category: \"\",\n    priority: \"Medium\",\n    description: \"\"\n  });\n\n  const filteredTickets = tickets.filter(ticket => {\n    const matchesSearch = \n      ticket.subject.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      ticket.id.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      ticket.description.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesStatus = statusFilter === \"all\" || ticket.status === statusFilter;\n    return matchesSearch && matchesStatus;\n  });\n\n  const handleCreateTicket = () => {\n    // Handle ticket creation\n    console.log(\"Creating ticket:\", newTicket);\n    setNewTicket({\n      subject: \"\",\n      category: \"\",\n      priority: \"Medium\",\n      description: \"\"\n    });\n  };\n\n  const totalTickets = tickets.length;\n  const openTickets = tickets.filter(t => t.status === \"Open\" || t.status === \"In Progress\").length;\n  const waitingResponse = tickets.filter(t => t.status === \"Waiting for Response\").length;\n\n  return (\n    <VendorLayout>\n      <div className=\"space-y-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-white\">Support & Help</h1>\n            <p className=\"text-gray-400\">Get help with your vendor account and marketplace features</p>\n          </div>\n          <Dialog>\n            <DialogTrigger asChild>\n              <Button className=\"bg-blue-500 hover:bg-blue-600\">\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Create Ticket\n              </Button>\n            </DialogTrigger>\n            <DialogContent>\n              <DialogHeader>\n                <DialogTitle>Create Support Ticket</DialogTitle>\n              </DialogHeader>\n              <div className=\"space-y-4\">\n                <div>\n                  <label className=\"text-sm font-medium text-gray-700\">Subject</label>\n                  <Input\n                    placeholder=\"Brief description of your issue\"\n                    value={newTicket.subject}\n                    onChange={(e) => setNewTicket({...newTicket, subject: e.target.value})}\n                  />\n                </div>\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <label className=\"text-sm font-medium text-gray-700\">Category</label>\n                    <Select value={newTicket.category} onValueChange={(value) => setNewTicket({...newTicket, category: value})}>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select category\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"Account\">Account</SelectItem>\n                        <SelectItem value=\"Payments\">Payments</SelectItem>\n                        <SelectItem value=\"Listings\">Listings</SelectItem>\n                        <SelectItem value=\"Technical\">Technical</SelectItem>\n                        <SelectItem value=\"General\">General</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div>\n                    <label className=\"text-sm font-medium text-gray-700\">Priority</label>\n                    <Select value={newTicket.priority} onValueChange={(value) => setNewTicket({...newTicket, priority: value})}>\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"Low\">Low</SelectItem>\n                        <SelectItem value=\"Medium\">Medium</SelectItem>\n                        <SelectItem value=\"High\">High</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium text-gray-700\">Description</label>\n                  <Textarea\n                    placeholder=\"Describe your issue in detail...\"\n                    value={newTicket.description}\n                    onChange={(e) => setNewTicket({...newTicket, description: e.target.value})}\n                    className=\"min-h-32\"\n                  />\n                </div>\n                <div className=\"flex justify-end space-x-3\">\n                  <Button variant=\"outline\">Cancel</Button>\n                  <Button onClick={handleCreateTicket} className=\"bg-blue-500 hover:bg-blue-600\">\n                    Create Ticket\n                  </Button>\n                </div>\n              </div>\n            </DialogContent>\n          </Dialog>\n        </div>\n\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n          <Card className=\"border border-gray-700 bg-gray-900\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <div className=\"text-2xl font-bold text-white\">{totalTickets}</div>\n                  <p className=\"text-sm text-gray-400\">Total Tickets</p>\n                </div>\n                <HelpCircle className=\"w-8 h-8 text-gray-400\" />\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"border border-gray-700 bg-gray-900\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <div className=\"text-2xl font-bold text-yellow-600\">{openTickets}</div>\n                  <p className=\"text-sm text-gray-400\">Open Tickets</p>\n                </div>\n                <Clock className=\"w-8 h-8 text-yellow-400\" />\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"border border-gray-700 bg-gray-900\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <div className=\"text-2xl font-bold text-purple-600\">{waitingResponse}</div>\n                  <p className=\"text-sm text-gray-400\">Waiting Response</p>\n                </div>\n                <AlertCircle className=\"w-8 h-8 text-purple-400\" />\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"border border-gray-700 bg-gray-900\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <div className=\"text-2xl font-bold text-green-600\">\n                    {tickets.filter(t => t.status === \"Resolved\").length}\n                  </div>\n                  <p className=\"text-sm text-gray-400\">Resolved</p>\n                </div>\n                <CheckCircle className=\"w-8 h-8 text-green-400\" />\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Support Tickets */}\n        <Card className=\"border border-gray-700 bg-gray-900\">\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <CardTitle className=\"text-xl font-bold text-white\">Support Tickets</CardTitle>\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"relative\">\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n                  <Input\n                    placeholder=\"Search tickets...\"\n                    value={searchTerm}\n                    onChange={(e) => setSearchTerm(e.target.value)}\n                    className=\"pl-10 w-64\"\n                  />\n                </div>\n                <Select value={statusFilter} onValueChange={setStatusFilter}>\n                  <SelectTrigger className=\"w-48\">\n                    <SelectValue placeholder=\"Filter by status\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Status</SelectItem>\n                    <SelectItem value=\"Open\">Open</SelectItem>\n                    <SelectItem value=\"In Progress\">In Progress</SelectItem>\n                    <SelectItem value=\"Waiting for Response\">Waiting for Response</SelectItem>\n                    <SelectItem value=\"Resolved\">Resolved</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {filteredTickets.map((ticket) => (\n                <div key={ticket.id} className=\"flex items-center justify-between p-4 bg-gray-800 rounded-lg hover:bg-gray-700 transition-colors\">\n                  <div className=\"flex items-center space-x-4\">\n                    <div className=\"flex flex-col items-center\">\n                      <div className={`w-3 h-3 rounded-full ${getPriorityColor(ticket.priority)} mb-1`}></div>\n                      <span className=\"text-xs text-gray-400 uppercase\">{ticket.priority}</span>\n                    </div>\n                    \n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center space-x-3 mb-1\">\n                        <h3 className=\"font-semibold text-white\">{ticket.id}</h3>\n                        <Badge className={`border ${getStatusColor(ticket.status)}`}>\n                          {ticket.status}\n                        </Badge>\n                        <Badge variant=\"outline\" className=\"text-xs\">\n                          {ticket.category}\n                        </Badge>\n                      </div>\n                      <p className=\"text-sm text-gray-400 mb-1\">{ticket.subject}</p>\n                      <div className=\"flex items-center space-x-4 text-xs text-gray-400\">\n                        <span>Created: {ticket.created}</span>\n                        <span>Last update: {ticket.lastUpdate}</span>\n                        <span>{ticket.responses} responses</span>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-center space-x-3\">\n                    <Button size=\"sm\" variant=\"outline\">\n                      <MessageSquare className=\"w-4 h-4 mr-2\" />\n                      View\n                    </Button>\n                    \n                    <DropdownMenu>\n                      <DropdownMenuTrigger asChild>\n                        <Button variant=\"ghost\" size=\"sm\">\n                          <MoreVertical className=\"w-4 h-4\" />\n                        </Button>\n                      </DropdownMenuTrigger>\n                      <DropdownMenuContent align=\"end\">\n                        <DropdownMenuItem>\n                          <FileText className=\"w-4 h-4 mr-2\" />\n                          View Details\n                        </DropdownMenuItem>\n                        {ticket.status !== \"Resolved\" && (\n                          <DropdownMenuItem>\n                            <MessageSquare className=\"w-4 h-4 mr-2\" />\n                            Add Response\n                          </DropdownMenuItem>\n                        )}\n                      </DropdownMenuContent>\n                    </DropdownMenu>\n                  </div>\n                </div>\n              ))}\n            </div>\n\n            {filteredTickets.length === 0 && (\n              <div className=\"text-center py-12\">\n                <div className=\"text-gray-400 mb-4\">\n                  <HelpCircle className=\"w-12 h-12 mx-auto\" />\n                </div>\n                <h3 className=\"text-lg font-medium text-white mb-2\">No tickets found</h3>\n                <p className=\"text-gray-400\">Try adjusting your search criteria or create a new ticket.</p>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* FAQ Section */}\n        <Card className=\"border border-gray-700 bg-gray-900\">\n          <CardHeader>\n            <CardTitle className=\"text-xl font-bold text-white\">Frequently Asked Questions</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-6\">\n              {faqData.map((category, categoryIndex) => (\n                <div key={categoryIndex}>\n                  <h3 className=\"text-lg font-semibold text-white mb-4\">{category.category}</h3>\n                  <div className=\"space-y-4\">\n                    {category.questions.map((faq, faqIndex) => (\n                      <div key={faqIndex} className=\"border border-gray-700 bg-gray-900 rounded-lg p-4\">\n                        <h4 className=\"font-medium text-white mb-2\">{faq.question}</h4>\n                        <p className=\"text-gray-400 text-sm\">{faq.answer}</p>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Contact Information */}\n        <Card className=\"border border-gray-700 bg-gray-900\">\n          <CardHeader>\n            <CardTitle className=\"text-xl font-bold text-white\">Contact Support</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n              <div className=\"text-center p-4 bg-blue-50 rounded-lg\">\n                <MessageSquare className=\"w-8 h-8 text-blue-600 mx-auto mb-3\" />\n                <h4 className=\"font-semibold text-white mb-2\">Live Chat</h4>\n                <p className=\"text-sm text-gray-400 mb-3\">Chat with our support team</p>\n                <p className=\"text-xs text-blue-600\">Available 24/7</p>\n              </div>\n              \n              <div className=\"text-center p-4 bg-green-50 rounded-lg\">\n                <FileText className=\"w-8 h-8 text-green-600 mx-auto mb-3\" />\n                <h4 className=\"font-semibold text-white mb-2\">Email Support</h4>\n                <p className=\"text-sm text-gray-400 mb-3\">vendor-support@cryptomarket.com</p>\n                <p className=\"text-xs text-green-600\">Response within 24h</p>\n              </div>\n              \n              <div className=\"text-center p-4 bg-purple-50 rounded-lg\">\n                <HelpCircle className=\"w-8 h-8 text-purple-600 mx-auto mb-3\" />\n                <h4 className=\"font-semibold text-white mb-2\">Help Center</h4>\n                <p className=\"text-sm text-gray-400 mb-3\">Browse our documentation</p>\n                <p className=\"text-xs text-purple-600\">Self-service guides</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </VendorLayout>\n  );\n}","size_bytes":19470}},"version":1}